//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/st25nfc/type5/st25dv/ST25DVTransferTask.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25nfc/type5/st25dv/ST25DVTransferTask.h"
#include "com/st/st25sdk/Crc.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/command/Iso15693Protocol.h"
#include "com/st/st25sdk/type5/st25dv/ST25DVTag.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/Arrays.h"
#include "java/util/logging/FileHandler.h"
#include "java/util/logging/LogManager.h"
#include "java/util/logging/Logger.h"

@class ComStSt25nfcType5St25dvST25DVTransferTask_State;

@interface ComStSt25nfcType5St25dvST25DVTransferTask () {
 @public
  ComStSt25nfcType5St25dvST25DVTransferTask_State *mState_;
  IOSByteArray *mBuffer_;
  jint mAction_;
  ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *mEvent_;
  jint mOffset_;
  jlong mTimeStamp_;
  jint mMaxPayloadSizeTx_;
  jint mMaxPayloadSizeRx_;
  jlong mTimeTransfer_;
  id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener> mListener_;
  jbyte mTransferFunction_;
  jbyte mTransferCommand_;
}

- (void)sleep_in_msWithInt:(jint)time_in_ms;

- (jint)checkErrorWithComStSt25sdkSTException:(ComStSt25sdkSTException *)e;

- (jboolean)verifyAckDataWithByteArray:(IOSByteArray *)data;

- (IOSByteArray *)undoEscapingWithByteArray:(IOSByteArray *)data;

- (IOSByteArray *)readMessage;

- (jint)readHeader;

- (jint)sendChainedHeaderWithByteArray:(IOSByteArray *)frame
                              withByte:(jbyte)function
                              withByte:(jbyte)command
                               withInt:(jint)length;

- (jint)sendSimpleHeaderWithByteArray:(IOSByteArray *)frame
                             withByte:(jbyte)function
                             withByte:(jbyte)command
                              withInt:(jint)length;

- (jint)sendSprueHeaderWithByteArray:(IOSByteArray *)frame
                            withByte:(jbyte)function
                            withByte:(jbyte)command
                             withInt:(jint)length;

- (jint)readChainedData;

- (jint)sendSimpleDataWithByte:(jbyte)command;

- (jint)sendChainedDataWithByte:(jbyte)command
                    withBoolean:(jboolean)checkRf;

- (jlong)computeCrc;

- (jint)sendCrcWithByte:(jbyte)function;

- (jint)checkAck;

- (jint)checkPasswordAnswer;

- (jint)checkCrc;

- (jint)sendAckWithBoolean:(jboolean)success
                  withByte:(jbyte)function;

@end

J2OBJC_FIELD_SETTER(ComStSt25nfcType5St25dvST25DVTransferTask, mState_, ComStSt25nfcType5St25dvST25DVTransferTask_State *)
J2OBJC_FIELD_SETTER(ComStSt25nfcType5St25dvST25DVTransferTask, mBuffer_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComStSt25nfcType5St25dvST25DVTransferTask, mEvent_, ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *)
J2OBJC_FIELD_SETTER(ComStSt25nfcType5St25dvST25DVTransferTask, mListener_, id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>)

inline jint ComStSt25nfcType5St25dvST25DVTransferTask_get_FAST_TRANSFER_COMMAND(void);
#define ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_COMMAND 0
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask, FAST_TRANSFER_COMMAND, jint)

inline jint ComStSt25nfcType5St25dvST25DVTransferTask_get_FAST_TRANSFER_ANSWER(void);
#define ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_ANSWER 1
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask, FAST_TRANSFER_ANSWER, jint)

inline jint ComStSt25nfcType5St25dvST25DVTransferTask_get_FAST_TRANSFER_ACK(void);
#define ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_ACK 2
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask, FAST_TRANSFER_ACK, jint)

inline jint ComStSt25nfcType5St25dvST25DVTransferTask_get_FAST_TRANSFER_OK(void);
#define ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_OK 0
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask, FAST_TRANSFER_OK, jint)

inline jint ComStSt25nfcType5St25dvST25DVTransferTask_get_FAST_TRANSFER_ERROR(void);
#define ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_ERROR 1
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask, FAST_TRANSFER_ERROR, jint)

inline jint ComStSt25nfcType5St25dvST25DVTransferTask_get_ERROR(void);
#define ComStSt25nfcType5St25dvST25DVTransferTask_ERROR -1
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask, ERROR, jint)

inline jint ComStSt25nfcType5St25dvST25DVTransferTask_get_TRY_AGAIN(void);
#define ComStSt25nfcType5St25dvST25DVTransferTask_TRY_AGAIN 0
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask, TRY_AGAIN, jint)

inline jint ComStSt25nfcType5St25dvST25DVTransferTask_get_OK(void);
#define ComStSt25nfcType5St25dvST25DVTransferTask_OK 1
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask, OK, jint)

inline jint ComStSt25nfcType5St25dvST25DVTransferTask_get_SLEEP_TIME(void);
#define ComStSt25nfcType5St25dvST25DVTransferTask_SLEEP_TIME 10
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask, SLEEP_TIME, jint)

inline jint ComStSt25nfcType5St25dvST25DVTransferTask_get_CHAINED_HEADER_SIZE(void);
#define ComStSt25nfcType5St25dvST25DVTransferTask_CHAINED_HEADER_SIZE 13
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask, CHAINED_HEADER_SIZE, jint)

inline jint ComStSt25nfcType5St25dvST25DVTransferTask_get_SIMPLE_HEADER_SIZE(void);
#define ComStSt25nfcType5St25dvST25DVTransferTask_SIMPLE_HEADER_SIZE 5
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask, SIMPLE_HEADER_SIZE, jint)

inline jint ComStSt25nfcType5St25dvST25DVTransferTask_get_SPRUE_HEADER_SIZE(void);
#define ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_HEADER_SIZE 3
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask, SPRUE_HEADER_SIZE, jint)

__attribute__((unused)) static void ComStSt25nfcType5St25dvST25DVTransferTask_sleep_in_msWithInt_(ComStSt25nfcType5St25dvST25DVTransferTask *self, jint time_in_ms);

__attribute__((unused)) static jint ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(ComStSt25nfcType5St25dvST25DVTransferTask *self, ComStSt25sdkSTException *e);

__attribute__((unused)) static jboolean ComStSt25nfcType5St25dvST25DVTransferTask_verifyAckDataWithByteArray_(ComStSt25nfcType5St25dvST25DVTransferTask *self, IOSByteArray *data);

__attribute__((unused)) static IOSByteArray *ComStSt25nfcType5St25dvST25DVTransferTask_undoEscapingWithByteArray_(ComStSt25nfcType5St25dvST25DVTransferTask *self, IOSByteArray *data);

__attribute__((unused)) static IOSByteArray *ComStSt25nfcType5St25dvST25DVTransferTask_readMessage(ComStSt25nfcType5St25dvST25DVTransferTask *self);

__attribute__((unused)) static jint ComStSt25nfcType5St25dvST25DVTransferTask_readHeader(ComStSt25nfcType5St25dvST25DVTransferTask *self);

__attribute__((unused)) static jint ComStSt25nfcType5St25dvST25DVTransferTask_sendChainedHeaderWithByteArray_withByte_withByte_withInt_(ComStSt25nfcType5St25dvST25DVTransferTask *self, IOSByteArray *frame, jbyte function, jbyte command, jint length);

__attribute__((unused)) static jint ComStSt25nfcType5St25dvST25DVTransferTask_sendSimpleHeaderWithByteArray_withByte_withByte_withInt_(ComStSt25nfcType5St25dvST25DVTransferTask *self, IOSByteArray *frame, jbyte function, jbyte command, jint length);

__attribute__((unused)) static jint ComStSt25nfcType5St25dvST25DVTransferTask_sendSprueHeaderWithByteArray_withByte_withByte_withInt_(ComStSt25nfcType5St25dvST25DVTransferTask *self, IOSByteArray *frame, jbyte function, jbyte command, jint length);

__attribute__((unused)) static jint ComStSt25nfcType5St25dvST25DVTransferTask_readChainedData(ComStSt25nfcType5St25dvST25DVTransferTask *self);

__attribute__((unused)) static jint ComStSt25nfcType5St25dvST25DVTransferTask_sendSimpleDataWithByte_(ComStSt25nfcType5St25dvST25DVTransferTask *self, jbyte command);

__attribute__((unused)) static jint ComStSt25nfcType5St25dvST25DVTransferTask_sendChainedDataWithByte_withBoolean_(ComStSt25nfcType5St25dvST25DVTransferTask *self, jbyte command, jboolean checkRf);

__attribute__((unused)) static jlong ComStSt25nfcType5St25dvST25DVTransferTask_computeCrc(ComStSt25nfcType5St25dvST25DVTransferTask *self);

__attribute__((unused)) static jint ComStSt25nfcType5St25dvST25DVTransferTask_sendCrcWithByte_(ComStSt25nfcType5St25dvST25DVTransferTask *self, jbyte function);

__attribute__((unused)) static jint ComStSt25nfcType5St25dvST25DVTransferTask_checkAck(ComStSt25nfcType5St25dvST25DVTransferTask *self);

__attribute__((unused)) static jint ComStSt25nfcType5St25dvST25DVTransferTask_checkPasswordAnswer(ComStSt25nfcType5St25dvST25DVTransferTask *self);

__attribute__((unused)) static jint ComStSt25nfcType5St25dvST25DVTransferTask_checkCrc(ComStSt25nfcType5St25dvST25DVTransferTask *self);

__attribute__((unused)) static jint ComStSt25nfcType5St25dvST25DVTransferTask_sendAckWithBoolean_withByte_(ComStSt25nfcType5St25dvST25DVTransferTask *self, jboolean success, jbyte function);

@interface ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener : NSObject

@end

__attribute__((unused)) static void ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_initWithNSString_withInt_(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *new_ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

typedef NS_ENUM(NSUInteger, ComStSt25nfcType5St25dvST25DVTransferTask_State_Enum) {
  ComStSt25nfcType5St25dvST25DVTransferTask_State_Enum_INIT = 0,
  ComStSt25nfcType5St25dvST25DVTransferTask_State_Enum_TRANSFERING = 1,
  ComStSt25nfcType5St25dvST25DVTransferTask_State_Enum_CHECK_CRC = 2,
  ComStSt25nfcType5St25dvST25DVTransferTask_State_Enum_ACKNOWLEDGE = 3,
  ComStSt25nfcType5St25dvST25DVTransferTask_State_Enum_ENDING = 4,
};

@interface ComStSt25nfcType5St25dvST25DVTransferTask_State : JavaLangEnum

@property (readonly, class, nonnull) ComStSt25nfcType5St25dvST25DVTransferTask_State *INIT NS_SWIFT_NAME(INIT);
@property (readonly, class, nonnull) ComStSt25nfcType5St25dvST25DVTransferTask_State *TRANSFERING NS_SWIFT_NAME(TRANSFERING);
@property (readonly, class, nonnull) ComStSt25nfcType5St25dvST25DVTransferTask_State *CHECK_CRC NS_SWIFT_NAME(CHECK_CRC);
@property (readonly, class, nonnull) ComStSt25nfcType5St25dvST25DVTransferTask_State *ACKNOWLEDGE NS_SWIFT_NAME(ACKNOWLEDGE);
@property (readonly, class, nonnull) ComStSt25nfcType5St25dvST25DVTransferTask_State *ENDING NS_SWIFT_NAME(ENDING);
+ (IOSObjectArray *)values;

+ (ComStSt25nfcType5St25dvST25DVTransferTask_State *)valueOfWithNSString:(NSString *)name;

- (ComStSt25nfcType5St25dvST25DVTransferTask_State_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(ComStSt25nfcType5St25dvST25DVTransferTask_State)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComStSt25nfcType5St25dvST25DVTransferTask_State *ComStSt25nfcType5St25dvST25DVTransferTask_State_values_[];

inline ComStSt25nfcType5St25dvST25DVTransferTask_State *ComStSt25nfcType5St25dvST25DVTransferTask_State_get_INIT(void);
J2OBJC_ENUM_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask_State, INIT)

inline ComStSt25nfcType5St25dvST25DVTransferTask_State *ComStSt25nfcType5St25dvST25DVTransferTask_State_get_TRANSFERING(void);
J2OBJC_ENUM_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask_State, TRANSFERING)

inline ComStSt25nfcType5St25dvST25DVTransferTask_State *ComStSt25nfcType5St25dvST25DVTransferTask_State_get_CHECK_CRC(void);
J2OBJC_ENUM_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask_State, CHECK_CRC)

inline ComStSt25nfcType5St25dvST25DVTransferTask_State *ComStSt25nfcType5St25dvST25DVTransferTask_State_get_ACKNOWLEDGE(void);
J2OBJC_ENUM_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask_State, ACKNOWLEDGE)

inline ComStSt25nfcType5St25dvST25DVTransferTask_State *ComStSt25nfcType5St25dvST25DVTransferTask_State_get_ENDING(void);
J2OBJC_ENUM_CONSTANT(ComStSt25nfcType5St25dvST25DVTransferTask_State, ENDING)

__attribute__((unused)) static void ComStSt25nfcType5St25dvST25DVTransferTask_State_initWithNSString_withInt_(ComStSt25nfcType5St25dvST25DVTransferTask_State *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComStSt25nfcType5St25dvST25DVTransferTask_State *new_ComStSt25nfcType5St25dvST25DVTransferTask_State_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static IOSObjectArray *ComStSt25nfcType5St25dvST25DVTransferTask_State_values(void);

__attribute__((unused)) static ComStSt25nfcType5St25dvST25DVTransferTask_State *ComStSt25nfcType5St25dvST25DVTransferTask_State_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComStSt25nfcType5St25dvST25DVTransferTask_State *ComStSt25nfcType5St25dvST25DVTransferTask_State_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComStSt25nfcType5St25dvST25DVTransferTask_State)

jint ComStSt25nfcType5St25dvST25DVTransferTask_temp = 0;
JavaUtilLoggingLogManager *ComStSt25nfcType5St25dvST25DVTransferTask_lm;
JavaUtilLoggingLogger *ComStSt25nfcType5St25dvST25DVTransferTask_logger;
JavaUtilLoggingFileHandler *ComStSt25nfcType5St25dvST25DVTransferTask_fh;

@implementation ComStSt25nfcType5St25dvST25DVTransferTask

+ (jint)FAST_BASIC_TRANSFER_FUNCTION {
  return ComStSt25nfcType5St25dvST25DVTransferTask_FAST_BASIC_TRANSFER_FUNCTION;
}

+ (jint)FAST_IMAGE_UPLOAD_FUNCTION {
  return ComStSt25nfcType5St25dvST25DVTransferTask_FAST_IMAGE_UPLOAD_FUNCTION;
}

+ (jint)FAST_IMAGE_DOWNLOAD_FUNCTION {
  return ComStSt25nfcType5St25dvST25DVTransferTask_FAST_IMAGE_DOWNLOAD_FUNCTION;
}

+ (jint)FAST_FIRMWARE_UPDATE_FUNCTION {
  return ComStSt25nfcType5St25dvST25DVTransferTask_FAST_FIRMWARE_UPDATE_FUNCTION;
}

+ (jint)FAST_PRESENT_PWD_FUNCTION {
  return ComStSt25nfcType5St25dvST25DVTransferTask_FAST_PRESENT_PWD_FUNCTION;
}

+ (jint)FAST_RANDOM_TRANSFER_FUNCTION {
  return ComStSt25nfcType5St25dvST25DVTransferTask_FAST_RANDOM_TRANSFER_FUNCTION;
}

+ (jint)FAST_CHRONO_DEMO_FUNCTION {
  return ComStSt25nfcType5St25dvST25DVTransferTask_FAST_CHRONO_DEMO_FUNCTION;
}

+ (jint)SPRUE_SAMPLE_HEADER {
  return ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_SAMPLE_HEADER;
}

+ (jint)temp {
  return ComStSt25nfcType5St25dvST25DVTransferTask_temp;
}

+ (void)setTemp:(jint)value {
  ComStSt25nfcType5St25dvST25DVTransferTask_temp = value;
}

+ (JavaUtilLoggingLogManager *)lm {
  return ComStSt25nfcType5St25dvST25DVTransferTask_lm;
}

+ (void)setLm:(JavaUtilLoggingLogManager *)value {
  ComStSt25nfcType5St25dvST25DVTransferTask_lm = value;
}

+ (JavaUtilLoggingLogger *)logger {
  return ComStSt25nfcType5St25dvST25DVTransferTask_logger;
}

+ (void)setLogger:(JavaUtilLoggingLogger *)value {
  ComStSt25nfcType5St25dvST25DVTransferTask_logger = value;
}

+ (JavaUtilLoggingFileHandler *)fh {
  return ComStSt25nfcType5St25dvST25DVTransferTask_fh;
}

+ (void)setFh:(JavaUtilLoggingFileHandler *)value {
  ComStSt25nfcType5St25dvST25DVTransferTask_fh = value;
}

- (void)setTransferListenerWithComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener:(id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>)listener {
  mListener_ = listener;
}

- (void)writeToFileWithNSString:(NSString *)content {
}

- (instancetype)initWithInt:(jint)action
              withByteArray:(IOSByteArray *)buffer
withComStSt25sdkType5St25dvST25DVTag:(ComStSt25sdkType5St25dvST25DVTag *)tag {
  ComStSt25nfcType5St25dvST25DVTransferTask_initWithInt_withByteArray_withComStSt25sdkType5St25dvST25DVTag_(self, action, buffer, tag);
  return self;
}

- (void)run {
  jint ret;
  ret = ComStSt25nfcType5St25dvST25DVTransferTask_TRY_AGAIN;
  while (ret == ComStSt25nfcType5St25dvST25DVTransferTask_TRY_AGAIN) {
    @try {
      if ([((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(mST25DVTag_)) isMailboxEnabledWithBoolean:true]) ret = ComStSt25nfcType5St25dvST25DVTransferTask_OK;
      else ret = ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
    }
    @catch (ComStSt25sdkSTException *e) {
      ret = ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
      @try {
        JavaLangThread_sleepWithLong_(ComStSt25nfcType5St25dvST25DVTransferTask_SLEEP_TIME * 5);
      }
      @catch (JavaLangInterruptedException *e1) {
        [e1 printStackTrace];
      }
    }
  }
  if (ret == ComStSt25nfcType5St25dvST25DVTransferTask_ERROR) {
    mTimeTransfer_ = (jint) JavaLangSystem_nanoTime() - mTimeStamp_;
    [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) transferFinishedWithBoolean:false withLong:mTimeTransfer_ withByteArray:nil];
    [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) transferOnProgressWithDouble:0];
    mEvent_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, STOP);
    return;
  }
  while (mEvent_ == JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, START) || mEvent_ == JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, RESUME) || mEvent_ == JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, PAUSE)) {
    if (mEvent_ != JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, PAUSE)) {
      @synchronized(self) {
        switch ([mState_ ordinal]) {
          case ComStSt25nfcType5St25dvST25DVTransferTask_State_Enum_INIT:
          ComStSt25sdkSTLog_iWithNSString_(@"INIT");
          [self writeToFileWithNSString:@"INIT"];
          ret = [self prepare];
          if (ret == ComStSt25nfcType5St25dvST25DVTransferTask_OK) {
            mState_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, TRANSFERING);
            mTimeStamp_ = (jint) JavaLangSystem_nanoTime();
          }
          break;
          case ComStSt25nfcType5St25dvST25DVTransferTask_State_Enum_TRANSFERING:
          ComStSt25sdkSTLog_iWithNSString_(@"TRANSFERING");
          [self writeToFileWithNSString:@"TRANSFERING"];
          switch (mAction_) {
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_CHRONO_DEMO_FUNCTION:
            if (mOffset_ == ((IOSByteArray *) nil_chk(mBuffer_))->size_) {
              mBuffer_ = [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) getDataToWrite];
              if (mBuffer_ != nil) mOffset_ = 0;
              else mState_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, ENDING);
            }
            @try {
              ret = ComStSt25nfcType5St25dvST25DVTransferTask_sendSimpleDataWithByte_(self, (jbyte) ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_COMMAND);
            }
            @catch (JavaLangException *e) {
              ret = ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
            }
            break;
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_BASIC_TRANSFER_FUNCTION:
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_IMAGE_UPLOAD_FUNCTION:
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_FIRMWARE_UPDATE_FUNCTION:
            case ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_SAMPLE_HEADER:
            if (mOffset_ == ((IOSByteArray *) nil_chk(mBuffer_))->size_) {
              ret = ComStSt25nfcType5St25dvST25DVTransferTask_OK;
              mState_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, CHECK_CRC);
            }
            else {
              @try {
                ret = ComStSt25nfcType5St25dvST25DVTransferTask_sendSimpleDataWithByte_(self, (jbyte) ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_COMMAND);
              }
              @catch (JavaLangException *e) {
                ret = ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
              }
            }
            break;
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_IMAGE_DOWNLOAD_FUNCTION:
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_RANDOM_TRANSFER_FUNCTION:
            case (jint) 0x17:
            if (mOffset_ == ((IOSByteArray *) nil_chk(mBuffer_))->size_) {
              ret = ComStSt25nfcType5St25dvST25DVTransferTask_OK;
              mState_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, CHECK_CRC);
            }
            else {
              @try {
                ret = ComStSt25nfcType5St25dvST25DVTransferTask_readChainedData(self);
              }
              @catch (JavaLangException *e) {
                ret = ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
              }
            }
            break;
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_PRESENT_PWD_FUNCTION:
            if (mOffset_ == ((IOSByteArray *) nil_chk(mBuffer_))->size_) {
              ret = ComStSt25nfcType5St25dvST25DVTransferTask_OK;
              mState_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, ENDING);
            }
            else {
              @try {
                ret = ComStSt25nfcType5St25dvST25DVTransferTask_sendSimpleDataWithByte_(self, (jbyte) ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_ANSWER);
              }
              @catch (JavaLangException *e) {
                ret = ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
              }
            }
            break;
          }
          if (ret == ComStSt25nfcType5St25dvST25DVTransferTask_OK) {
            if (((IOSByteArray *) nil_chk(mBuffer_))->size_ != 0) {
              [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) transferOnProgressWithDouble:mOffset_ * 100 / mBuffer_->size_];
            }
          }
          break;
          case ComStSt25nfcType5St25dvST25DVTransferTask_State_Enum_ENDING:
          ComStSt25sdkSTLog_iWithNSString_(@"ENDING");
          switch (mAction_) {
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_CHRONO_DEMO_FUNCTION:
            if (mOffset_ == ((IOSByteArray *) nil_chk(mBuffer_))->size_) {
              mBuffer_ = [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) getDataToWrite];
              if (mBuffer_ != nil) {
                mOffset_ = 0;
                ret = ComStSt25nfcType5St25dvST25DVTransferTask_sendSimpleDataWithByte_(self, (jbyte) ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_COMMAND);
              }
            }
            break;
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_PRESENT_PWD_FUNCTION:
            ret = ComStSt25nfcType5St25dvST25DVTransferTask_checkPasswordAnswer(self);
            if (ret == ComStSt25nfcType5St25dvST25DVTransferTask_OK) {
              ComStSt25sdkSTLog_iWithNSString_(@"transfer finished successfully");
              [self writeToFileWithNSString:@"transfer finished successfully"];
              [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) transferFinishedWithBoolean:true withLong:mTimeTransfer_ withByteArray:nil];
              [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) transferOnProgressWithDouble:0];
              mEvent_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, STOP);
            }
            break;
            default:
            break;
          }
          break;
          case ComStSt25nfcType5St25dvST25DVTransferTask_State_Enum_CHECK_CRC:
          ComStSt25sdkSTLog_iWithNSString_(@"CHECK_CRC");
          [self writeToFileWithNSString:JreStrcat("$I", @"CHECK_CRC action:", mAction_)];
          switch (mAction_) {
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_BASIC_TRANSFER_FUNCTION:
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_IMAGE_UPLOAD_FUNCTION:
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_FIRMWARE_UPDATE_FUNCTION:
            ret = ComStSt25nfcType5St25dvST25DVTransferTask_checkCrc(self);
            if (ret == ComStSt25nfcType5St25dvST25DVTransferTask_OK) {
              mState_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, ACKNOWLEDGE);
            }
            break;
            case (jint) 0x17:
            ret = ComStSt25nfcType5St25dvST25DVTransferTask_OK;
            mState_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, ACKNOWLEDGE);
            break;
            case ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_SAMPLE_HEADER:
            ret = ComStSt25nfcType5St25dvST25DVTransferTask_OK;
            if (ret == ComStSt25nfcType5St25dvST25DVTransferTask_OK) {
              mState_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, ACKNOWLEDGE);
            }
            break;
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_IMAGE_DOWNLOAD_FUNCTION:
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_RANDOM_TRANSFER_FUNCTION:
            ret = ComStSt25nfcType5St25dvST25DVTransferTask_sendCrcWithByte_(self, mTransferFunction_);
            if (ret == ComStSt25nfcType5St25dvST25DVTransferTask_OK) {
              mState_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, ACKNOWLEDGE);
            }
            break;
            default:
            ComStSt25sdkSTLog_eWithNSString_(@"Error, no CRC verification expected for this action!");
            [self writeToFileWithNSString:@"Error, no CRC verification expected for this action!"];
            ret = ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
            break;
          }
          break;
          case ComStSt25nfcType5St25dvST25DVTransferTask_State_Enum_ACKNOWLEDGE:
          switch (mAction_) {
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_BASIC_TRANSFER_FUNCTION:
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_IMAGE_UPLOAD_FUNCTION:
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_FIRMWARE_UPDATE_FUNCTION:
            ret = ComStSt25nfcType5St25dvST25DVTransferTask_sendAckWithBoolean_withByte_(self, true, (jbyte) mAction_);
            if (ret == ComStSt25nfcType5St25dvST25DVTransferTask_OK) {
              ComStSt25sdkSTLog_iWithNSString_(@"transferFinished successfully");
              [self writeToFileWithNSString:@"*transferFinished successfully"];
              mTimeTransfer_ = (jint) JavaLangSystem_nanoTime() - mTimeStamp_;
              [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) transferFinishedWithBoolean:true withLong:mTimeTransfer_ withByteArray:nil];
              [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) transferOnProgressWithDouble:0];
              mEvent_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, STOP);
            }
            break;
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_IMAGE_DOWNLOAD_FUNCTION:
            case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_RANDOM_TRANSFER_FUNCTION:
            case ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_SAMPLE_HEADER:
            ComStSt25nfcType5St25dvST25DVTransferTask_sleep_in_msWithInt_(self, 100);
            ret = ComStSt25nfcType5St25dvST25DVTransferTask_checkAck(self);
            {
              ComStSt25sdkSTLog_iWithNSString_(@"transfer finished successfully! Yeyy");
              [self writeToFileWithNSString:@"transfer finished successfully"];
              mTimeTransfer_ = (jint) JavaLangSystem_nanoTime() - mTimeStamp_;
              [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) transferFinishedWithBoolean:true withLong:mTimeTransfer_ withByteArray:mBuffer_];
              [self writeToFileWithNSString:JavaUtilArrays_toStringWithByteArray_(mBuffer_)];
              [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) transferOnProgressWithDouble:0];
              mEvent_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, STOP);
              mState_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, ENDING);
              ret = ComStSt25nfcType5St25dvST25DVTransferTask_OK;
            }
            break;
            case (jint) 0x17:
            [self writeToFileWithNSString:@"UshaCmd: transfer finished successfully"];
            [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) transferFinishedWithBoolean:true withLong:mTimeTransfer_ withByteArray:mBuffer_];
            [self writeToFileWithNSString:JavaUtilArrays_toStringWithByteArray_(mBuffer_)];
            [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) transferOnProgressWithDouble:0];
            mEvent_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, STOP);
            break;
            default:
            ComStSt25sdkSTLog_eWithNSString_(@"Error, no acknowledge expected for this action!");
            [self writeToFileWithNSString:@"Error, no acknowledge expected for this action!"];
            ret = ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
            break;
          }
          break;
        }
      }
      if (ret == ComStSt25nfcType5St25dvST25DVTransferTask_ERROR) {
        ComStSt25sdkSTLog_eWithNSString_(@"transfer finished with error");
        [self writeToFileWithNSString:@"transfer finished with error"];
        [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) transferFinishedWithBoolean:false withLong:mTimeTransfer_ withByteArray:nil];
        [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) transferOnProgressWithDouble:0];
        mEvent_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, STOP);
      }
      else if (ret == ComStSt25nfcType5St25dvST25DVTransferTask_TRY_AGAIN) {
        ComStSt25nfcType5St25dvST25DVTransferTask_sleep_in_msWithInt_(self, 100);
      }
      else {
        ComStSt25nfcType5St25dvST25DVTransferTask_sleep_in_msWithInt_(self, 100);
      }
    }
    else ComStSt25nfcType5St25dvST25DVTransferTask_sleep_in_msWithInt_(self, 100);
  }
}

- (void)sleep_in_msWithInt:(jint)time_in_ms {
  ComStSt25nfcType5St25dvST25DVTransferTask_sleep_in_msWithInt_(self, time_in_ms);
}

- (jint)prepare {
  [self writeToFileWithNSString:JreStrcat("$I", @"Inside prepare", mAction_)];
  {
    jint ret;
    switch (mAction_) {
      case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_CHRONO_DEMO_FUNCTION:
      mBuffer_ = [((id<ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener>) nil_chk(mListener_)) getDataToWrite];
      if (mBuffer_ != nil) return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
      break;
      case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_BASIC_TRANSFER_FUNCTION:
      case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_IMAGE_UPLOAD_FUNCTION:
      case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_FIRMWARE_UPDATE_FUNCTION:
      case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_PRESENT_PWD_FUNCTION:
      case ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_SAMPLE_HEADER:
      if (mBuffer_ != nil) {
        return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
      }
      break;
      case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_IMAGE_DOWNLOAD_FUNCTION:
      case ComStSt25nfcType5St25dvST25DVTransferTask_FAST_RANDOM_TRANSFER_FUNCTION:
      case (jint) 0x17:
      ret = ComStSt25nfcType5St25dvST25DVTransferTask_readHeader(self);
      return ret;
    }
  }
  return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
}

- (jint)checkErrorWithComStSt25sdkSTException:(ComStSt25sdkSTException *)e {
  return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
}

- (jboolean)verifyAckDataWithByteArray:(IOSByteArray *)data {
  return ComStSt25nfcType5St25dvST25DVTransferTask_verifyAckDataWithByteArray_(self, data);
}

- (IOSByteArray *)undoEscapingWithByteArray:(IOSByteArray *)data {
  return ComStSt25nfcType5St25dvST25DVTransferTask_undoEscapingWithByteArray_(self, data);
}

- (IOSByteArray *)readMessage {
  return ComStSt25nfcType5St25dvST25DVTransferTask_readMessage(self);
}

- (jint)readHeader {
  return ComStSt25nfcType5St25dvST25DVTransferTask_readHeader(self);
}

- (jint)sendChainedHeaderWithByteArray:(IOSByteArray *)frame
                              withByte:(jbyte)function
                              withByte:(jbyte)command
                               withInt:(jint)length {
  return ComStSt25nfcType5St25dvST25DVTransferTask_sendChainedHeaderWithByteArray_withByte_withByte_withInt_(self, frame, function, command, length);
}

- (jint)sendSimpleHeaderWithByteArray:(IOSByteArray *)frame
                             withByte:(jbyte)function
                             withByte:(jbyte)command
                              withInt:(jint)length {
  return ComStSt25nfcType5St25dvST25DVTransferTask_sendSimpleHeaderWithByteArray_withByte_withByte_withInt_(self, frame, function, command, length);
}

- (jint)sendSprueHeaderWithByteArray:(IOSByteArray *)frame
                            withByte:(jbyte)function
                            withByte:(jbyte)command
                             withInt:(jint)length {
  return ComStSt25nfcType5St25dvST25DVTransferTask_sendSprueHeaderWithByteArray_withByte_withByte_withInt_(self, frame, function, command, length);
}

- (jint)readChainedData {
  return ComStSt25nfcType5St25dvST25DVTransferTask_readChainedData(self);
}

- (jint)sendSimpleDataWithByte:(jbyte)command {
  return ComStSt25nfcType5St25dvST25DVTransferTask_sendSimpleDataWithByte_(self, command);
}

- (jint)sendChainedDataWithByte:(jbyte)command
                    withBoolean:(jboolean)checkRf {
  return ComStSt25nfcType5St25dvST25DVTransferTask_sendChainedDataWithByte_withBoolean_(self, command, checkRf);
}

- (jlong)computeCrc {
  return ComStSt25nfcType5St25dvST25DVTransferTask_computeCrc(self);
}

- (jint)sendCrcWithByte:(jbyte)function {
  return ComStSt25nfcType5St25dvST25DVTransferTask_sendCrcWithByte_(self, function);
}

- (jint)checkAck {
  return ComStSt25nfcType5St25dvST25DVTransferTask_checkAck(self);
}

- (jint)checkPasswordAnswer {
  return ComStSt25nfcType5St25dvST25DVTransferTask_checkPasswordAnswer(self);
}

- (jint)checkCrc {
  return ComStSt25nfcType5St25dvST25DVTransferTask_checkCrc(self);
}

- (jint)sendAckWithBoolean:(jboolean)success
                  withByte:(jbyte)function {
  return ComStSt25nfcType5St25dvST25DVTransferTask_sendAckWithBoolean_withByte_(self, success, function);
}

- (void)stop {
  mEvent_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, STOP);
}

- (void)resume {
  mEvent_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, RESUME);
}

- (void)start {
  mEvent_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, START);
}

- (void)pause {
  mEvent_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, PAUSE);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 11, 10, 8, -1, -1, -1 },
    { NULL, "[B", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 15, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 20, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setTransferListenerWithComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener:);
  methods[1].selector = @selector(writeToFileWithNSString:);
  methods[2].selector = @selector(initWithInt:withByteArray:withComStSt25sdkType5St25dvST25DVTag:);
  methods[3].selector = @selector(run);
  methods[4].selector = @selector(sleep_in_msWithInt:);
  methods[5].selector = @selector(prepare);
  methods[6].selector = @selector(checkErrorWithComStSt25sdkSTException:);
  methods[7].selector = @selector(verifyAckDataWithByteArray:);
  methods[8].selector = @selector(undoEscapingWithByteArray:);
  methods[9].selector = @selector(readMessage);
  methods[10].selector = @selector(readHeader);
  methods[11].selector = @selector(sendChainedHeaderWithByteArray:withByte:withByte:withInt:);
  methods[12].selector = @selector(sendSimpleHeaderWithByteArray:withByte:withByte:withInt:);
  methods[13].selector = @selector(sendSprueHeaderWithByteArray:withByte:withByte:withInt:);
  methods[14].selector = @selector(readChainedData);
  methods[15].selector = @selector(sendSimpleDataWithByte:);
  methods[16].selector = @selector(sendChainedDataWithByte:withBoolean:);
  methods[17].selector = @selector(computeCrc);
  methods[18].selector = @selector(sendCrcWithByte:);
  methods[19].selector = @selector(checkAck);
  methods[20].selector = @selector(checkPasswordAnswer);
  methods[21].selector = @selector(checkCrc);
  methods[22].selector = @selector(sendAckWithBoolean:withByte:);
  methods[23].selector = @selector(stop);
  methods[24].selector = @selector(resume);
  methods[25].selector = @selector(start);
  methods[26].selector = @selector(pause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FAST_BASIC_TRANSFER_FUNCTION", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_BASIC_TRANSFER_FUNCTION, 0x19, -1, -1, -1, -1 },
    { "FAST_IMAGE_UPLOAD_FUNCTION", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_IMAGE_UPLOAD_FUNCTION, 0x19, -1, -1, -1, -1 },
    { "FAST_IMAGE_DOWNLOAD_FUNCTION", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_IMAGE_DOWNLOAD_FUNCTION, 0x19, -1, -1, -1, -1 },
    { "FAST_FIRMWARE_UPDATE_FUNCTION", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_FIRMWARE_UPDATE_FUNCTION, 0x19, -1, -1, -1, -1 },
    { "FAST_PRESENT_PWD_FUNCTION", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_PRESENT_PWD_FUNCTION, 0x19, -1, -1, -1, -1 },
    { "FAST_RANDOM_TRANSFER_FUNCTION", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_RANDOM_TRANSFER_FUNCTION, 0x19, -1, -1, -1, -1 },
    { "FAST_CHRONO_DEMO_FUNCTION", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_CHRONO_DEMO_FUNCTION, 0x19, -1, -1, -1, -1 },
    { "SPRUE_SAMPLE_HEADER", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_SAMPLE_HEADER, 0x19, -1, -1, -1, -1 },
    { "mState_", "LComStSt25nfcType5St25dvST25DVTransferTask_State;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBuffer_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAction_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mEvent_", "LComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTimeStamp_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxPayloadSizeTx_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxPayloadSizeRx_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTimeTransfer_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mListener_", "LComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "FAST_TRANSFER_COMMAND", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_COMMAND, 0x12, 23, -1, -1, -1 },
    { "FAST_TRANSFER_ANSWER", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_ANSWER, 0x12, 24, -1, -1, -1 },
    { "FAST_TRANSFER_ACK", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_ACK, 0x12, 25, -1, -1, -1 },
    { "FAST_TRANSFER_OK", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_OK, 0x12, 26, -1, -1, -1 },
    { "FAST_TRANSFER_ERROR", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_ERROR, 0x12, 27, -1, -1, -1 },
    { "ERROR", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_ERROR, 0x12, 28, -1, -1, -1 },
    { "TRY_AGAIN", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_TRY_AGAIN, 0x12, 29, -1, -1, -1 },
    { "OK", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_OK, 0x12, 30, -1, -1, -1 },
    { "SLEEP_TIME", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_SLEEP_TIME, 0x12, 31, -1, -1, -1 },
    { "mST25DVTag_", "LComStSt25sdkType5St25dvST25DVTag;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mTransferFunction_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransferCommand_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "temp", "I", .constantValue.asLong = 0, 0x8, -1, 32, -1, -1 },
    { "lm", "LJavaUtilLoggingLogManager;", .constantValue.asLong = 0, 0x9, -1, 33, -1, -1 },
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x9, -1, 34, -1, -1 },
    { "fh", "LJavaUtilLoggingFileHandler;", .constantValue.asLong = 0, 0x9, -1, 35, -1, -1 },
    { "CHAINED_HEADER_SIZE", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_CHAINED_HEADER_SIZE, 0x12, 36, -1, -1, -1 },
    { "SIMPLE_HEADER_SIZE", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_SIMPLE_HEADER_SIZE, 0x12, 37, -1, -1, -1 },
    { "SPRUE_HEADER_SIZE", "I", .constantValue.asInt = ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_HEADER_SIZE, 0x12, 38, -1, -1, -1 },
    { "stxVal_", "B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "etxVal_", "B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "escOffset_", "B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "escVal_", "B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setTransferListener", "LComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener;", "writeToFile", "LNSString;", "I[BLComStSt25sdkType5St25dvST25DVTag;", "sleep_in_ms", "I", "checkError", "LComStSt25sdkSTException;", "verifyAckData", "[B", "undoEscaping", "sendChainedHeader", "[BBBI", "sendSimpleHeader", "sendSprueHeader", "sendSimpleData", "B", "sendChainedData", "BZ", "sendCrc", "sendAck", "ZB", "FAST_TRANSFER_COMMAND", "FAST_TRANSFER_ANSWER", "FAST_TRANSFER_ACK", "FAST_TRANSFER_OK", "FAST_TRANSFER_ERROR", "ERROR", "TRY_AGAIN", "OK", "SLEEP_TIME", &ComStSt25nfcType5St25dvST25DVTransferTask_temp, &ComStSt25nfcType5St25dvST25DVTransferTask_lm, &ComStSt25nfcType5St25dvST25DVTransferTask_logger, &ComStSt25nfcType5St25dvST25DVTransferTask_fh, "CHAINED_HEADER_SIZE", "SIMPLE_HEADER_SIZE", "SPRUE_HEADER_SIZE", "LComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener;LComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent;LComStSt25nfcType5St25dvST25DVTransferTask_State;" };
  static const J2ObjcClassInfo _ComStSt25nfcType5St25dvST25DVTransferTask = { "ST25DVTransferTask", "com.st.st25nfc.type5.st25dv", ptrTable, methods, fields, 7, 0x1, 27, 41, -1, 39, -1, -1, -1 };
  return &_ComStSt25nfcType5St25dvST25DVTransferTask;
}

@end

void ComStSt25nfcType5St25dvST25DVTransferTask_initWithInt_withByteArray_withComStSt25sdkType5St25dvST25DVTag_(ComStSt25nfcType5St25dvST25DVTransferTask *self, jint action, IOSByteArray *buffer, ComStSt25sdkType5St25dvST25DVTag *tag) {
  NSObject_init(self);
  self->mMaxPayloadSizeTx_ = 220;
  self->mMaxPayloadSizeRx_ = 32;
  self->stxVal_ = (jint) 0x02;
  self->etxVal_ = (jint) 0x03;
  self->escOffset_ = (jint) 0x20;
  self->escVal_ = (jint) 0x1B;
  [self writeToFileWithNSString:@"Transfer task"];
  self->mAction_ = action;
  self->mEvent_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, START);
  self->mState_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, INIT);
  self->mOffset_ = 0;
  if (buffer != nil) {
    self->mBuffer_ = buffer;
    jint length = buffer->size_;
    self->mBuffer_ = [IOSByteArray newArrayWithLength:length];
    JavaUtilArrays_fillWithByteArray_withByte_(self->mBuffer_, (jbyte) 0);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, self->mBuffer_, 0, buffer->size_);
    [self writeToFileWithNSString:JavaUtilArrays_toStringWithByteArray_(buffer)];
  }
  self->mMaxPayloadSizeTx_ = [((id<ComStSt25sdkRFReaderInterface>) nil_chk([((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(tag)) getReaderInterface])) getMaxTransmitLengthInBytes] - ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_HEADER_SIZE - 3 - 1;
  self->mMaxPayloadSizeRx_ = [((id<ComStSt25sdkRFReaderInterface>) nil_chk([tag getReaderInterface])) getMaxReceiveLengthInBytes];
  self->mST25DVTag_ = tag;
}

ComStSt25nfcType5St25dvST25DVTransferTask *new_ComStSt25nfcType5St25dvST25DVTransferTask_initWithInt_withByteArray_withComStSt25sdkType5St25dvST25DVTag_(jint action, IOSByteArray *buffer, ComStSt25sdkType5St25dvST25DVTag *tag) {
  J2OBJC_NEW_IMPL(ComStSt25nfcType5St25dvST25DVTransferTask, initWithInt_withByteArray_withComStSt25sdkType5St25dvST25DVTag_, action, buffer, tag)
}

ComStSt25nfcType5St25dvST25DVTransferTask *create_ComStSt25nfcType5St25dvST25DVTransferTask_initWithInt_withByteArray_withComStSt25sdkType5St25dvST25DVTag_(jint action, IOSByteArray *buffer, ComStSt25sdkType5St25dvST25DVTag *tag) {
  J2OBJC_CREATE_IMPL(ComStSt25nfcType5St25dvST25DVTransferTask, initWithInt_withByteArray_withComStSt25sdkType5St25dvST25DVTag_, action, buffer, tag)
}

void ComStSt25nfcType5St25dvST25DVTransferTask_sleep_in_msWithInt_(ComStSt25nfcType5St25dvST25DVTransferTask *self, jint time_in_ms) {
  @try {
    JavaLangThread_sleepWithLong_(time_in_ms);
  }
  @catch (JavaLangInterruptedException *e) {
    ComStSt25sdkSTLog_eWithNSString_([e getMessage]);
    [self writeToFileWithNSString:[e getMessage]];
  }
}

jint ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(ComStSt25nfcType5St25dvST25DVTransferTask *self, ComStSt25sdkSTException *e) {
  ComStSt25sdkSTException_STExceptionCode *errorCode = [((ComStSt25sdkSTException *) nil_chk(e)) getError];
  if (errorCode == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CONNECTION_ERROR) || errorCode == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, TAG_NOT_IN_THE_FIELD) || errorCode == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED) || errorCode == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CRC_ERROR)) {
    ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$@$", @"Last cmd failed with error code ", errorCode, @": Try again the same cmd"));
    [self writeToFileWithNSString:JreStrcat("$@$", @"Last cmd failed with error code ", errorCode, @": Try again the same cmd")];
    return ComStSt25nfcType5St25dvST25DVTransferTask_TRY_AGAIN;
  }
  else {
    ComStSt25sdkSTLog_eWithNSString_([e getMessage]);
    [self writeToFileWithNSString:[e getMessage]];
    return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
  }
}

jboolean ComStSt25nfcType5St25dvST25DVTransferTask_verifyAckDataWithByteArray_(ComStSt25nfcType5St25dvST25DVTransferTask *self, IOSByteArray *data) {
  jint len = ((IOSByteArray *) nil_chk(data))->size_ - 1;
  if ((IOSByteArray_Get(data, 0) == 0) && (IOSByteArray_Get(data, 1) == -44)) {
    return true;
  }
  else {
    return false;
  }
}

IOSByteArray *ComStSt25nfcType5St25dvST25DVTransferTask_undoEscapingWithByteArray_(ComStSt25nfcType5St25dvST25DVTransferTask *self, IOSByteArray *data) {
  JavaIoByteArrayOutputStream *outputStream = new_JavaIoByteArrayOutputStream_init();
  jint len = ((IOSByteArray *) nil_chk(data))->size_;
  jint corr_len = 0;
  jboolean escapeByte = false;
  jint i = 5;
  jint num = 0;
  while (i < (len - 1)) {
    if ((IOSByteArray_Get(data, i) == self->stxVal_) || (IOSByteArray_Get(data, i) == self->etxVal_)) {
      [self writeToFileWithNSString:@"Invalid packet received"];
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
    }
    else if (IOSByteArray_Get(data, i) == self->escVal_) {
      if (escapeByte == false) {
        i++;
        escapeByte = true;
        num++;
      }
      else {
        [self writeToFileWithNSString:@"Invalid packet received"];
        @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
      }
    }
    else {
      if (escapeByte == true) {
        [outputStream writeWithInt:IOSByteArray_Get(data, i) - 32];
        escapeByte = false;
        corr_len = corr_len + 1;
      }
      else {
        [outputStream writeWithInt:IOSByteArray_Get(data, i)];
        corr_len = corr_len + 1;
      }
      i++;
    }
  }
  [self writeToFileWithNSString:JreStrcat("$I", @"Length after undoing escaping:", corr_len)];
  return [outputStream toByteArray];
}

IOSByteArray *ComStSt25nfcType5St25dvST25DVTransferTask_readMessage(ComStSt25nfcType5St25dvST25DVTransferTask *self) {
  jint length = [((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) readMailboxMessageLength];
  IOSByteArray *buffer;
  if (length > 0) buffer = [IOSByteArray newArrayWithLength:length];
  else @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  IOSByteArray *tmpBuffer;
  jint offset = 0;
  jint size = length;
  if (size <= 0) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  while (offset < length) {
    size = ((length - offset) > self->mMaxPayloadSizeRx_) ? self->mMaxPayloadSizeRx_ : length - offset;
    tmpBuffer = [((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) readMailboxMessageWithInt:(jbyte) offset withInt:size];
    [self writeToFileWithNSString:JreStrcat("$$", @"readData", JavaUtilArrays_toStringWithByteArray_(tmpBuffer))];
    if (((IOSByteArray *) nil_chk(tmpBuffer))->size_ < (size + 1) || IOSByteArray_Get(tmpBuffer, 0) != 0) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
    if (ComStSt25nfcType5St25dvST25DVTransferTask_verifyAckDataWithByteArray_(self, tmpBuffer) == true) {
      buffer = ComStSt25nfcType5St25dvST25DVTransferTask_undoEscapingWithByteArray_(self, tmpBuffer);
      [self writeToFileWithNSString:JreStrcat("$$", @"readMailBoxData with {ResponseID+data Length+data+CRC}", JavaUtilArrays_toStringWithByteArray_(buffer))];
      IOSByteArray *eep_data = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(buffer))->size_ - 4];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 2, eep_data, 0, eep_data->size_);
      [self writeToFileWithNSString:JreStrcat("$$", @"Eeprom data only :", JavaUtilArrays_toStringWithByteArray_(eep_data))];
      return buffer;
    }
    else {
      [self writeToFileWithNSString:@"Error in received data"];
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
    }
  }
  return buffer;
}

jint ComStSt25nfcType5St25dvST25DVTransferTask_readHeader(ComStSt25nfcType5St25dvST25DVTransferTask *self) {
  IOSByteArray *response = nil;
  jint length = 0;
  @try {
    response = ComStSt25nfcType5St25dvST25DVTransferTask_readMessage(self);
    [self writeToFileWithNSString:JreStrcat("$$", @"readHeader", JavaUtilArrays_toStringWithByteArray_(response))];
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
  if (response == nil) return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
  if (response->size_ < ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_HEADER_SIZE) return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
  if (IOSByteArray_Get(response, 0) != ComStSt25nfcType5St25dvST25DVTransferTask_FAST_IMAGE_DOWNLOAD_FUNCTION && IOSByteArray_Get(response, 0) != ComStSt25nfcType5St25dvST25DVTransferTask_FAST_RANDOM_TRANSFER_FUNCTION) {
  }
  self->mTransferFunction_ = IOSByteArray_Get(response, 0);
  self->mTransferCommand_ = IOSByteArray_Get(response, 1);
  length = IOSByteArray_Get(response, 2);
  if (length > 0) self->mBuffer_ = [IOSByteArray newArrayWithLength:length];
  else return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
  if (length > 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(response, ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_HEADER_SIZE, self->mBuffer_, 0, length);
    self->mOffset_ += length;
  }
  [self writeToFileWithNSString:@"*******ok header*************"];
  return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
}

jint ComStSt25nfcType5St25dvST25DVTransferTask_sendChainedHeaderWithByteArray_withByte_withByte_withInt_(ComStSt25nfcType5St25dvST25DVTransferTask *self, IOSByteArray *frame, jbyte function, jbyte command, jint length) {
  if (((IOSByteArray *) nil_chk(frame))->size_ <= ComStSt25nfcType5St25dvST25DVTransferTask_CHAINED_HEADER_SIZE) return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
  else {
    *IOSByteArray_GetRef(frame, 0) = function;
    *IOSByteArray_GetRef(frame, 1) = command;
    *IOSByteArray_GetRef(frame, 2) = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_OK;
    *IOSByteArray_GetRef(frame, 3) = (jint) 0x01;
    *IOSByteArray_GetRef(frame, 4) = (jbyte) ((JreRShift32(((IOSByteArray *) nil_chk(self->mBuffer_))->size_, 24)) & (jint) 0xFF);
    *IOSByteArray_GetRef(frame, 5) = (jbyte) ((JreRShift32(self->mBuffer_->size_, 16)) & (jint) 0xFF);
    *IOSByteArray_GetRef(frame, 6) = (jbyte) ((JreRShift32(self->mBuffer_->size_, 8)) & (jint) 0xFF);
    *IOSByteArray_GetRef(frame, 7) = (jbyte) (self->mBuffer_->size_ & (jint) 0xFF);
    jint nbOfChunks = (self->mBuffer_->size_ + self->mMaxPayloadSizeTx_ - 1) / self->mMaxPayloadSizeTx_;
    *IOSByteArray_GetRef(frame, 8) = (jbyte) ((JreRShift32(nbOfChunks, 8)) & (jint) 0xFF);
    *IOSByteArray_GetRef(frame, 9) = (jbyte) ((nbOfChunks) & (jint) 0xFF);
    jint chunk = self->mOffset_ / self->mMaxPayloadSizeTx_ + 1;
    *IOSByteArray_GetRef(frame, 10) = (jbyte) ((JreRShift32(chunk, 8)) & (jint) 0xFF);
    *IOSByteArray_GetRef(frame, 11) = (jbyte) ((chunk) & (jint) 0xFF);
    *IOSByteArray_GetRef(frame, 12) = (jbyte) (length & (jint) 0xFF);
  }
  return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
}

jint ComStSt25nfcType5St25dvST25DVTransferTask_sendSimpleHeaderWithByteArray_withByte_withByte_withInt_(ComStSt25nfcType5St25dvST25DVTransferTask *self, IOSByteArray *frame, jbyte function, jbyte command, jint length) {
  if (((IOSByteArray *) nil_chk(frame))->size_ <= ComStSt25nfcType5St25dvST25DVTransferTask_SIMPLE_HEADER_SIZE) return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
  else {
    *IOSByteArray_GetRef(frame, 0) = function;
    *IOSByteArray_GetRef(frame, 1) = command;
    *IOSByteArray_GetRef(frame, 2) = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_OK;
    *IOSByteArray_GetRef(frame, 3) = (jint) 0x00;
    *IOSByteArray_GetRef(frame, 4) = (jbyte) (length & (jint) 0xFF);
  }
  return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
}

jint ComStSt25nfcType5St25dvST25DVTransferTask_sendSprueHeaderWithByteArray_withByte_withByte_withInt_(ComStSt25nfcType5St25dvST25DVTransferTask *self, IOSByteArray *frame, jbyte function, jbyte command, jint length) {
  if (((IOSByteArray *) nil_chk(frame))->size_ <= ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_HEADER_SIZE) return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
  else {
    *IOSByteArray_GetRef(frame, 0) = -44;
    *IOSByteArray_GetRef(frame, 1) = 00;
    *IOSByteArray_GetRef(frame, 2) = (jbyte) (length & (jint) 0xFF);
  }
  return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
}

jint ComStSt25nfcType5St25dvST25DVTransferTask_readChainedData(ComStSt25nfcType5St25dvST25DVTransferTask *self) {
  @try {
    if (![((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) hasHostPutMsgWithBoolean:true]) return ComStSt25nfcType5St25dvST25DVTransferTask_TRY_AGAIN;
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
  @try {
    IOSByteArray *response = ComStSt25nfcType5St25dvST25DVTransferTask_readMessage(self);
    [self writeToFileWithNSString:JreStrcat("$$", @"Read Mgs: ", JavaUtilArrays_toStringWithByteArray_(response))];
    if (response == nil) return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
    if (response->size_ <= ComStSt25nfcType5St25dvST25DVTransferTask_CHAINED_HEADER_SIZE) return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
    jint length = IOSByteArray_Get(response, ComStSt25nfcType5St25dvST25DVTransferTask_CHAINED_HEADER_SIZE - 1) & (jint) 0xFF;
    if (response->size_ != length + ComStSt25nfcType5St25dvST25DVTransferTask_CHAINED_HEADER_SIZE) return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(response, ComStSt25nfcType5St25dvST25DVTransferTask_CHAINED_HEADER_SIZE, self->mBuffer_, self->mOffset_, length);
    self->mOffset_ += length;
    ComStSt25nfcType5St25dvST25DVTransferTask_sleep_in_msWithInt_(self, 5);
    return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
}

jint ComStSt25nfcType5St25dvST25DVTransferTask_sendSimpleDataWithByte_(ComStSt25nfcType5St25dvST25DVTransferTask *self, jbyte command) {
  @try {
    if ([((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) hasRFPutMsgWithBoolean:true]) return ComStSt25nfcType5St25dvST25DVTransferTask_TRY_AGAIN;
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
  jbyte response;
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:self->mMaxPayloadSizeTx_ + ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_HEADER_SIZE];
  jint size = ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
  @try {
    size = (((IOSByteArray *) nil_chk(self->mBuffer_))->size_ - self->mOffset_ > self->mMaxPayloadSizeTx_) ? self->mMaxPayloadSizeTx_ : self->mBuffer_->size_ - self->mOffset_;
    if (size <= 0) return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
    [self writeToFileWithNSString:@"Send simple data"];
    if (ComStSt25nfcType5St25dvST25DVTransferTask_sendSprueHeaderWithByteArray_withByte_withByte_withInt_(self, frame, (jbyte) self->mAction_, command, size) == ComStSt25nfcType5St25dvST25DVTransferTask_ERROR) return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->mBuffer_, self->mOffset_, frame, ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_HEADER_SIZE, size);
    [self writeToFileWithNSString:JavaUtilArrays_toStringWithByteArray_(frame)];
    [self writeToFileWithNSString:JreStrcat("$I", @"DataLen=", size)];
    response = [((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) writeMailboxMessageWithInt:size + ComStSt25nfcType5St25dvST25DVTransferTask_SPRUE_HEADER_SIZE withByteArray:frame];
    if (response == (jint) 0x00) self->mOffset_ += size;
    else return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
  return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
}

jint ComStSt25nfcType5St25dvST25DVTransferTask_sendChainedDataWithByte_withBoolean_(ComStSt25nfcType5St25dvST25DVTransferTask *self, jbyte command, jboolean checkRf) {
  if (checkRf) {
    @try {
      if ([((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) hasRFPutMsgWithBoolean:true]) return ComStSt25nfcType5St25dvST25DVTransferTask_TRY_AGAIN;
    }
    @catch (ComStSt25sdkSTException *e) {
      return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
    }
  }
  jbyte response;
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:self->mMaxPayloadSizeTx_ + ComStSt25nfcType5St25dvST25DVTransferTask_CHAINED_HEADER_SIZE];
  jint size = ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
  @try {
    size = (((IOSByteArray *) nil_chk(self->mBuffer_))->size_ - self->mOffset_ > self->mMaxPayloadSizeTx_) ? self->mMaxPayloadSizeTx_ : self->mBuffer_->size_ - self->mOffset_;
    if (size <= 0) return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
    if (ComStSt25nfcType5St25dvST25DVTransferTask_sendChainedHeaderWithByteArray_withByte_withByte_withInt_(self, frame, (jbyte) self->mAction_, command, size) == ComStSt25nfcType5St25dvST25DVTransferTask_ERROR) return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->mBuffer_, self->mOffset_, frame, ComStSt25nfcType5St25dvST25DVTransferTask_CHAINED_HEADER_SIZE, size);
    [self writeToFileWithNSString:@"Send chained data"];
    [self writeToFileWithNSString:JavaUtilArrays_toStringWithByteArray_(frame)];
    [self writeToFileWithNSString:JreStrcat("$I", @"DataLen=", size)];
    response = [((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) writeMailboxMessageWithInt:size + ComStSt25nfcType5St25dvST25DVTransferTask_CHAINED_HEADER_SIZE withByteArray:frame withByte:ComStSt25sdkCommandIso15693Protocol_HIGH_DATA_RATE_MODE];
    if (response == (jint) 0x00) self->mOffset_ += size;
    else return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
    if (self->mOffset_ == ((IOSByteArray *) nil_chk(self->mBuffer_))->size_) self->mState_ = JreLoadEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, CHECK_CRC);
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
  ComStSt25nfcType5St25dvST25DVTransferTask_sleep_in_msWithInt_(self, 5);
  return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
}

jlong ComStSt25nfcType5St25dvST25DVTransferTask_computeCrc(ComStSt25nfcType5St25dvST25DVTransferTask *self) {
  @try {
    return ComStSt25sdkCrc_CRCWithByteArray_(self->mBuffer_);
  }
  @catch (JavaLangException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
  }
}

jint ComStSt25nfcType5St25dvST25DVTransferTask_sendCrcWithByte_(ComStSt25nfcType5St25dvST25DVTransferTask *self, jbyte function) {
  @try {
    if ([((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) hasRFPutMsgWithBoolean:true]) return ComStSt25nfcType5St25dvST25DVTransferTask_TRY_AGAIN;
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
  jbyte response;
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:9];
  *IOSByteArray_GetRef(frame, 0) = function;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_ACK;
  *IOSByteArray_GetRef(frame, 2) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 3) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 4) = (jint) 0x04;
  jlong crc = ComStSt25nfcType5St25dvST25DVTransferTask_computeCrc(self);
  *IOSByteArray_GetRef(frame, 5) = (jbyte) (JreRShift64((crc & (jint) 0xFF000000), 24));
  *IOSByteArray_GetRef(frame, 6) = (jbyte) (JreRShift64((crc & (jint) 0x00FF0000), 16));
  *IOSByteArray_GetRef(frame, 7) = (jbyte) (JreRShift64((crc & (jint) 0x0000FF00), 8));
  *IOSByteArray_GetRef(frame, 8) = (jbyte) (crc & (jint) 0x000000FF);
  ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$J", @"sendCrc: ", crc));
  [self writeToFileWithNSString:JreStrcat("$J", @"sendCrc: ", crc)];
  @try {
    response = [((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) writeMailboxMessageWithInt:frame->size_ withByteArray:frame];
    if (response == (jbyte) (jint) 0x00) return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
  return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
}

jint ComStSt25nfcType5St25dvST25DVTransferTask_checkAck(ComStSt25nfcType5St25dvST25DVTransferTask *self) {
  @try {
    if (![((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) hasHostPutMsgWithBoolean:true]) return ComStSt25nfcType5St25dvST25DVTransferTask_TRY_AGAIN;
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
  IOSByteArray *response;
  jint size = -1;
  ComStSt25sdkSTLog_iWithNSString_(@"checkAck");
  [self writeToFileWithNSString:@"checkAck"];
  @try {
    response = ComStSt25nfcType5St25dvST25DVTransferTask_readMessage(self);
    if ((response != nil) && (((IOSByteArray *) nil_chk(response))->size_ >= 2) && (IOSByteArray_Get(response, 2) == (jint) 0x00)) {
      ComStSt25sdkSTLog_iWithNSString_(@"Tag acknowledge that CRC is OK");
      [self writeToFileWithNSString:@"Tag acknowledge that CRC is OK"];
      return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
    }
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
  return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
}

jint ComStSt25nfcType5St25dvST25DVTransferTask_checkPasswordAnswer(ComStSt25nfcType5St25dvST25DVTransferTask *self) {
  @try {
    if (![((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) hasHostPutMsgWithBoolean:true]) return ComStSt25nfcType5St25dvST25DVTransferTask_TRY_AGAIN;
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
  IOSByteArray *response;
  jint size = -1;
  @try {
    response = ComStSt25nfcType5St25dvST25DVTransferTask_readMessage(self);
    if (response == nil) return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
    if (response->size_ >= 3) {
      if (IOSByteArray_Get(response, 2) == (jint) 0x00) return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
      else return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
    }
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
  return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
}

jint ComStSt25nfcType5St25dvST25DVTransferTask_checkCrc(ComStSt25nfcType5St25dvST25DVTransferTask *self) {
  @try {
    if (![((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) hasHostPutMsgWithBoolean:true]) {
      [self writeToFileWithNSString:@"*****Wait for the response ***"];
      return ComStSt25nfcType5St25dvST25DVTransferTask_TRY_AGAIN;
    }
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
  @try {
    jlong crc = ComStSt25nfcType5St25dvST25DVTransferTask_computeCrc(self);
    IOSByteArray *response = ComStSt25nfcType5St25dvST25DVTransferTask_readMessage(self);
    if ((response != nil) && (((IOSByteArray *) nil_chk(response))->size_ >= 9)) {
      if ((IOSByteArray_Get(nil_chk(response), 4) & (jint) 0xFF) == 4) {
        if ((IOSByteArray_Get(response, 5) == (jbyte) (JreRShift64((crc & (jint) 0xFF000000), 24))) && (IOSByteArray_Get(response, 6) == (jbyte) (JreRShift64((crc & (jint) 0x00FF0000), 16))) && (IOSByteArray_Get(response, 7) == (jbyte) (JreRShift64((crc & (jint) 0x0000FF00), 8))) && (IOSByteArray_Get(response, 8) == (jbyte) ((crc & (jint) 0x000000FF)))) {
          ComStSt25sdkSTLog_iWithNSString_(@"CRC ok");
          [self writeToFileWithNSString:@"CRC ok"];
          return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
        }
        else {
          ComStSt25sdkSTLog_eWithNSString_(@"Incorrect CRC!");
          [self writeToFileWithNSString:@"Incorrect CRC!"];
        }
      }
      else {
        ComStSt25sdkSTLog_eWithNSString_(JreStrcat("$$", @"checkCRC: Invalid response: ", ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(response)));
        [self writeToFileWithNSString:JreStrcat("$$", @"checkCRC: Invalid response: ", ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(response))];
      }
    }
    else {
      ComStSt25sdkSTLog_eWithNSString_(@"checkCRC: Invalid response");
      [self writeToFileWithNSString:@"checkCRC: Invalid response"];
    }
    return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
}

jint ComStSt25nfcType5St25dvST25DVTransferTask_sendAckWithBoolean_withByte_(ComStSt25nfcType5St25dvST25DVTransferTask *self, jboolean success, jbyte function) {
  @try {
    if ([((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) hasRFPutMsgWithBoolean:true]) return ComStSt25nfcType5St25dvST25DVTransferTask_TRY_AGAIN;
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
  jbyte response;
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:5];
  *IOSByteArray_GetRef(frame, 0) = function;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_ACK;
  if (success) {
    ComStSt25sdkSTLog_iWithNSString_(@"sendAck: FAST_TRANSFER_OK");
    [self writeToFileWithNSString:@"sendAck: FAST_TRANSFER_OK"];
    *IOSByteArray_GetRef(frame, 2) = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_OK;
  }
  else {
    ComStSt25sdkSTLog_iWithNSString_(@"sendAck: FAST_TRANSFER_ERROR");
    [self writeToFileWithNSString:@"sendAck: FAST_TRANSFER_ERROR"];
    *IOSByteArray_GetRef(frame, 2) = ComStSt25nfcType5St25dvST25DVTransferTask_FAST_TRANSFER_ERROR;
  }
  *IOSByteArray_GetRef(frame, 3) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 4) = 0;
  @try {
    response = [((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) writeMailboxMessageWithInt:5 withByteArray:frame];
    if (response != (jbyte) (jint) 0x00) return ComStSt25nfcType5St25dvST25DVTransferTask_ERROR;
  }
  @catch (ComStSt25sdkSTException *e) {
    return ComStSt25nfcType5St25dvST25DVTransferTask_checkErrorWithComStSt25sdkSTException_(self, e);
  }
  return ComStSt25nfcType5St25dvST25DVTransferTask_OK;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25nfcType5St25dvST25DVTransferTask)

@implementation ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(transferOnProgressWithDouble:);
  methods[1].selector = @selector(transferFinishedWithBoolean:withLong:withByteArray:);
  methods[2].selector = @selector(getDataToWrite);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transferOnProgress", "D", "transferFinished", "ZJ[B", "LComStSt25nfcType5St25dvST25DVTransferTask;" };
  static const J2ObjcClassInfo _ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener = { "OnTransferListener", "com.st.st25nfc.type5.st25dv", ptrTable, methods, NULL, 7, 0x609, 3, 0, 4, -1, -1, -1, -1 };
  return &_ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComStSt25nfcType5St25dvST25DVTransferTask_OnTransferListener)

J2OBJC_INITIALIZED_DEFN(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent)

ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_values_[4];

@implementation ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent

+ (ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *)START {
  return JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, START);
}

+ (ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *)STOP {
  return JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, STOP);
}

+ (ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *)PAUSE {
  return JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, PAUSE);
}

+ (ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *)RESUME {
  return JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, RESUME);
}

+ (IOSObjectArray *)values {
  return ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_values();
}

+ (ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *)valueOfWithNSString:(NSString *)name {
  return ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_valueOfWithNSString_(name);
}

- (ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_Enum)toNSEnum {
  return (ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "START", "LComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "STOP", "LComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "PAUSE", "LComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "RESUME", "LComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, START), &JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, STOP), &JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, PAUSE), &JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, RESUME), "LComStSt25nfcType5St25dvST25DVTransferTask;", "Ljava/lang/Enum<Lcom/st/st25nfc/type5/st25dv/ST25DVTransferTask$ST25DVTransferEvent;>;" };
  static const J2ObjcClassInfo _ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent = { "ST25DVTransferEvent", "com.st.st25nfc.type5.st25dv", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent;
}

+ (void)initialize {
  if (self == [ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent class]) {
    JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, START) = new_ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_initWithNSString_withInt_(JreEnumConstantName(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_class_(), 0), 0);
    JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, STOP) = new_ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_initWithNSString_withInt_(JreEnumConstantName(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_class_(), 1), 1);
    JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, PAUSE) = new_ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_initWithNSString_withInt_(JreEnumConstantName(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_class_(), 2), 2);
    JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, RESUME) = new_ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_initWithNSString_withInt_(JreEnumConstantName(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_class_(), 3), 3);
    J2OBJC_SET_INITIALIZED(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent)
  }
}

@end

void ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_initWithNSString_withInt_(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *new_ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_values() {
  ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_initialize();
  return [IOSObjectArray arrayWithObjects:ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_values_ count:4 type:ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_class_()];
}

ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_valueOfWithNSString_(NSString *name) {
  ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_initialize();
  for (int i = 0; i < 4; i++) {
    ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *e = ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent *ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_fromOrdinal(NSUInteger ordinal) {
  ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25nfcType5St25dvST25DVTransferTask_ST25DVTransferEvent)

J2OBJC_INITIALIZED_DEFN(ComStSt25nfcType5St25dvST25DVTransferTask_State)

ComStSt25nfcType5St25dvST25DVTransferTask_State *ComStSt25nfcType5St25dvST25DVTransferTask_State_values_[5];

@implementation ComStSt25nfcType5St25dvST25DVTransferTask_State

+ (ComStSt25nfcType5St25dvST25DVTransferTask_State *)INIT {
  return JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, INIT);
}

+ (ComStSt25nfcType5St25dvST25DVTransferTask_State *)TRANSFERING {
  return JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, TRANSFERING);
}

+ (ComStSt25nfcType5St25dvST25DVTransferTask_State *)CHECK_CRC {
  return JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, CHECK_CRC);
}

+ (ComStSt25nfcType5St25dvST25DVTransferTask_State *)ACKNOWLEDGE {
  return JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, ACKNOWLEDGE);
}

+ (ComStSt25nfcType5St25dvST25DVTransferTask_State *)ENDING {
  return JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, ENDING);
}

+ (IOSObjectArray *)values {
  return ComStSt25nfcType5St25dvST25DVTransferTask_State_values();
}

+ (ComStSt25nfcType5St25dvST25DVTransferTask_State *)valueOfWithNSString:(NSString *)name {
  return ComStSt25nfcType5St25dvST25DVTransferTask_State_valueOfWithNSString_(name);
}

- (ComStSt25nfcType5St25dvST25DVTransferTask_State_Enum)toNSEnum {
  return (ComStSt25nfcType5St25dvST25DVTransferTask_State_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComStSt25nfcType5St25dvST25DVTransferTask_State;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25nfcType5St25dvST25DVTransferTask_State;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INIT", "LComStSt25nfcType5St25dvST25DVTransferTask_State;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "TRANSFERING", "LComStSt25nfcType5St25dvST25DVTransferTask_State;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "CHECK_CRC", "LComStSt25nfcType5St25dvST25DVTransferTask_State;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "ACKNOWLEDGE", "LComStSt25nfcType5St25dvST25DVTransferTask_State;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "ENDING", "LComStSt25nfcType5St25dvST25DVTransferTask_State;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, INIT), &JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, TRANSFERING), &JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, CHECK_CRC), &JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, ACKNOWLEDGE), &JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, ENDING), "LComStSt25nfcType5St25dvST25DVTransferTask;", "Ljava/lang/Enum<Lcom/st/st25nfc/type5/st25dv/ST25DVTransferTask$State;>;" };
  static const J2ObjcClassInfo _ComStSt25nfcType5St25dvST25DVTransferTask_State = { "State", "com.st.st25nfc.type5.st25dv", ptrTable, methods, fields, 7, 0x401a, 2, 5, 7, -1, -1, 8, -1 };
  return &_ComStSt25nfcType5St25dvST25DVTransferTask_State;
}

+ (void)initialize {
  if (self == [ComStSt25nfcType5St25dvST25DVTransferTask_State class]) {
    JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, INIT) = new_ComStSt25nfcType5St25dvST25DVTransferTask_State_initWithNSString_withInt_(JreEnumConstantName(ComStSt25nfcType5St25dvST25DVTransferTask_State_class_(), 0), 0);
    JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, TRANSFERING) = new_ComStSt25nfcType5St25dvST25DVTransferTask_State_initWithNSString_withInt_(JreEnumConstantName(ComStSt25nfcType5St25dvST25DVTransferTask_State_class_(), 1), 1);
    JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, CHECK_CRC) = new_ComStSt25nfcType5St25dvST25DVTransferTask_State_initWithNSString_withInt_(JreEnumConstantName(ComStSt25nfcType5St25dvST25DVTransferTask_State_class_(), 2), 2);
    JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, ACKNOWLEDGE) = new_ComStSt25nfcType5St25dvST25DVTransferTask_State_initWithNSString_withInt_(JreEnumConstantName(ComStSt25nfcType5St25dvST25DVTransferTask_State_class_(), 3), 3);
    JreEnum(ComStSt25nfcType5St25dvST25DVTransferTask_State, ENDING) = new_ComStSt25nfcType5St25dvST25DVTransferTask_State_initWithNSString_withInt_(JreEnumConstantName(ComStSt25nfcType5St25dvST25DVTransferTask_State_class_(), 4), 4);
    J2OBJC_SET_INITIALIZED(ComStSt25nfcType5St25dvST25DVTransferTask_State)
  }
}

@end

void ComStSt25nfcType5St25dvST25DVTransferTask_State_initWithNSString_withInt_(ComStSt25nfcType5St25dvST25DVTransferTask_State *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComStSt25nfcType5St25dvST25DVTransferTask_State *new_ComStSt25nfcType5St25dvST25DVTransferTask_State_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComStSt25nfcType5St25dvST25DVTransferTask_State, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComStSt25nfcType5St25dvST25DVTransferTask_State_values() {
  ComStSt25nfcType5St25dvST25DVTransferTask_State_initialize();
  return [IOSObjectArray arrayWithObjects:ComStSt25nfcType5St25dvST25DVTransferTask_State_values_ count:5 type:ComStSt25nfcType5St25dvST25DVTransferTask_State_class_()];
}

ComStSt25nfcType5St25dvST25DVTransferTask_State *ComStSt25nfcType5St25dvST25DVTransferTask_State_valueOfWithNSString_(NSString *name) {
  ComStSt25nfcType5St25dvST25DVTransferTask_State_initialize();
  for (int i = 0; i < 5; i++) {
    ComStSt25nfcType5St25dvST25DVTransferTask_State *e = ComStSt25nfcType5St25dvST25DVTransferTask_State_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComStSt25nfcType5St25dvST25DVTransferTask_State *ComStSt25nfcType5St25dvST25DVTransferTask_State_fromOrdinal(NSUInteger ordinal) {
  ComStSt25nfcType5St25dvST25DVTransferTask_State_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return ComStSt25nfcType5St25dvST25DVTransferTask_State_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25nfcType5St25dvST25DVTransferTask_State)
