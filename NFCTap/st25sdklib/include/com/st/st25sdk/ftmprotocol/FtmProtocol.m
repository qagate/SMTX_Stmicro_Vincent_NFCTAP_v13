//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/ftmprotocol/FtmProtocol.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Crc.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/command/Iso15693Protocol.h"
#include "com/st/st25sdk/ftmprotocol/FtmProtocol.h"
#include "com/st/st25sdk/type5/st25dv/ST25DVTag.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Byte.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/Arrays.h"
#include "java/util/Calendar.h"
#include "java/util/concurrent/Semaphore.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface ComStSt25sdkFtmprotocolFtmProtocol () {
 @public
  ComStSt25sdkType5St25dvST25DVTag *mST25DVTag_;
  jboolean mUseAddressedMode_;
  jbyte mFlag_;
  id<ComStSt25sdkFtmprotocolFtmProtocol_FtmProtocolHook> mFtmProtocolHook_;
  ComStSt25sdkFtmprotocolFtmProtocol_State *mState_;
  jboolean mFtmTheadRunning_;
  jint mNbrOfPacketsPerSegment_;
  jint mMaxTransceiveSize_;
  jint mMaxTransmissionSize_;
  jint mNbrOfRetriesInCaseOfError_;
  jboolean mUseFastCommands_;
  jint mTimeOutInMs_;
  jlong mTimeOfFirstError_;
  jint mSegmentReceptionCrcError_;
  jint mNumberOfTransmissionRetries_;
  jboolean mRestartedFromFirstSegmentPacket_;
  id<ComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener> mTransferProgressionListener_;
  id<ComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener> mTransferCompletionListener_;
  jlong mSleepTimeInMsWhenPaused_;
  jlong mTimeOfLastNfcCommand_;
  jlong mMinTimeInMsBetweenSendCmds_;
  jlong mMinTimeInMsBetweenReceiveCmds_;
  jlong mMinTimeInMsWhenWaitingAck_;
  jboolean mCancelCurrentTransfer_;
  jboolean mPauseCurrentTransfer_;
  jint mNumberOfBytesToSend_;
  jint mSegmentDataLength_;
  IOSByteArray *mSegmentCrc_;
  jboolean mIsErrorControlNeeded_;
  jboolean mIsResponseExpected_;
  jint mCurrentPacketNumber_;
  jint mCurrentSegmentNumber_;
  JavaIoByteArrayInputStream *mTransmissionByteArrayInputStream_;
  JavaIoByteArrayInputStream *mTransmissionSegmentInputStream_;
  jint mStartSegmentPacketNumber_;
  IOSByteArray *mLastPacket_;
  jboolean mTransferDone_;
  IOSByteArray *mFtmReceivedData_;
  ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *mFtmTransferStatus_;
  jint mReceptionTotalLength_;
  jbyte mSegmentStatus_;
  jboolean mReceptionWithAck_;
  ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *mReceptionStatus_;
  JavaIoByteArrayOutputStream *mReceptionOutputStream_;
  JavaIoByteArrayOutputStream *mReceptionSegmentOutputStream_;
}

- (void)sleepInMsWithLong:(jlong)millis;

- (void)setMaxTransmissionSize;

- (void)handleFatalErrorWithNSString:(NSString *)errorMsg;

- (void)finalizeTransferWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus:(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *)transferStatus
                                                                withByteArray:(IOSByteArray *)response;

- (void)createThread;

- (void)receiveData;

- (void)setStateWithComStSt25sdkFtmprotocolFtmProtocol_State:(ComStSt25sdkFtmprotocolFtmProtocol_State *)newState;

- (jboolean)isMailboxAvailableForReading;

- (void)saveTimeOfLastNfcCommand;

- (void)sleepBetweenSendCmds;

- (void)sleepBetweenReceiveCmds;

- (void)sleepWhenWaitingForAck;

- (jlong)getTimeSinceFirstError;

- (void)receiveNextPacket;

- (void)checkConsistencyWithByte:(jbyte)packetPosition
                     withBoolean:(jboolean)segmentStart
                     withBoolean:(jboolean)segmentEnd;

- (void)checkIfReceptionCompleted;

- (void)checkSegmentCrcWithBoolean:(jboolean)oddSegmentReceived;

- (void)sendSegmentStatusWithByte:(jbyte)segmentStatus;

- (void)sendAcknowledge;

- (jint)getReceivedDataLengthWithInt:(jint)packetLength
                         withBoolean:(jboolean)isPacketDataLengthFieldPresent
                         withBoolean:(jboolean)isTotalLengthFieldPresent;

- (void)updateTransmissionProgress;

- (void)updateReceptionProgress;

- (jint)getMaxTransmissionSegmentDataLength;

- (void)sendNextPacket;

- (void)sendNextSegmentPacket;

- (void)restartTransmissionFromFirstSegmentPacket;

- (IOSByteArray *)getPacketDataWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)byteArrayInputStream
                                                      withInt:(jint)packetDataLength;

- (IOSByteArray *)preparePacketWithBoolean:(jboolean)sendPacketLength
                               withBoolean:(jboolean)segmentStart
                               withBoolean:(jboolean)segmentEnd
                                  withByte:(jbyte)packetPosition
                             withByteArray:(IOSByteArray *)packetData
                                   withInt:(jint)totalDataLength;

- (void)sendPacketWithByteArray:(IOSByteArray *)packet
                    withBoolean:(jboolean)segmentStart
                    withBoolean:(jboolean)segmentMiddle
                    withBoolean:(jboolean)segmentEnd;

- (void)resendPacket;

- (void)waitForAcknowledge;

- (void)processAcknowledgeResponseWithByteArray:(IOSByteArray *)ackData;

- (void)printMBControlDynRegisterWithByte:(jbyte)registerValue;

- (void)printControlByteWithByte:(jbyte)controlByte;

+ (jboolean)isMailboxEnabledWithByte:(jbyte)mbCtrlDynRegisterValue;

+ (jboolean)hasHostPutMsgWithByte:(jbyte)mbCtrlDynRegisterValue;

+ (jboolean)hasRFPutMsgWithByte:(jbyte)mbCtrlDynRegisterValue;

- (void)notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint:(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)testPoint;

- (void)notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint:(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)testPoint
                                                          withByteArray:(IOSByteArray *)arg;

- (IOSByteArray *)readMailboxMessageWithInt:(jint)mbAddress
                                    withInt:(jint)size
                                   withByte:(jbyte)flag;

- (jbyte)writeMailboxMessageWithInt:(jint)size
                      withByteArray:(IOSByteArray *)buffer
                           withByte:(jbyte)flag;

- (IOSByteArray *)readDynConfigWithInt:(jint)configId
                              withByte:(jbyte)flag;

@end

J2OBJC_FIELD_SETTER(ComStSt25sdkFtmprotocolFtmProtocol, mST25DVTag_, ComStSt25sdkType5St25dvST25DVTag *)
J2OBJC_FIELD_SETTER(ComStSt25sdkFtmprotocolFtmProtocol, mFtmProtocolHook_, id<ComStSt25sdkFtmprotocolFtmProtocol_FtmProtocolHook>)
J2OBJC_FIELD_SETTER(ComStSt25sdkFtmprotocolFtmProtocol, mState_, ComStSt25sdkFtmprotocolFtmProtocol_State *)
J2OBJC_FIELD_SETTER(ComStSt25sdkFtmprotocolFtmProtocol, mTransferProgressionListener_, id<ComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener>)
J2OBJC_FIELD_SETTER(ComStSt25sdkFtmprotocolFtmProtocol, mTransferCompletionListener_, id<ComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener>)
J2OBJC_FIELD_SETTER(ComStSt25sdkFtmprotocolFtmProtocol, mSegmentCrc_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComStSt25sdkFtmprotocolFtmProtocol, mTransmissionByteArrayInputStream_, JavaIoByteArrayInputStream *)
J2OBJC_FIELD_SETTER(ComStSt25sdkFtmprotocolFtmProtocol, mTransmissionSegmentInputStream_, JavaIoByteArrayInputStream *)
J2OBJC_FIELD_SETTER(ComStSt25sdkFtmprotocolFtmProtocol, mLastPacket_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComStSt25sdkFtmprotocolFtmProtocol, mFtmReceivedData_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComStSt25sdkFtmprotocolFtmProtocol, mFtmTransferStatus_, ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *)
J2OBJC_FIELD_SETTER(ComStSt25sdkFtmprotocolFtmProtocol, mReceptionStatus_, ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *)
J2OBJC_FIELD_SETTER(ComStSt25sdkFtmprotocolFtmProtocol, mReceptionOutputStream_, JavaIoByteArrayOutputStream *)
J2OBJC_FIELD_SETTER(ComStSt25sdkFtmprotocolFtmProtocol, mReceptionSegmentOutputStream_, JavaIoByteArrayOutputStream *)

inline jbyte ComStSt25sdkFtmprotocolFtmProtocol_get_SEGMENT_OK(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_OK -128
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, SEGMENT_OK, jbyte)

inline jbyte ComStSt25sdkFtmprotocolFtmProtocol_get_SEGMENT_ERROR(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_ERROR -127
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, SEGMENT_ERROR, jbyte)

inline jint ComStSt25sdkFtmprotocolFtmProtocol_get_MAILBOX_SIZE(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_MAILBOX_SIZE 256
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, MAILBOX_SIZE, jint)

inline jint ComStSt25sdkFtmprotocolFtmProtocol_get_WRITE_MSG_NFC_CMD_HEADER_LENGTH_FOR_ADDRESSED_CMD(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_WRITE_MSG_NFC_CMD_HEADER_LENGTH_FOR_ADDRESSED_CMD 12
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, WRITE_MSG_NFC_CMD_HEADER_LENGTH_FOR_ADDRESSED_CMD, jint)

inline jint ComStSt25sdkFtmprotocolFtmProtocol_get_WRITE_MSG_NFC_CMD_HEADER_LENGTH_FOR_NON_ADDRESSED_CMD(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_WRITE_MSG_NFC_CMD_HEADER_LENGTH_FOR_NON_ADDRESSED_CMD 4
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, WRITE_MSG_NFC_CMD_HEADER_LENGTH_FOR_NON_ADDRESSED_CMD, jint)

inline jint ComStSt25sdkFtmprotocolFtmProtocol_get_CONTROL_BYTE_FIELD_LENGTH(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH 1
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, CONTROL_BYTE_FIELD_LENGTH, jint)

inline jint ComStSt25sdkFtmprotocolFtmProtocol_get_PACKET_LENGTH_FIELD_LENGTH(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_LENGTH 1
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, PACKET_LENGTH_FIELD_LENGTH, jint)

inline jint ComStSt25sdkFtmprotocolFtmProtocol_get_TOTAL_LENGTH_FIELD_LENGTH(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_TOTAL_LENGTH_FIELD_LENGTH 4
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, TOTAL_LENGTH_FIELD_LENGTH, jint)

inline jint ComStSt25sdkFtmprotocolFtmProtocol_get_CRC_FIELD_LENGTH(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_CRC_FIELD_LENGTH 4
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, CRC_FIELD_LENGTH, jint)

inline jbyte ComStSt25sdkFtmprotocolFtmProtocol_get_PACKET_LENGTH_FIELD_PRESENT(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_PRESENT 64
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, PACKET_LENGTH_FIELD_PRESENT, jbyte)

inline jbyte ComStSt25sdkFtmprotocolFtmProtocol_get_SEGMENT_START(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_START 16
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, SEGMENT_START, jbyte)

inline jbyte ComStSt25sdkFtmprotocolFtmProtocol_get_SEGMENT_END(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_END 32
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, SEGMENT_END, jbyte)

inline jbyte ComStSt25sdkFtmprotocolFtmProtocol_get_PACKET_POSITION_OFFSET(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_PACKET_POSITION_OFFSET 2
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, PACKET_POSITION_OFFSET, jbyte)

inline jbyte ComStSt25sdkFtmprotocolFtmProtocol_get_SINGLE_PACKET(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_SINGLE_PACKET 0
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, SINGLE_PACKET, jbyte)

inline jbyte ComStSt25sdkFtmprotocolFtmProtocol_get_FIRST_PACKET(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_FIRST_PACKET 1
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, FIRST_PACKET, jbyte)

inline jbyte ComStSt25sdkFtmprotocolFtmProtocol_get_MIDDLE_PACKET(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_MIDDLE_PACKET 2
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, MIDDLE_PACKET, jbyte)

inline jbyte ComStSt25sdkFtmprotocolFtmProtocol_get_END_PACKET(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_END_PACKET 3
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, END_PACKET, jbyte)

inline jbyte ComStSt25sdkFtmprotocolFtmProtocol_get_PARITY(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_PARITY 2
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, PARITY, jbyte)

inline jbyte ComStSt25sdkFtmprotocolFtmProtocol_get_PACKET_BELONGING_TO_A_SEGMENT(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_PACKET_BELONGING_TO_A_SEGMENT 1
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, PACKET_BELONGING_TO_A_SEGMENT, jbyte)

inline jint ComStSt25sdkFtmprotocolFtmProtocol_get_WAIT_FOR_EVER(void);
#define ComStSt25sdkFtmprotocolFtmProtocol_WAIT_FOR_EVER 0
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkFtmprotocolFtmProtocol, WAIT_FOR_EVER, jint)

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_sleepInMsWithLong_(ComStSt25sdkFtmprotocolFtmProtocol *self, jlong millis);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_setMaxTransmissionSize(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(ComStSt25sdkFtmprotocolFtmProtocol *self, NSString *errorMsg);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_finalizeTransferWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_withByteArray_(ComStSt25sdkFtmprotocolFtmProtocol *self, ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *transferStatus, IOSByteArray *response);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_createThread(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_receiveData(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(ComStSt25sdkFtmprotocolFtmProtocol *self, ComStSt25sdkFtmprotocolFtmProtocol_State *newState);

__attribute__((unused)) static jboolean ComStSt25sdkFtmprotocolFtmProtocol_isMailboxAvailableForReading(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_saveTimeOfLastNfcCommand(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_sleepBetweenSendCmds(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_sleepBetweenReceiveCmds(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_sleepWhenWaitingForAck(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static jlong ComStSt25sdkFtmprotocolFtmProtocol_getTimeSinceFirstError(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_receiveNextPacket(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_checkConsistencyWithByte_withBoolean_withBoolean_(ComStSt25sdkFtmprotocolFtmProtocol *self, jbyte packetPosition, jboolean segmentStart, jboolean segmentEnd);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_checkIfReceptionCompleted(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_checkSegmentCrcWithBoolean_(ComStSt25sdkFtmprotocolFtmProtocol *self, jboolean oddSegmentReceived);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_sendSegmentStatusWithByte_(ComStSt25sdkFtmprotocolFtmProtocol *self, jbyte segmentStatus);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_sendAcknowledge(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static jint ComStSt25sdkFtmprotocolFtmProtocol_getReceivedDataLengthWithInt_withBoolean_withBoolean_(ComStSt25sdkFtmprotocolFtmProtocol *self, jint packetLength, jboolean isPacketDataLengthFieldPresent, jboolean isTotalLengthFieldPresent);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_updateTransmissionProgress(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_updateReceptionProgress(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static jint ComStSt25sdkFtmprotocolFtmProtocol_getMaxTransmissionSegmentDataLength(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_sendNextPacket(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_sendNextSegmentPacket(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_restartTransmissionFromFirstSegmentPacket(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static IOSByteArray *ComStSt25sdkFtmprotocolFtmProtocol_getPacketDataWithJavaIoByteArrayInputStream_withInt_(ComStSt25sdkFtmprotocolFtmProtocol *self, JavaIoByteArrayInputStream *byteArrayInputStream, jint packetDataLength);

__attribute__((unused)) static IOSByteArray *ComStSt25sdkFtmprotocolFtmProtocol_preparePacketWithBoolean_withBoolean_withBoolean_withByte_withByteArray_withInt_(ComStSt25sdkFtmprotocolFtmProtocol *self, jboolean sendPacketLength, jboolean segmentStart, jboolean segmentEnd, jbyte packetPosition, IOSByteArray *packetData, jint totalDataLength);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_sendPacketWithByteArray_withBoolean_withBoolean_withBoolean_(ComStSt25sdkFtmprotocolFtmProtocol *self, IOSByteArray *packet, jboolean segmentStart, jboolean segmentMiddle, jboolean segmentEnd);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_resendPacket(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_waitForAcknowledge(ComStSt25sdkFtmprotocolFtmProtocol *self);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_processAcknowledgeResponseWithByteArray_(ComStSt25sdkFtmprotocolFtmProtocol *self, IOSByteArray *ackData);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_printMBControlDynRegisterWithByte_(ComStSt25sdkFtmprotocolFtmProtocol *self, jbyte registerValue);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_printControlByteWithByte_(ComStSt25sdkFtmprotocolFtmProtocol *self, jbyte controlByte);

__attribute__((unused)) static jboolean ComStSt25sdkFtmprotocolFtmProtocol_isMailboxEnabledWithByte_(jbyte mbCtrlDynRegisterValue);

__attribute__((unused)) static jboolean ComStSt25sdkFtmprotocolFtmProtocol_hasHostPutMsgWithByte_(jbyte mbCtrlDynRegisterValue);

__attribute__((unused)) static jboolean ComStSt25sdkFtmprotocolFtmProtocol_hasRFPutMsgWithByte_(jbyte mbCtrlDynRegisterValue);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(ComStSt25sdkFtmprotocolFtmProtocol *self, ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *testPoint);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_withByteArray_(ComStSt25sdkFtmprotocolFtmProtocol *self, ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *testPoint, IOSByteArray *arg);

__attribute__((unused)) static IOSByteArray *ComStSt25sdkFtmprotocolFtmProtocol_readMailboxMessageWithInt_withInt_withByte_(ComStSt25sdkFtmprotocolFtmProtocol *self, jint mbAddress, jint size, jbyte flag);

__attribute__((unused)) static jbyte ComStSt25sdkFtmprotocolFtmProtocol_writeMailboxMessageWithInt_withByteArray_withByte_(ComStSt25sdkFtmprotocolFtmProtocol *self, jint size, IOSByteArray *buffer, jbyte flag);

__attribute__((unused)) static IOSByteArray *ComStSt25sdkFtmprotocolFtmProtocol_readDynConfigWithInt_withByte_(ComStSt25sdkFtmprotocolFtmProtocol *self, jint configId, jbyte flag);

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_initWithNSString_withInt_(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *new_ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ComStSt25sdkFtmprotocolFtmProtocol_FtmProtocolHook : NSObject

@end

@interface ComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener : NSObject

@end

@interface ComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener : NSObject

@end

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_State_initWithNSString_withInt_(ComStSt25sdkFtmprotocolFtmProtocol_State *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComStSt25sdkFtmprotocolFtmProtocol_State *new_ComStSt25sdkFtmprotocolFtmProtocol_State_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_initWithNSString_withInt_(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *new_ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ComStSt25sdkFtmprotocolFtmProtocol_1 : NSObject < ComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener > {
 @public
  ComStSt25sdkFtmprotocolFtmProtocol *this$0_;
}

- (instancetype)initWithComStSt25sdkFtmprotocolFtmProtocol:(ComStSt25sdkFtmprotocolFtmProtocol *)outer$;

- (void)transferDoneWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus:(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *)transferStatus
                                                            withByteArray:(IOSByteArray *)response;

@end

J2OBJC_EMPTY_STATIC_INIT(ComStSt25sdkFtmprotocolFtmProtocol_1)

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_1_initWithComStSt25sdkFtmprotocolFtmProtocol_(ComStSt25sdkFtmprotocolFtmProtocol_1 *self, ComStSt25sdkFtmprotocolFtmProtocol *outer$);

__attribute__((unused)) static ComStSt25sdkFtmprotocolFtmProtocol_1 *new_ComStSt25sdkFtmprotocolFtmProtocol_1_initWithComStSt25sdkFtmprotocolFtmProtocol_(ComStSt25sdkFtmprotocolFtmProtocol *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComStSt25sdkFtmprotocolFtmProtocol_1 *create_ComStSt25sdkFtmprotocolFtmProtocol_1_initWithComStSt25sdkFtmprotocolFtmProtocol_(ComStSt25sdkFtmprotocolFtmProtocol *outer$);

@interface ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  ComStSt25sdkFtmprotocolFtmProtocol *this$0_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1)

__attribute__((unused)) static void ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1_initWithComStSt25sdkFtmprotocolFtmProtocol_(ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1 *self, ComStSt25sdkFtmprotocolFtmProtocol *outer$);

__attribute__((unused)) static ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1 *new_ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1_initWithComStSt25sdkFtmprotocolFtmProtocol_(ComStSt25sdkFtmprotocolFtmProtocol *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1 *create_ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1_initWithComStSt25sdkFtmprotocolFtmProtocol_(ComStSt25sdkFtmprotocolFtmProtocol *outer$);

NSString *ComStSt25sdkFtmprotocolFtmProtocol_TAG = @"FtmProtocol";

@implementation ComStSt25sdkFtmprotocolFtmProtocol

+ (jint)DEFAULT_NUMBER_OF_PACKETS_PER_SEGMENT {
  return ComStSt25sdkFtmprotocolFtmProtocol_DEFAULT_NUMBER_OF_PACKETS_PER_SEGMENT;
}

+ (NSString *)TAG {
  return ComStSt25sdkFtmprotocolFtmProtocol_TAG;
}

- (instancetype)initWithComStSt25sdkType5St25dvST25DVTag:(ComStSt25sdkType5St25dvST25DVTag *)st25DVTag {
  ComStSt25sdkFtmprotocolFtmProtocol_initWithComStSt25sdkType5St25dvST25DVTag_(self, st25DVTag);
  return self;
}

- (void)setTagWithComStSt25sdkType5St25dvST25DVTag:(ComStSt25sdkType5St25dvST25DVTag *)st25DVTag {
  ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$@", @"setTag:", st25DVTag));
  mST25DVTag_ = st25DVTag;
}

- (void)stopFtmThread {
  ComStSt25sdkSTLog_iWithNSString_(@"stopFtmThread");
  mFtmTheadRunning_ = false;
  ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, IDLE));
  [((JavaUtilConcurrentSemaphore *) nil_chk(ftmSemaphore_)) release__];
}

- (void)cancelCurrentTransfer {
  if (mState_ != JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, IDLE)) {
    ComStSt25sdkSTLog_wWithNSString_(@"cancelCurrentTransfer");
    mCancelCurrentTransfer_ = true;
  }
}

- (void)pauseCurrentTransfer {
  if (mState_ != JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, IDLE)) {
    ComStSt25sdkSTLog_wWithNSString_(@"pauseCurrentTransfer");
    mPauseCurrentTransfer_ = true;
  }
}

- (void)resumeCurrentTransfer {
  if (mState_ != JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, IDLE)) {
    ComStSt25sdkSTLog_wWithNSString_(@"resumeCurrentTransfer");
    mPauseCurrentTransfer_ = false;
  }
}

- (void)setNbrOfRetriesInCaseOfErrorWithInt:(jint)nbrOfRetriesInCaseOfError {
  mNbrOfRetriesInCaseOfError_ = nbrOfRetriesInCaseOfError;
}

- (jboolean)getFastCommandsUsage {
  return mUseFastCommands_;
}

- (void)setFastCommandUsageWithBoolean:(jboolean)useFastCommands {
  mUseFastCommands_ = useFastCommands;
}

- (void)sleepInMsWithLong:(jlong)millis {
  ComStSt25sdkFtmprotocolFtmProtocol_sleepInMsWithLong_(self, millis);
}

- (void)setSegmentLengthWithInt:(jint)nbrOfPacketsPerSegment {
  if (nbrOfPacketsPerSegment < 1) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I", @"setSegmentLength: ", nbrOfPacketsPerSegment));
  mNbrOfPacketsPerSegment_ = nbrOfPacketsPerSegment;
}

- (void)sendFtmDataWithByteArray:(IOSByteArray *)data
                     withBoolean:(jboolean)isErrorControlNeeded
                     withBoolean:(jboolean)isResponseExpected
withComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener:(id<ComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener>)transferProgressionListener
withComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener:(id<ComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener>)transferCompletionListener
                         withInt:(jint)timeOutInMs {
  jbyte flag = ComStSt25sdkCommandIso15693Protocol_HIGH_DATA_RATE_MODE;
  [self sendFtmDataWithByteArray:data withBoolean:isErrorControlNeeded withBoolean:isResponseExpected withComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener:transferProgressionListener withComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener:transferCompletionListener withInt:timeOutInMs withByte:flag];
}

- (void)sendFtmDataWithByteArray:(IOSByteArray *)data
                     withBoolean:(jboolean)isErrorControlNeeded
                     withBoolean:(jboolean)isResponseExpected
withComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener:(id<ComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener>)transferProgressionListener
withComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener:(id<ComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener>)transferCompletionListener
                         withInt:(jint)timeOutInMs
                        withByte:(jbyte)flag {
  if (mState_ != JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, IDLE)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
  if ((data == nil) || (((IOSByteArray *) nil_chk(data))->size_ == 0)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (![((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(mST25DVTag_)) isMailboxEnabledWithBoolean:true]) {
    ComStSt25sdkSTLog_eWithNSString_(@"Mailbox is not enabled!");
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
  mTimeOutInMs_ = timeOutInMs;
  mNumberOfBytesToSend_ = ((IOSByteArray *) nil_chk(data))->size_;
  mTransferProgressionListener_ = transferProgressionListener;
  mTransferCompletionListener_ = transferCompletionListener;
  mCurrentPacketNumber_ = 0;
  mCurrentSegmentNumber_ = 0;
  mTransmissionByteArrayInputStream_ = new_JavaIoByteArrayInputStream_initWithByteArray_(data);
  mTransmissionSegmentInputStream_ = nil;
  mFlag_ = flag;
  if ((flag & ComStSt25sdkCommandIso15693Protocol_ADDRESSED_MODE) == ComStSt25sdkCommandIso15693Protocol_ADDRESSED_MODE) {
    mUseAddressedMode_ = true;
  }
  else {
    mUseAddressedMode_ = false;
  }
  ComStSt25sdkFtmprotocolFtmProtocol_setMaxTransmissionSize(self);
  mNumberOfTransmissionRetries_ = 0;
  mIsErrorControlNeeded_ = isErrorControlNeeded;
  mIsResponseExpected_ = isResponseExpected;
  ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I$", @"sendFtmData: Data Size = ", [((JavaIoByteArrayInputStream *) nil_chk(mTransmissionByteArrayInputStream_)) available], @" Bytes"));
  ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, PREPARE_PACKET));
  [((JavaUtilConcurrentSemaphore *) nil_chk(ftmSemaphore_)) release__];
}

- (IOSByteArray *)sendFtmDataAndWaitForCompletionWithByteArray:(IOSByteArray *)data
                                                   withBoolean:(jboolean)isErrorControlNeeded
                                                   withBoolean:(jboolean)isResponseExpected
withComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener:(id<ComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener>)transferProgressionListener
                                                       withInt:(jint)timeOutInMs {
  jbyte flag = ComStSt25sdkCommandIso15693Protocol_HIGH_DATA_RATE_MODE;
  return [self sendFtmDataAndWaitForCompletionWithByteArray:data withBoolean:isErrorControlNeeded withBoolean:isResponseExpected withComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener:transferProgressionListener withInt:timeOutInMs withByte:flag];
}

- (IOSByteArray *)sendFtmDataAndWaitForCompletionWithByteArray:(IOSByteArray *)data
                                                   withBoolean:(jboolean)isErrorControlNeeded
                                                   withBoolean:(jboolean)isResponseExpected
withComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener:(id<ComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener>)transferProgressionListener
                                                       withInt:(jint)timeOutInMs
                                                      withByte:(jbyte)flag {
  mTransferDone_ = false;
  id<ComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener> transferCompletionListener = new_ComStSt25sdkFtmprotocolFtmProtocol_1_initWithComStSt25sdkFtmprotocolFtmProtocol_(self);
  [self sendFtmDataWithByteArray:data withBoolean:isErrorControlNeeded withBoolean:isResponseExpected withComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener:transferProgressionListener withComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener:transferCompletionListener withInt:timeOutInMs withByte:flag];
  @synchronized(transferCompletionListener) {
    while (!mTransferDone_) {
      [transferCompletionListener java_waitWithLong:ComStSt25sdkFtmprotocolFtmProtocol_WAIT_FOR_EVER];
    }
  }
  if (mFtmTransferStatus_ == JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_OK)) {
    ComStSt25sdkSTLog_iWithNSString_(@"Transfer OK");
    return mFtmReceivedData_;
  }
  else {
    ComStSt25sdkSTLog_eWithNSString_(@"Transfer failed!");
    return nil;
  }
}

- (jint)getMaxTransmissionSize {
  return mMaxTransmissionSize_;
}

- (void)setMaxTransmissionSize {
  ComStSt25sdkFtmprotocolFtmProtocol_setMaxTransmissionSize(self);
}

- (void)handleFatalErrorWithNSString:(NSString *)errorMsg {
  ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, errorMsg);
}

- (void)finalizeTransferWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus:(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *)transferStatus
                                                                withByteArray:(IOSByteArray *)response {
  ComStSt25sdkFtmprotocolFtmProtocol_finalizeTransferWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_withByteArray_(self, transferStatus, response);
}

- (void)createThread {
  ComStSt25sdkFtmprotocolFtmProtocol_createThread(self);
}

- (void)receiveDataWithComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener:(id<ComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener>)transferProgressionListener {
  mTransferProgressionListener_ = transferProgressionListener;
  ComStSt25sdkFtmprotocolFtmProtocol_receiveData(self);
}

- (void)receiveData {
  ComStSt25sdkFtmprotocolFtmProtocol_receiveData(self);
}

- (void)setStateWithComStSt25sdkFtmprotocolFtmProtocol_State:(ComStSt25sdkFtmprotocolFtmProtocol_State *)newState {
  ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, newState);
}

- (jboolean)isMailboxAvailableForReading {
  return ComStSt25sdkFtmprotocolFtmProtocol_isMailboxAvailableForReading(self);
}

- (void)resetTimeOfFirstError {
  mTimeOfFirstError_ = 0;
  mRestartedFromFirstSegmentPacket_ = false;
}

- (void)saveTimeOfLastNfcCommand {
  ComStSt25sdkFtmprotocolFtmProtocol_saveTimeOfLastNfcCommand(self);
}

- (void)setMinTimeInMsBetweenSendCmdsWithLong:(jlong)timeInMs {
  mMinTimeInMsBetweenSendCmds_ = timeInMs;
}

- (void)setMinTimeInMsBetweenReceiveCmdsWithLong:(jlong)timeInMs {
  mMinTimeInMsBetweenReceiveCmds_ = timeInMs;
}

- (void)setMinTimeInMsWhenWaitingAckWithLong:(jlong)minTimeInMsWhenWaitingAck {
  mMinTimeInMsWhenWaitingAck_ = minTimeInMsWhenWaitingAck;
}

- (void)sleepBetweenSendCmds {
  ComStSt25sdkFtmprotocolFtmProtocol_sleepBetweenSendCmds(self);
}

- (void)sleepBetweenReceiveCmds {
  ComStSt25sdkFtmprotocolFtmProtocol_sleepBetweenReceiveCmds(self);
}

- (void)sleepWhenWaitingForAck {
  ComStSt25sdkFtmprotocolFtmProtocol_sleepWhenWaitingForAck(self);
}

- (jlong)getTimeSinceFirstError {
  return ComStSt25sdkFtmprotocolFtmProtocol_getTimeSinceFirstError(self);
}

- (void)receiveNextPacket {
  ComStSt25sdkFtmprotocolFtmProtocol_receiveNextPacket(self);
}

- (void)checkConsistencyWithByte:(jbyte)packetPosition
                     withBoolean:(jboolean)segmentStart
                     withBoolean:(jboolean)segmentEnd {
  ComStSt25sdkFtmprotocolFtmProtocol_checkConsistencyWithByte_withBoolean_withBoolean_(self, packetPosition, segmentStart, segmentEnd);
}

- (void)checkIfReceptionCompleted {
  ComStSt25sdkFtmprotocolFtmProtocol_checkIfReceptionCompleted(self);
}

- (void)checkSegmentCrcWithBoolean:(jboolean)oddSegmentReceived {
  ComStSt25sdkFtmprotocolFtmProtocol_checkSegmentCrcWithBoolean_(self, oddSegmentReceived);
}

- (void)sendSegmentStatusWithByte:(jbyte)segmentStatus {
  ComStSt25sdkFtmprotocolFtmProtocol_sendSegmentStatusWithByte_(self, segmentStatus);
}

- (void)sendAcknowledge {
  ComStSt25sdkFtmprotocolFtmProtocol_sendAcknowledge(self);
}

- (jint)getReceivedDataLengthWithInt:(jint)packetLength
                         withBoolean:(jboolean)isPacketDataLengthFieldPresent
                         withBoolean:(jboolean)isTotalLengthFieldPresent {
  return ComStSt25sdkFtmprotocolFtmProtocol_getReceivedDataLengthWithInt_withBoolean_withBoolean_(self, packetLength, isPacketDataLengthFieldPresent, isTotalLengthFieldPresent);
}

- (void)updateTransmissionProgress {
  ComStSt25sdkFtmprotocolFtmProtocol_updateTransmissionProgress(self);
}

- (void)updateReceptionProgress {
  ComStSt25sdkFtmprotocolFtmProtocol_updateReceptionProgress(self);
}

- (jint)getMaxTransmissionSegmentDataLength {
  return ComStSt25sdkFtmprotocolFtmProtocol_getMaxTransmissionSegmentDataLength(self);
}

- (void)sendNextPacket {
  ComStSt25sdkFtmprotocolFtmProtocol_sendNextPacket(self);
}

- (void)sendNextSegmentPacket {
  ComStSt25sdkFtmprotocolFtmProtocol_sendNextSegmentPacket(self);
}

- (void)restartTransmissionFromFirstSegmentPacket {
  ComStSt25sdkFtmprotocolFtmProtocol_restartTransmissionFromFirstSegmentPacket(self);
}

- (IOSByteArray *)getPacketDataWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)byteArrayInputStream
                                                      withInt:(jint)packetDataLength {
  return ComStSt25sdkFtmprotocolFtmProtocol_getPacketDataWithJavaIoByteArrayInputStream_withInt_(self, byteArrayInputStream, packetDataLength);
}

- (IOSByteArray *)preparePacketWithBoolean:(jboolean)sendPacketLength
                               withBoolean:(jboolean)segmentStart
                               withBoolean:(jboolean)segmentEnd
                                  withByte:(jbyte)packetPosition
                             withByteArray:(IOSByteArray *)packetData
                                   withInt:(jint)totalDataLength {
  return ComStSt25sdkFtmprotocolFtmProtocol_preparePacketWithBoolean_withBoolean_withBoolean_withByte_withByteArray_withInt_(self, sendPacketLength, segmentStart, segmentEnd, packetPosition, packetData, totalDataLength);
}

- (void)sendPacketWithByteArray:(IOSByteArray *)packet
                    withBoolean:(jboolean)segmentStart
                    withBoolean:(jboolean)segmentMiddle
                    withBoolean:(jboolean)segmentEnd {
  ComStSt25sdkFtmprotocolFtmProtocol_sendPacketWithByteArray_withBoolean_withBoolean_withBoolean_(self, packet, segmentStart, segmentMiddle, segmentEnd);
}

- (void)resendPacket {
  ComStSt25sdkFtmprotocolFtmProtocol_resendPacket(self);
}

- (void)waitForAcknowledge {
  ComStSt25sdkFtmprotocolFtmProtocol_waitForAcknowledge(self);
}

- (void)processAcknowledgeResponseWithByteArray:(IOSByteArray *)ackData {
  ComStSt25sdkFtmprotocolFtmProtocol_processAcknowledgeResponseWithByteArray_(self, ackData);
}

- (jbyte)readDynamicRegisterWithInt:(jint)configId
                           withByte:(jbyte)flag {
  ComStSt25sdkFtmprotocolFtmProtocol_saveTimeOfLastNfcCommand(self);
  IOSByteArray *response = ComStSt25sdkFtmprotocolFtmProtocol_readDynConfigWithInt_withByte_(self, configId, flag);
  if ((response != nil) && (((IOSByteArray *) nil_chk(response))->size_ == 2)) {
    jbyte registerValue = IOSByteArray_Get(nil_chk(response), 1);
    if (configId == ComStSt25sdkType5St25dvST25DVTag_REGISTER_DYN_MB_CTRL_ADDRESS) {
      ComStSt25sdkFtmprotocolFtmProtocol_printMBControlDynRegisterWithByte_(self, registerValue);
    }
    return registerValue;
  }
  else {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

- (void)printMBControlDynRegisterWithByte:(jbyte)registerValue {
  ComStSt25sdkFtmprotocolFtmProtocol_printMBControlDynRegisterWithByte_(self, registerValue);
}

- (void)printControlByteWithByte:(jbyte)controlByte {
  ComStSt25sdkFtmprotocolFtmProtocol_printControlByteWithByte_(self, controlByte);
}

+ (jboolean)isMailboxEnabledWithByte:(jbyte)mbCtrlDynRegisterValue {
  return ComStSt25sdkFtmprotocolFtmProtocol_isMailboxEnabledWithByte_(mbCtrlDynRegisterValue);
}

+ (jboolean)hasHostPutMsgWithByte:(jbyte)mbCtrlDynRegisterValue {
  return ComStSt25sdkFtmprotocolFtmProtocol_hasHostPutMsgWithByte_(mbCtrlDynRegisterValue);
}

+ (jboolean)hasRFPutMsgWithByte:(jbyte)mbCtrlDynRegisterValue {
  return ComStSt25sdkFtmprotocolFtmProtocol_hasRFPutMsgWithByte_(mbCtrlDynRegisterValue);
}

- (jint)getCurrentPacketNumber {
  return mCurrentPacketNumber_;
}

- (void)setFtmProtocolHookWithComStSt25sdkFtmprotocolFtmProtocol_FtmProtocolHook:(id<ComStSt25sdkFtmprotocolFtmProtocol_FtmProtocolHook>)ftmProtocolHook {
  mFtmProtocolHook_ = ftmProtocolHook;
}

- (void)notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint:(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)testPoint {
  ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, testPoint);
}

- (void)notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint:(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)testPoint
                                                          withByteArray:(IOSByteArray *)arg {
  ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_withByteArray_(self, testPoint, arg);
}

- (IOSByteArray *)readMailboxMessageWithInt:(jint)mbAddress
                                    withInt:(jint)size
                                   withByte:(jbyte)flag {
  return ComStSt25sdkFtmprotocolFtmProtocol_readMailboxMessageWithInt_withInt_withByte_(self, mbAddress, size, flag);
}

- (jbyte)writeMailboxMessageWithInt:(jint)size
                      withByteArray:(IOSByteArray *)buffer
                           withByte:(jbyte)flag {
  return ComStSt25sdkFtmprotocolFtmProtocol_writeMailboxMessageWithInt_withByteArray_withByte_(self, size, buffer, flag);
}

- (IOSByteArray *)readDynConfigWithInt:(jint)configId
                              withByte:(jbyte)flag {
  return ComStSt25sdkFtmprotocolFtmProtocol_readDynConfigWithInt_withByte_(self, configId, flag);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 3, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 13, 10, -1, -1, -1 },
    { NULL, "[B", 0x1, 14, 15, 16, -1, -1, -1 },
    { NULL, "[B", 0x1, 14, 17, 16, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, 10, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 30, 10, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 5, 32, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, 10, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 35, 36, 10, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 37, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "[B", 0x2, 38, 39, 10, -1, -1, -1 },
    { NULL, "[B", 0x2, 40, 41, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 43, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 45, 8, -1, -1, -1 },
    { NULL, "B", 0x1, 46, 47, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 34, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 50, 34, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 51, 34, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 52, 34, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 56, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 57, 10, -1, -1, -1 },
    { NULL, "[B", 0x2, 58, 59, 10, -1, -1, -1 },
    { NULL, "B", 0x2, 60, 61, 10, -1, -1, -1 },
    { NULL, "[B", 0x2, 62, 47, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkType5St25dvST25DVTag:);
  methods[1].selector = @selector(setTagWithComStSt25sdkType5St25dvST25DVTag:);
  methods[2].selector = @selector(stopFtmThread);
  methods[3].selector = @selector(cancelCurrentTransfer);
  methods[4].selector = @selector(pauseCurrentTransfer);
  methods[5].selector = @selector(resumeCurrentTransfer);
  methods[6].selector = @selector(setNbrOfRetriesInCaseOfErrorWithInt:);
  methods[7].selector = @selector(getFastCommandsUsage);
  methods[8].selector = @selector(setFastCommandUsageWithBoolean:);
  methods[9].selector = @selector(sleepInMsWithLong:);
  methods[10].selector = @selector(setSegmentLengthWithInt:);
  methods[11].selector = @selector(sendFtmDataWithByteArray:withBoolean:withBoolean:withComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener:withComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener:withInt:);
  methods[12].selector = @selector(sendFtmDataWithByteArray:withBoolean:withBoolean:withComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener:withComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener:withInt:withByte:);
  methods[13].selector = @selector(sendFtmDataAndWaitForCompletionWithByteArray:withBoolean:withBoolean:withComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener:withInt:);
  methods[14].selector = @selector(sendFtmDataAndWaitForCompletionWithByteArray:withBoolean:withBoolean:withComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener:withInt:withByte:);
  methods[15].selector = @selector(getMaxTransmissionSize);
  methods[16].selector = @selector(setMaxTransmissionSize);
  methods[17].selector = @selector(handleFatalErrorWithNSString:);
  methods[18].selector = @selector(finalizeTransferWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus:withByteArray:);
  methods[19].selector = @selector(createThread);
  methods[20].selector = @selector(receiveDataWithComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener:);
  methods[21].selector = @selector(receiveData);
  methods[22].selector = @selector(setStateWithComStSt25sdkFtmprotocolFtmProtocol_State:);
  methods[23].selector = @selector(isMailboxAvailableForReading);
  methods[24].selector = @selector(resetTimeOfFirstError);
  methods[25].selector = @selector(saveTimeOfLastNfcCommand);
  methods[26].selector = @selector(setMinTimeInMsBetweenSendCmdsWithLong:);
  methods[27].selector = @selector(setMinTimeInMsBetweenReceiveCmdsWithLong:);
  methods[28].selector = @selector(setMinTimeInMsWhenWaitingAckWithLong:);
  methods[29].selector = @selector(sleepBetweenSendCmds);
  methods[30].selector = @selector(sleepBetweenReceiveCmds);
  methods[31].selector = @selector(sleepWhenWaitingForAck);
  methods[32].selector = @selector(getTimeSinceFirstError);
  methods[33].selector = @selector(receiveNextPacket);
  methods[34].selector = @selector(checkConsistencyWithByte:withBoolean:withBoolean:);
  methods[35].selector = @selector(checkIfReceptionCompleted);
  methods[36].selector = @selector(checkSegmentCrcWithBoolean:);
  methods[37].selector = @selector(sendSegmentStatusWithByte:);
  methods[38].selector = @selector(sendAcknowledge);
  methods[39].selector = @selector(getReceivedDataLengthWithInt:withBoolean:withBoolean:);
  methods[40].selector = @selector(updateTransmissionProgress);
  methods[41].selector = @selector(updateReceptionProgress);
  methods[42].selector = @selector(getMaxTransmissionSegmentDataLength);
  methods[43].selector = @selector(sendNextPacket);
  methods[44].selector = @selector(sendNextSegmentPacket);
  methods[45].selector = @selector(restartTransmissionFromFirstSegmentPacket);
  methods[46].selector = @selector(getPacketDataWithJavaIoByteArrayInputStream:withInt:);
  methods[47].selector = @selector(preparePacketWithBoolean:withBoolean:withBoolean:withByte:withByteArray:withInt:);
  methods[48].selector = @selector(sendPacketWithByteArray:withBoolean:withBoolean:withBoolean:);
  methods[49].selector = @selector(resendPacket);
  methods[50].selector = @selector(waitForAcknowledge);
  methods[51].selector = @selector(processAcknowledgeResponseWithByteArray:);
  methods[52].selector = @selector(readDynamicRegisterWithInt:withByte:);
  methods[53].selector = @selector(printMBControlDynRegisterWithByte:);
  methods[54].selector = @selector(printControlByteWithByte:);
  methods[55].selector = @selector(isMailboxEnabledWithByte:);
  methods[56].selector = @selector(hasHostPutMsgWithByte:);
  methods[57].selector = @selector(hasRFPutMsgWithByte:);
  methods[58].selector = @selector(getCurrentPacketNumber);
  methods[59].selector = @selector(setFtmProtocolHookWithComStSt25sdkFtmprotocolFtmProtocol_FtmProtocolHook:);
  methods[60].selector = @selector(notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint:);
  methods[61].selector = @selector(notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint:withByteArray:);
  methods[62].selector = @selector(readMailboxMessageWithInt:withInt:withByte:);
  methods[63].selector = @selector(writeMailboxMessageWithInt:withByteArray:withByte:);
  methods[64].selector = @selector(readDynConfigWithInt:withByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_NUMBER_OF_PACKETS_PER_SEGMENT", "I", .constantValue.asInt = ComStSt25sdkFtmprotocolFtmProtocol_DEFAULT_NUMBER_OF_PACKETS_PER_SEGMENT, 0x19, -1, -1, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 63, -1, -1 },
    { "mST25DVTag_", "LComStSt25sdkType5St25dvST25DVTag;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mUseAddressedMode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFlag_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFtmProtocolHook_", "LComStSt25sdkFtmprotocolFtmProtocol_FtmProtocolHook;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "SEGMENT_OK", "B", .constantValue.asChar = ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_OK, 0x1a, -1, -1, -1, -1 },
    { "SEGMENT_ERROR", "B", .constantValue.asChar = ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_ERROR, 0x1a, -1, -1, -1, -1 },
    { "mState_", "LComStSt25sdkFtmprotocolFtmProtocol_State;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ftmSemaphore_", "LJavaUtilConcurrentSemaphore;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFtmTheadRunning_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNbrOfPacketsPerSegment_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAILBOX_SIZE", "I", .constantValue.asInt = ComStSt25sdkFtmprotocolFtmProtocol_MAILBOX_SIZE, 0x1a, -1, -1, -1, -1 },
    { "mMaxTransceiveSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxTransmissionSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "WRITE_MSG_NFC_CMD_HEADER_LENGTH_FOR_ADDRESSED_CMD", "I", .constantValue.asInt = ComStSt25sdkFtmprotocolFtmProtocol_WRITE_MSG_NFC_CMD_HEADER_LENGTH_FOR_ADDRESSED_CMD, 0x1a, -1, -1, -1, -1 },
    { "WRITE_MSG_NFC_CMD_HEADER_LENGTH_FOR_NON_ADDRESSED_CMD", "I", .constantValue.asInt = ComStSt25sdkFtmprotocolFtmProtocol_WRITE_MSG_NFC_CMD_HEADER_LENGTH_FOR_NON_ADDRESSED_CMD, 0x1a, -1, -1, -1, -1 },
    { "CONTROL_BYTE_FIELD_LENGTH", "I", .constantValue.asInt = ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "PACKET_LENGTH_FIELD_LENGTH", "I", .constantValue.asInt = ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "TOTAL_LENGTH_FIELD_LENGTH", "I", .constantValue.asInt = ComStSt25sdkFtmprotocolFtmProtocol_TOTAL_LENGTH_FIELD_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "CRC_FIELD_LENGTH", "I", .constantValue.asInt = ComStSt25sdkFtmprotocolFtmProtocol_CRC_FIELD_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "PACKET_LENGTH_FIELD_PRESENT", "B", .constantValue.asChar = ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_PRESENT, 0x1a, -1, -1, -1, -1 },
    { "SEGMENT_START", "B", .constantValue.asChar = ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_START, 0x1a, -1, -1, -1, -1 },
    { "SEGMENT_END", "B", .constantValue.asChar = ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_END, 0x1a, -1, -1, -1, -1 },
    { "PACKET_POSITION_OFFSET", "B", .constantValue.asChar = ComStSt25sdkFtmprotocolFtmProtocol_PACKET_POSITION_OFFSET, 0x1a, -1, -1, -1, -1 },
    { "SINGLE_PACKET", "B", .constantValue.asChar = ComStSt25sdkFtmprotocolFtmProtocol_SINGLE_PACKET, 0x1a, -1, -1, -1, -1 },
    { "FIRST_PACKET", "B", .constantValue.asChar = ComStSt25sdkFtmprotocolFtmProtocol_FIRST_PACKET, 0x1a, -1, -1, -1, -1 },
    { "MIDDLE_PACKET", "B", .constantValue.asChar = ComStSt25sdkFtmprotocolFtmProtocol_MIDDLE_PACKET, 0x1a, -1, -1, -1, -1 },
    { "END_PACKET", "B", .constantValue.asChar = ComStSt25sdkFtmprotocolFtmProtocol_END_PACKET, 0x1a, -1, -1, -1, -1 },
    { "PARITY", "B", .constantValue.asChar = ComStSt25sdkFtmprotocolFtmProtocol_PARITY, 0x1a, -1, -1, -1, -1 },
    { "PACKET_BELONGING_TO_A_SEGMENT", "B", .constantValue.asChar = ComStSt25sdkFtmprotocolFtmProtocol_PACKET_BELONGING_TO_A_SEGMENT, 0x1a, -1, -1, -1, -1 },
    { "mNbrOfRetriesInCaseOfError_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mUseFastCommands_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTimeOutInMs_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTimeOfFirstError_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSegmentReceptionCrcError_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNumberOfTransmissionRetries_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRestartedFromFirstSegmentPacket_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransferProgressionListener_", "LComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransferCompletionListener_", "LComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSleepTimeInMsWhenPaused_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTimeOfLastNfcCommand_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMinTimeInMsBetweenSendCmds_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMinTimeInMsBetweenReceiveCmds_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMinTimeInMsWhenWaitingAck_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCancelCurrentTransfer_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPauseCurrentTransfer_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNumberOfBytesToSend_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSegmentDataLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSegmentCrc_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsErrorControlNeeded_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsResponseExpected_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCurrentPacketNumber_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCurrentSegmentNumber_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransmissionByteArrayInputStream_", "LJavaIoByteArrayInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransmissionSegmentInputStream_", "LJavaIoByteArrayInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStartSegmentPacketNumber_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastPacket_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransferDone_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFtmReceivedData_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFtmTransferStatus_", "LComStSt25sdkFtmprotocolFtmProtocol_TransferStatus;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "WAIT_FOR_EVER", "I", .constantValue.asInt = ComStSt25sdkFtmprotocolFtmProtocol_WAIT_FOR_EVER, 0x1a, -1, -1, -1, -1 },
    { "mReceptionTotalLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSegmentStatus_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mReceptionWithAck_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mReceptionStatus_", "LComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mReceptionOutputStream_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mReceptionSegmentOutputStream_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkType5St25dvST25DVTag;", "setTag", "setNbrOfRetriesInCaseOfError", "I", "setFastCommandUsage", "Z", "sleepInMs", "J", "LJavaLangInterruptedException;", "setSegmentLength", "LComStSt25sdkSTException;", "sendFtmData", "[BZZLComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener;LComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener;I", "[BZZLComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener;LComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener;IB", "sendFtmDataAndWaitForCompletion", "[BZZLComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener;I", "LComStSt25sdkSTException;LJavaLangInterruptedException;", "[BZZLComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener;IB", "handleFatalError", "LNSString;", "finalizeTransfer", "LComStSt25sdkFtmprotocolFtmProtocol_TransferStatus;[B", "receiveData", "LComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener;", "setState", "LComStSt25sdkFtmprotocolFtmProtocol_State;", "setMinTimeInMsBetweenSendCmds", "setMinTimeInMsBetweenReceiveCmds", "setMinTimeInMsWhenWaitingAck", "checkConsistency", "BZZ", "checkSegmentCrc", "LComStSt25sdkSTException;LJavaIoIOException;LJavaLangInterruptedException;", "sendSegmentStatus", "B", "getReceivedDataLength", "IZZ", "LJavaLangInterruptedException;LComStSt25sdkSTException;", "getPacketData", "LJavaIoByteArrayInputStream;I", "preparePacket", "ZZZB[BI", "sendPacket", "[BZZZ", "processAcknowledgeResponse", "[B", "readDynamicRegister", "IB", "printMBControlDynRegister", "printControlByte", "isMailboxEnabled", "hasHostPutMsg", "hasRFPutMsg", "setFtmProtocolHook", "LComStSt25sdkFtmprotocolFtmProtocol_FtmProtocolHook;", "notifyTestPoint", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;[B", "readMailboxMessage", "IIB", "writeMailboxMessage", "I[BB", "readDynConfig", &ComStSt25sdkFtmprotocolFtmProtocol_TAG, "LComStSt25sdkFtmprotocolFtmProtocol_TransferStatus;LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;LComStSt25sdkFtmprotocolFtmProtocol_FtmProtocolHook;LComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener;LComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener;LComStSt25sdkFtmprotocolFtmProtocol_State;LComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus;" };
  static const J2ObjcClassInfo _ComStSt25sdkFtmprotocolFtmProtocol = { "FtmProtocol", "com.st.st25sdk.ftmprotocol", ptrTable, methods, fields, 7, 0x1, 65, 68, -1, 64, -1, -1, -1 };
  return &_ComStSt25sdkFtmprotocolFtmProtocol;
}

@end

void ComStSt25sdkFtmprotocolFtmProtocol_initWithComStSt25sdkType5St25dvST25DVTag_(ComStSt25sdkFtmprotocolFtmProtocol *self, ComStSt25sdkType5St25dvST25DVTag *st25DVTag) {
  NSObject_init(self);
  self->mUseAddressedMode_ = true;
  self->mFlag_ = ComStSt25sdkCommandIso15693Protocol_HIGH_DATA_RATE_MODE | ComStSt25sdkCommandIso15693Protocol_ADDRESSED_MODE;
  self->mState_ = JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, IDLE);
  self->ftmSemaphore_ = new_JavaUtilConcurrentSemaphore_initWithInt_(0);
  self->mNbrOfPacketsPerSegment_ = ComStSt25sdkFtmprotocolFtmProtocol_DEFAULT_NUMBER_OF_PACKETS_PER_SEGMENT;
  self->mNbrOfRetriesInCaseOfError_ = 50;
  self->mUseFastCommands_ = false;
  self->mTimeOutInMs_ = 5000;
  self->mTimeOfFirstError_ = 0;
  self->mRestartedFromFirstSegmentPacket_ = false;
  self->mSleepTimeInMsWhenPaused_ = 0;
  self->mMinTimeInMsBetweenSendCmds_ = 100;
  self->mMinTimeInMsBetweenReceiveCmds_ = 100;
  self->mMinTimeInMsWhenWaitingAck_ = 10;
  self->mCancelCurrentTransfer_ = false;
  self->mPauseCurrentTransfer_ = false;
  self->mReceptionOutputStream_ = new_JavaIoByteArrayOutputStream_init();
  self->mReceptionSegmentOutputStream_ = new_JavaIoByteArrayOutputStream_init();
  self->mST25DVTag_ = st25DVTag;
  ComStSt25sdkFtmprotocolFtmProtocol_setMaxTransmissionSize(self);
  ComStSt25sdkFtmprotocolFtmProtocol_createThread(self);
}

ComStSt25sdkFtmprotocolFtmProtocol *new_ComStSt25sdkFtmprotocolFtmProtocol_initWithComStSt25sdkType5St25dvST25DVTag_(ComStSt25sdkType5St25dvST25DVTag *st25DVTag) {
  J2OBJC_NEW_IMPL(ComStSt25sdkFtmprotocolFtmProtocol, initWithComStSt25sdkType5St25dvST25DVTag_, st25DVTag)
}

ComStSt25sdkFtmprotocolFtmProtocol *create_ComStSt25sdkFtmprotocolFtmProtocol_initWithComStSt25sdkType5St25dvST25DVTag_(ComStSt25sdkType5St25dvST25DVTag *st25DVTag) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkFtmprotocolFtmProtocol, initWithComStSt25sdkType5St25dvST25DVTag_, st25DVTag)
}

void ComStSt25sdkFtmprotocolFtmProtocol_sleepInMsWithLong_(ComStSt25sdkFtmprotocolFtmProtocol *self, jlong millis) {
  if (millis > 0) {
    ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$J$", @"sleep ", millis, @" ms"));
    JavaLangThread_sleepWithLong_(millis);
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_setMaxTransmissionSize(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  if (self->mST25DVTag_ != nil) {
    self->mMaxTransceiveSize_ = [((id<ComStSt25sdkRFReaderInterface>) nil_chk([self->mST25DVTag_ getReaderInterface])) getMaxTransmitLengthInBytes];
    if (self->mUseAddressedMode_) {
      self->mMaxTransmissionSize_ = JavaLangMath_minWithInt_withInt_((self->mMaxTransceiveSize_ - ComStSt25sdkFtmprotocolFtmProtocol_WRITE_MSG_NFC_CMD_HEADER_LENGTH_FOR_ADDRESSED_CMD), ComStSt25sdkFtmprotocolFtmProtocol_MAILBOX_SIZE);
    }
    else {
      self->mMaxTransmissionSize_ = JavaLangMath_minWithInt_withInt_((self->mMaxTransceiveSize_ - ComStSt25sdkFtmprotocolFtmProtocol_WRITE_MSG_NFC_CMD_HEADER_LENGTH_FOR_NON_ADDRESSED_CMD), ComStSt25sdkFtmprotocolFtmProtocol_MAILBOX_SIZE);
    }
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(ComStSt25sdkFtmprotocolFtmProtocol *self, NSString *errorMsg) {
  ComStSt25sdkSTLog_eWithNSString_(errorMsg);
  ComStSt25sdkSTLog_eWithNSString_(@"Communication cancelled! Going back to IDLE state");
  ComStSt25sdkFtmprotocolFtmProtocol_finalizeTransferWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_withByteArray_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_FAILED), nil);
}

void ComStSt25sdkFtmprotocolFtmProtocol_finalizeTransferWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_withByteArray_(ComStSt25sdkFtmprotocolFtmProtocol *self, ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *transferStatus, IOSByteArray *response) {
  ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, IDLE));
  if (self->mTransferCompletionListener_ != nil) {
    [self->mTransferCompletionListener_ transferDoneWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus:transferStatus withByteArray:response];
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_createThread(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  [new_JavaLangThread_initWithJavaLangRunnable_(new_ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1_initWithComStSt25sdkFtmprotocolFtmProtocol_(self)) start];
}

void ComStSt25sdkFtmprotocolFtmProtocol_receiveData(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  if (self->mState_ != JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, IDLE)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
  ComStSt25sdkSTLog_iWithNSString_(@"receiveData");
  self->mCurrentPacketNumber_ = 0;
  self->mCurrentSegmentNumber_ = 0;
  [((JavaIoByteArrayOutputStream *) nil_chk(self->mReceptionOutputStream_)) reset];
  [((JavaIoByteArrayOutputStream *) nil_chk(self->mReceptionSegmentOutputStream_)) reset];
  self->mReceptionWithAck_ = false;
  self->mReceptionStatus_ = JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_FIRST_PACKET);
  ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, RECEIVE_PACKET));
  [((JavaUtilConcurrentSemaphore *) nil_chk(self->ftmSemaphore_)) release__];
}

void ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(ComStSt25sdkFtmprotocolFtmProtocol *self, ComStSt25sdkFtmprotocolFtmProtocol_State *newState) {
  self->mState_ = newState;
  ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$@", @"mState = ", self->mState_));
}

jboolean ComStSt25sdkFtmprotocolFtmProtocol_isMailboxAvailableForReading(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  @try {
    ComStSt25sdkSTLog_iWithNSString_(@"isMailboxAvailableForReading");
    ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, CHECKING_IF_MB_AVAILABLE_FOR_READING));
    jbyte mbCtrlDynRegisterValue = [self readDynamicRegisterWithInt:ComStSt25sdkType5St25dvST25DVTag_REGISTER_DYN_MB_CTRL_ADDRESS withByte:self->mFlag_];
    if (!ComStSt25sdkFtmprotocolFtmProtocol_isMailboxEnabledWithByte_(mbCtrlDynRegisterValue)) {
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error! Mailbox not enabled!");
      return false;
    }
    if (ComStSt25sdkFtmprotocolFtmProtocol_hasRFPutMsgWithByte_(mbCtrlDynRegisterValue)) {
      return false;
    }
    if (ComStSt25sdkFtmprotocolFtmProtocol_hasHostPutMsgWithByte_(mbCtrlDynRegisterValue)) {
      ComStSt25sdkSTLog_iWithNSString_(@"Some data are available for reading");
      return true;
    }
    else {
      return false;
    }
  }
  @catch (ComStSt25sdkSTException *e) {
    switch ([[e getError] ordinal]) {
      case ComStSt25sdkSTException_STExceptionCode_Enum_TAG_NOT_IN_THE_FIELD:
      case ComStSt25sdkSTException_STExceptionCode_Enum_RFREADER_NO_RESPONSE:
      ComStSt25sdkSTLog_wWithNSString_(@"Error in isMailboxAvailableForReading: TAG_NOT_IN_THE_FIELD");
      break;
      case ComStSt25sdkSTException_STExceptionCode_Enum_CMD_FAILED:
      ComStSt25sdkSTLog_wWithNSString_(@"Error in isMailboxAvailableForReading: CMD_FAILED");
      break;
      default:
      [e printStackTrace];
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Fatal error in isMailboxAvailableForReading()");
      break;
    }
    return false;
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_saveTimeOfLastNfcCommand(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  self->mTimeOfLastNfcCommand_ = [((JavaUtilCalendar *) nil_chk(JavaUtilCalendar_getInstance())) getTimeInMillis];
}

void ComStSt25sdkFtmprotocolFtmProtocol_sleepBetweenSendCmds(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  jlong currentTime = [((JavaUtilCalendar *) nil_chk(JavaUtilCalendar_getInstance())) getTimeInMillis];
  jlong deltaInMs = (currentTime - self->mTimeOfLastNfcCommand_);
  if (deltaInMs < self->mMinTimeInMsBetweenSendCmds_) {
    jlong sleepTime = self->mMinTimeInMsBetweenSendCmds_ - deltaInMs;
    ComStSt25sdkFtmprotocolFtmProtocol_sleepInMsWithLong_(self, sleepTime);
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_sleepBetweenReceiveCmds(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  jlong currentTime = [((JavaUtilCalendar *) nil_chk(JavaUtilCalendar_getInstance())) getTimeInMillis];
  jlong deltaInMs = (currentTime - self->mTimeOfLastNfcCommand_);
  if (deltaInMs < self->mMinTimeInMsBetweenReceiveCmds_) {
    jlong sleepTime = self->mMinTimeInMsBetweenReceiveCmds_ - deltaInMs;
    ComStSt25sdkFtmprotocolFtmProtocol_sleepInMsWithLong_(self, sleepTime);
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_sleepWhenWaitingForAck(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  jlong currentTime = [((JavaUtilCalendar *) nil_chk(JavaUtilCalendar_getInstance())) getTimeInMillis];
  jlong deltaInMs = (currentTime - self->mTimeOfLastNfcCommand_);
  if (deltaInMs < self->mMinTimeInMsWhenWaitingAck_) {
    jlong sleepTime = self->mMinTimeInMsWhenWaitingAck_ - deltaInMs;
    ComStSt25sdkFtmprotocolFtmProtocol_sleepInMsWithLong_(self, sleepTime);
  }
}

jlong ComStSt25sdkFtmprotocolFtmProtocol_getTimeSinceFirstError(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  jlong currentTime = [((JavaUtilCalendar *) nil_chk(JavaUtilCalendar_getInstance())) getTimeInMillis];
  if (self->mTimeOfFirstError_ != 0) {
    jlong deltaInMs = (currentTime - self->mTimeOfFirstError_);
    ComStSt25sdkSTLog_iWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"deltaInMs = %d", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(deltaInMs) } count:1 type:NSObject_class_()]));
    return deltaInMs;
  }
  else {
    self->mTimeOfFirstError_ = currentTime;
    return 0;
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_receiveNextPacket(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  @try {
    jboolean isPacketDataLengthFieldPresent;
    jboolean isTotalLengthFieldPresent;
    jboolean segmentStart;
    jboolean segmentMiddle;
    jboolean segmentEnd;
    jboolean oddSegmentReceived;
    jbyte packetPosition;
    jint packetLength;
    ComStSt25sdkSTLog_iWithNSString_(@"receiveNextPacket");
    ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_READING_PACKET));
    ComStSt25sdkFtmprotocolFtmProtocol_saveTimeOfLastNfcCommand(self);
    IOSByteArray *receivedData = ComStSt25sdkFtmprotocolFtmProtocol_readMailboxMessageWithInt_withInt_withByte_(self, 0, 0, self->mFlag_);
    ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I$I$$", @"<== receivedData (", ((IOSByteArray *) nil_chk(receivedData))->size_, @" Bytes) for Segment ", self->mCurrentSegmentNumber_, @": ", ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(receivedData)));
    [self resetTimeOfFirstError];
    self->mCurrentPacketNumber_++;
    JavaIoByteArrayInputStream *byteArrayInputStream = new_JavaIoByteArrayInputStream_initWithByteArray_(receivedData);
    jbyte statusOfRfCommand = ComStSt25sdkHelper_readNextByteOfByteArrayInputStreamWithJavaIoByteArrayInputStream_(byteArrayInputStream);
    if (statusOfRfCommand != (jint) 0x00) {
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error! RF Cmd failed!");
      return;
    }
    packetLength = [byteArrayInputStream available] - 1;
    jbyte controlByte = ComStSt25sdkHelper_readNextByteOfByteArrayInputStreamWithJavaIoByteArrayInputStream_(byteArrayInputStream);
    isPacketDataLengthFieldPresent = ((controlByte & ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_PRESENT) == ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_PRESENT);
    segmentStart = ((controlByte & ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_START) == ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_START);
    segmentEnd = ((controlByte & ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_END) == ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_END);
    segmentMiddle = (!segmentStart && !segmentEnd);
    oddSegmentReceived = ((controlByte & ComStSt25sdkFtmprotocolFtmProtocol_PARITY) == ComStSt25sdkFtmprotocolFtmProtocol_PARITY);
    packetPosition = (jbyte) (JreRShift32((controlByte & (jint) 0x0C), ComStSt25sdkFtmprotocolFtmProtocol_PACKET_POSITION_OFFSET));
    isTotalLengthFieldPresent = (packetPosition == ComStSt25sdkFtmprotocolFtmProtocol_FIRST_PACKET);
    ComStSt25sdkFtmprotocolFtmProtocol_printControlByteWithByte_(self, controlByte);
    if (oddSegmentReceived) {
      ComStSt25sdkSTLog_iWithNSString_(@"Odd Segment");
    }
    else {
      ComStSt25sdkSTLog_iWithNSString_(@"Even Segment");
    }
    if (segmentStart) ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_SEGMENT_START));
    if (segmentMiddle) ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_SEGMENT_MIDDLE));
    if (segmentEnd) ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_SEGMENT_END));
    ComStSt25sdkFtmprotocolFtmProtocol_checkConsistencyWithByte_withBoolean_withBoolean_(self, packetPosition, segmentStart, segmentEnd);
    if (self->mReceptionStatus_ == JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_RETRANSMISSION)) {
      ComStSt25sdkSTLog_wWithNSString_(@"WAITING_FOR_RETRANSMISSION: Packet ignored");
      return;
    }
    if (isPacketDataLengthFieldPresent) {
      jbyte packetDataLength = ComStSt25sdkHelper_readNextByteOfByteArrayInputStreamWithJavaIoByteArrayInputStream_(byteArrayInputStream);
    }
    if (packetPosition == ComStSt25sdkFtmprotocolFtmProtocol_FIRST_PACKET) {
      IOSByteArray *totalLengthData = [IOSByteArray newArrayWithLength:4];
      *IOSByteArray_GetRef(totalLengthData, 0) = ComStSt25sdkHelper_readNextByteOfByteArrayInputStreamWithJavaIoByteArrayInputStream_(byteArrayInputStream);
      *IOSByteArray_GetRef(totalLengthData, 1) = ComStSt25sdkHelper_readNextByteOfByteArrayInputStreamWithJavaIoByteArrayInputStream_(byteArrayInputStream);
      *IOSByteArray_GetRef(totalLengthData, 2) = ComStSt25sdkHelper_readNextByteOfByteArrayInputStreamWithJavaIoByteArrayInputStream_(byteArrayInputStream);
      *IOSByteArray_GetRef(totalLengthData, 3) = ComStSt25sdkHelper_readNextByteOfByteArrayInputStreamWithJavaIoByteArrayInputStream_(byteArrayInputStream);
      self->mReceptionTotalLength_ = ComStSt25sdkHelper_convert4BytesHexaFormatToIntWithByteArray_(totalLengthData);
      ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I", @"CmdTotalLength: ", self->mReceptionTotalLength_));
    }
    if (segmentStart) {
      [((JavaIoByteArrayOutputStream *) nil_chk(self->mReceptionSegmentOutputStream_)) reset];
      self->mReceptionWithAck_ = true;
    }
    jint dataLength = ComStSt25sdkFtmprotocolFtmProtocol_getReceivedDataLengthWithInt_withBoolean_withBoolean_(self, packetLength, isPacketDataLengthFieldPresent, isTotalLengthFieldPresent);
    ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I", @"dataLength: ", dataLength));
    IOSByteArray *data = [IOSByteArray newArrayWithLength:dataLength];
    jint nbrOfBytesRead = [byteArrayInputStream readWithByteArray:data withInt:0 withInt:data->size_];
    if (nbrOfBytesRead != dataLength) {
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error! Incorrect number of data");
      return;
    }
    if (packetPosition == ComStSt25sdkFtmprotocolFtmProtocol_SINGLE_PACKET) {
      if (segmentEnd) {
        self->mReceptionTotalLength_ = dataLength - ComStSt25sdkFtmprotocolFtmProtocol_CRC_FIELD_LENGTH;
      }
      else {
        self->mReceptionTotalLength_ = dataLength;
      }
      ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I", @"Cmd Total Length: ", self->mReceptionTotalLength_));
      if (self->mReceptionTotalLength_ <= 0) {
        ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Invalid mCmdTotalLength!");
        return;
      }
    }
    if (self->mReceptionWithAck_) {
      [((JavaIoByteArrayOutputStream *) nil_chk(self->mReceptionSegmentOutputStream_)) writeWithByteArray:data];
      if (segmentEnd) {
        ComStSt25sdkFtmprotocolFtmProtocol_checkSegmentCrcWithBoolean_(self, oddSegmentReceived);
      }
    }
    else {
      [((JavaIoByteArrayOutputStream *) nil_chk(self->mReceptionOutputStream_)) writeWithByteArray:data];
      ComStSt25sdkFtmprotocolFtmProtocol_checkIfReceptionCompleted(self);
    }
    ComStSt25sdkFtmprotocolFtmProtocol_updateReceptionProgress(self);
  }
  @catch (ComStSt25sdkSTException *e) {
    switch ([[e getError] ordinal]) {
      case ComStSt25sdkSTException_STExceptionCode_Enum_TAG_NOT_IN_THE_FIELD:
      case ComStSt25sdkSTException_STExceptionCode_Enum_RFREADER_NO_RESPONSE:
      ComStSt25sdkSTLog_wWithNSString_(@"Error in readNextPacket: TAG_NOT_IN_THE_FIELD");
      break;
      case ComStSt25sdkSTException_STExceptionCode_Enum_CMD_FAILED:
      ComStSt25sdkSTLog_wWithNSString_(@"Error in readNextPacket: CMD_FAILED");
      break;
      default:
      [e printStackTrace];
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Fatal error in readNextPacket()");
      break;
    }
    if (ComStSt25sdkFtmprotocolFtmProtocol_getTimeSinceFirstError(self) > self->mTimeOutInMs_) {
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error! Timeout when receiving data");
    }
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
    ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error while computing CRC!");
  }
  @catch (JavaLangInterruptedException *e) {
    [e printStackTrace];
    ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Sleep interrupted!");
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_checkConsistencyWithByte_withBoolean_withBoolean_(ComStSt25sdkFtmprotocolFtmProtocol *self, jbyte packetPosition, jboolean segmentStart, jboolean segmentEnd) {
  ComStSt25sdkSTLog_iWithNSString_(@"checkConsistency");
  switch ([self->mReceptionStatus_ ordinal]) {
    case ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_Enum_WAITING_FOR_FIRST_PACKET:
    switch (packetPosition) {
      case ComStSt25sdkFtmprotocolFtmProtocol_FIRST_PACKET:
      case ComStSt25sdkFtmprotocolFtmProtocol_SINGLE_PACKET:
      if (segmentStart) {
        self->mReceptionStatus_ = JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_NEXT_SEGMENT_PACKET);
      }
      else {
        self->mReceptionStatus_ = JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_PACKETS_WITHOUT_ACK);
      }
      break;
      case ComStSt25sdkFtmprotocolFtmProtocol_MIDDLE_PACKET:
      case ComStSt25sdkFtmprotocolFtmProtocol_END_PACKET:
      ComStSt25sdkSTLog_eWithNSString_(@"Invalid First packet!");
      self->mReceptionStatus_ = JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_RETRANSMISSION);
      break;
      default:
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Invalid enum value");
      break;
    }
    break;
    case ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_Enum_WAITING_FOR_FIRST_SEGMENT_PACKET:
    if (segmentStart) {
      self->mReceptionStatus_ = JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_NEXT_SEGMENT_PACKET);
    }
    else {
      ComStSt25sdkSTLog_eWithNSString_(@"Error! Expecting a segmentStart packet!");
      self->mReceptionStatus_ = JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_RETRANSMISSION);
    }
    break;
    case ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_Enum_WAITING_FOR_NEXT_SEGMENT_PACKET:
    break;
    case ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_Enum_WAITING_FOR_RETRANSMISSION:
    if (segmentEnd) {
      ComStSt25sdkFtmprotocolFtmProtocol_sendSegmentStatusWithByte_(self, ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_ERROR);
    }
    if (segmentStart) {
      self->mReceptionStatus_ = JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_NEXT_SEGMENT_PACKET);
    }
    break;
    case ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_Enum_WAITING_FOR_PACKETS_WITHOUT_ACK:
    if (segmentStart || segmentEnd) {
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Received segment packets when not expected!");
    }
    break;
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_checkIfReceptionCompleted(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  if (self->mReceptionStatus_ == JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_RETRANSMISSION)) {
    return;
  }
  ComStSt25sdkSTLog_iWithNSString_(@"checkIfReceptionCompleted");
  jint receivedBytes = [((JavaIoByteArrayOutputStream *) nil_chk(self->mReceptionOutputStream_)) size];
  ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I", @"receivedBytes: ", receivedBytes));
  ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I", @"mCmdTotalLength: ", self->mReceptionTotalLength_));
  if (receivedBytes > self->mReceptionTotalLength_) {
    ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, NSString_java_formatWithNSString_withNSObjectArray_(@"Error! Received more bytes than expected (0x%x vs 0x%x)", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(receivedBytes), JavaLangInteger_valueOfWithInt_(self->mReceptionTotalLength_) } count:2 type:NSObject_class_()]));
    return;
  }
  if (receivedBytes == self->mReceptionTotalLength_) {
    ComStSt25sdkFtmprotocolFtmProtocol_finalizeTransferWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_withByteArray_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_OK), [((JavaIoByteArrayOutputStream *) nil_chk(self->mReceptionOutputStream_)) toByteArray]);
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_checkSegmentCrcWithBoolean_(ComStSt25sdkFtmprotocolFtmProtocol *self, jboolean oddSegmentReceived) {
  if (self->mReceptionStatus_ == JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_RETRANSMISSION)) {
    return;
  }
  ComStSt25sdkSTLog_iWithNSString_(@"checkSegmentCrc");
  IOSByteArray *segmentData = [((JavaIoByteArrayOutputStream *) nil_chk(self->mReceptionSegmentOutputStream_)) toByteArray];
  if (((IOSByteArray *) nil_chk(segmentData))->size_ < 5) {
    ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Invalid segment length!");
    return;
  }
  IOSByteArray *data = [IOSByteArray newArrayWithLength:segmentData->size_ - ComStSt25sdkFtmprotocolFtmProtocol_CRC_FIELD_LENGTH];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(segmentData, 0, data, 0, data->size_);
  IOSByteArray *receivedCrc = [IOSByteArray newArrayWithLength:ComStSt25sdkFtmprotocolFtmProtocol_CRC_FIELD_LENGTH];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(segmentData, data->size_, receivedCrc, 0, receivedCrc->size_);
  IOSByteArray *computedCrc = ComStSt25sdkCrc_computeCrcWithByteArray_(data);
  ComStSt25sdkSTLog_iWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"computedCrc (calculated on %d bytes): %s", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(data->size_), ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(computedCrc) } count:2 type:NSObject_class_()]));
  ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_withByteArray_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, CHECKING_SEGMENT_CRC), computedCrc);
  if (JavaUtilArrays_equalsWithByteArray_withByteArray_(receivedCrc, computedCrc)) {
    jboolean expectingOddSegment = (self->mCurrentSegmentNumber_ % 2) == 1;
    if (expectingOddSegment == oddSegmentReceived) {
      ComStSt25sdkSTLog_iWithNSString_(@"The received segment has the expected parity");
      [((JavaIoByteArrayOutputStream *) nil_chk(self->mReceptionOutputStream_)) writeWithByteArray:data];
      self->mCurrentSegmentNumber_++;
    }
    else {
      ComStSt25sdkSTLog_wWithNSString_(@"The received segment doesn't have the expected parity. Ignore it");
    }
    self->mSegmentReceptionCrcError_ = 0;
    [((JavaIoByteArrayOutputStream *) nil_chk(self->mReceptionSegmentOutputStream_)) reset];
    ComStSt25sdkFtmprotocolFtmProtocol_sendSegmentStatusWithByte_(self, ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_OK);
  }
  else {
    ComStSt25sdkSTLog_eWithNSString_(JreStrcat("$$", @"Invalid CRC! computedCrc = ", ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(computedCrc)));
    ComStSt25sdkFtmprotocolFtmProtocol_sendSegmentStatusWithByte_(self, ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_ERROR);
    self->mSegmentReceptionCrcError_++;
    ComStSt25sdkFtmprotocolFtmProtocol_sleepBetweenReceiveCmds(self);
    if (self->mSegmentReceptionCrcError_ > self->mNbrOfRetriesInCaseOfError_) {
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"CRC error: Reception failed!");
    }
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_sendSegmentStatusWithByte_(ComStSt25sdkFtmprotocolFtmProtocol *self, jbyte segmentStatus) {
  if (segmentStatus == ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_OK) {
    ComStSt25sdkSTLog_iWithNSString_(@"Send SEGMENT_OK");
  }
  else {
    ComStSt25sdkSTLog_iWithNSString_(@"Send SEGMENT_ERROR");
  }
  self->mSegmentStatus_ = segmentStatus;
  ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, SEND_ACK));
}

void ComStSt25sdkFtmprotocolFtmProtocol_sendAcknowledge(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  IOSByteArray *data = [IOSByteArray newArrayWithBytes:(jbyte[]){ self->mSegmentStatus_ } count:1];
  @try {
    ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$$", @"sendAcknowledge: ", (self->mSegmentStatus_ == ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_OK ? @"SEGMENT_OK" : @"SEGMENT_ERROR")));
    ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_ACK));
    ComStSt25sdkFtmprotocolFtmProtocol_saveTimeOfLastNfcCommand(self);
    ComStSt25sdkFtmprotocolFtmProtocol_writeMailboxMessageWithInt_withByteArray_withByte_(self, data->size_, data, self->mFlag_);
    ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_ACK));
    [self resetTimeOfFirstError];
    [((JavaIoByteArrayOutputStream *) nil_chk(self->mReceptionSegmentOutputStream_)) reset];
    ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, RECEIVE_PACKET));
    ComStSt25sdkFtmprotocolFtmProtocol_checkIfReceptionCompleted(self);
  }
  @catch (ComStSt25sdkSTException *e) {
    switch ([[e getError] ordinal]) {
      case ComStSt25sdkSTException_STExceptionCode_Enum_TAG_NOT_IN_THE_FIELD:
      case ComStSt25sdkSTException_STExceptionCode_Enum_RFREADER_NO_RESPONSE:
      case ComStSt25sdkSTException_STExceptionCode_Enum_CMD_FAILED:
      ComStSt25sdkSTLog_wWithNSString_(JreStrcat("$$", @"Error in sendAcknowledge: ", [((ComStSt25sdkSTException_STExceptionCode *) nil_chk([e getError])) description]));
      [((JavaIoByteArrayOutputStream *) nil_chk(self->mReceptionSegmentOutputStream_)) reset];
      ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, RECEIVE_PACKET));
      ComStSt25sdkFtmprotocolFtmProtocol_checkIfReceptionCompleted(self);
      break;
      default:
      [e printStackTrace];
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Fatal error in sendAcknowledge()");
      break;
    }
  }
}

jint ComStSt25sdkFtmprotocolFtmProtocol_getReceivedDataLengthWithInt_withBoolean_withBoolean_(ComStSt25sdkFtmprotocolFtmProtocol *self, jint packetLength, jboolean isPacketDataLengthFieldPresent, jboolean isTotalLengthFieldPresent) {
  ComStSt25sdkSTLog_iWithNSString_(@"getReceivedDataLength");
  jint dataLength = packetLength;
  if (isPacketDataLengthFieldPresent) {
    dataLength -= ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_LENGTH;
  }
  if (isTotalLengthFieldPresent) {
    dataLength -= ComStSt25sdkFtmprotocolFtmProtocol_TOTAL_LENGTH_FIELD_LENGTH;
  }
  if (dataLength <= 0) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
  }
  return dataLength;
}

void ComStSt25sdkFtmprotocolFtmProtocol_updateTransmissionProgress(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  jint remainingBytesInSegment;
  jint segmentDataTransmitted;
  if (self->mIsErrorControlNeeded_) {
    jint remainingBytesInTransmissionStream = [((JavaIoByteArrayInputStream *) nil_chk(self->mTransmissionByteArrayInputStream_)) available];
    if (self->mTransmissionSegmentInputStream_ != nil) {
      remainingBytesInSegment = [self->mTransmissionSegmentInputStream_ available];
      segmentDataTransmitted = self->mSegmentDataLength_ - remainingBytesInSegment;
    }
    else {
      remainingBytesInSegment = 0;
      self->mSegmentDataLength_ = 0;
      segmentDataTransmitted = 0;
    }
    jint acknowledgedBytes = JavaLangMath_maxWithInt_withInt_(0, self->mNumberOfBytesToSend_ - remainingBytesInTransmissionStream - self->mSegmentDataLength_);
    jint transmittedBytes = acknowledgedBytes + segmentDataTransmitted;
    if (self->mTransferProgressionListener_ != nil) {
      [self->mTransferProgressionListener_ transmissionProgressWithInt:transmittedBytes withInt:acknowledgedBytes withInt:self->mNumberOfBytesToSend_];
    }
    if (remainingBytesInTransmissionStream + remainingBytesInSegment == 0) {
      if (self->mIsResponseExpected_) {
        ComStSt25sdkSTLog_wWithNSString_(@"Command transmitted. Wait for the response");
        ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, IDLE));
        @try {
          ComStSt25sdkFtmprotocolFtmProtocol_receiveData(self);
        }
        @catch (ComStSt25sdkSTException *e) {
          [e printStackTrace];
          ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Fatal error in updateTransmissionProgress()");
        }
      }
      else {
        ComStSt25sdkSTLog_wWithNSString_(@"Command transmitted. No response expected so going back to IDLE state");
        ComStSt25sdkFtmprotocolFtmProtocol_finalizeTransferWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_withByteArray_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_OK), nil);
      }
    }
    else {
      ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, PREPARE_PACKET));
    }
  }
  else {
    jint remainingBytes = [((JavaIoByteArrayInputStream *) nil_chk(self->mTransmissionByteArrayInputStream_)) available];
    jint transmittedBytes = self->mNumberOfBytesToSend_ - remainingBytes;
    jint acknowledgedBytes = transmittedBytes;
    if (self->mTransferProgressionListener_ != nil) {
      [self->mTransferProgressionListener_ transmissionProgressWithInt:transmittedBytes withInt:acknowledgedBytes withInt:self->mNumberOfBytesToSend_];
    }
    if (remainingBytes == 0) {
      if (self->mIsResponseExpected_) {
        ComStSt25sdkSTLog_wWithNSString_(@"Command transmitted. Wait for the response");
        ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, IDLE));
        @try {
          ComStSt25sdkFtmprotocolFtmProtocol_receiveData(self);
        }
        @catch (ComStSt25sdkSTException *e) {
          [e printStackTrace];
          ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Fatal error in updateTransmissionProgress()");
        }
      }
      else {
        ComStSt25sdkSTLog_wWithNSString_(@"Command transmitted. No response expected so going back to IDLE state");
        ComStSt25sdkFtmprotocolFtmProtocol_finalizeTransferWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_withByteArray_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_OK), nil);
      }
    }
    else {
      ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, PREPARE_PACKET));
    }
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_updateReceptionProgress(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  jint acknowledgedBytes = 0;
  jint segmentBytes = 0;
  if (self->mReceptionStatus_ == JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_RETRANSMISSION)) {
    return;
  }
  if (self->mReceptionOutputStream_ != nil) acknowledgedBytes = [self->mReceptionOutputStream_ size];
  if ((self->mReceptionSegmentOutputStream_ != nil) && ([((JavaIoByteArrayOutputStream *) nil_chk(self->mReceptionSegmentOutputStream_)) size] > 0)) {
    segmentBytes = [((JavaIoByteArrayOutputStream *) nil_chk(self->mReceptionSegmentOutputStream_)) size];
  }
  jint receivedBytes = acknowledgedBytes + segmentBytes;
  if (self->mTransferProgressionListener_ != nil) {
    [self->mTransferProgressionListener_ receptionProgressWithInt:receivedBytes withInt:acknowledgedBytes withInt:self->mReceptionTotalLength_];
  }
}

jint ComStSt25sdkFtmprotocolFtmProtocol_getMaxTransmissionSegmentDataLength(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  jint maxSegmentDataLength;
  if (self->mNbrOfPacketsPerSegment_ == 1) {
    maxSegmentDataLength = self->mMaxTransmissionSize_ - (1 + 4 + 4);
  }
  else {
    maxSegmentDataLength = self->mNbrOfPacketsPerSegment_ * (self->mMaxTransmissionSize_ - 1) - 9;
  }
  ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I", @"Max segment data size : ", maxSegmentDataLength));
  return maxSegmentDataLength;
}

void ComStSt25sdkFtmprotocolFtmProtocol_sendNextPacket(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  @try {
    ComStSt25sdkSTLog_iWithNSString_(@"sendNextPacket");
    if (self->mIsErrorControlNeeded_) {
      if ((self->mTransmissionSegmentInputStream_ == nil) || ([((JavaIoByteArrayInputStream *) nil_chk(self->mTransmissionSegmentInputStream_)) available] == 0)) {
        jint segmentDataLength = ComStSt25sdkFtmprotocolFtmProtocol_getMaxTransmissionSegmentDataLength(self);
        jint remainingBytes = [((JavaIoByteArrayInputStream *) nil_chk(self->mTransmissionByteArrayInputStream_)) available];
        segmentDataLength = JavaLangMath_minWithInt_withInt_(segmentDataLength, remainingBytes);
        IOSByteArray *segmentData = ComStSt25sdkFtmprotocolFtmProtocol_getPacketDataWithJavaIoByteArrayInputStream_withInt_(self, self->mTransmissionByteArrayInputStream_, segmentDataLength);
        self->mTransmissionSegmentInputStream_ = new_JavaIoByteArrayInputStream_initWithByteArray_(segmentData);
        self->mStartSegmentPacketNumber_ = self->mCurrentPacketNumber_;
        self->mSegmentDataLength_ = ((IOSByteArray *) nil_chk(segmentData))->size_;
        self->mSegmentCrc_ = ComStSt25sdkCrc_computeCrcWithByteArray_(segmentData);
        ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$$", @"mSegmentCrc: ", ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(self->mSegmentCrc_)));
      }
      ComStSt25sdkFtmprotocolFtmProtocol_sendNextSegmentPacket(self);
    }
    else {
      jint remainingBytes = [((JavaIoByteArrayInputStream *) nil_chk(self->mTransmissionByteArrayInputStream_)) available];
      jboolean sendPacketLength;
      jbyte packetPosition;
      jint packetDataLength;
      jboolean segmentStart = false;
      jboolean segmentMiddle = false;
      jboolean segmentEnd = false;
      if (self->mCurrentPacketNumber_ == 0) {
        if ((remainingBytes + ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH + ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_LENGTH) <= self->mMaxTransmissionSize_) {
          sendPacketLength = true;
          packetPosition = ComStSt25sdkFtmprotocolFtmProtocol_SINGLE_PACKET;
          packetDataLength = remainingBytes;
        }
        else {
          sendPacketLength = false;
          packetPosition = ComStSt25sdkFtmprotocolFtmProtocol_FIRST_PACKET;
          packetDataLength = self->mMaxTransmissionSize_ - ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH - ComStSt25sdkFtmprotocolFtmProtocol_TOTAL_LENGTH_FIELD_LENGTH;
        }
      }
      else {
        if ((remainingBytes + ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH + ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_LENGTH) <= self->mMaxTransmissionSize_) {
          sendPacketLength = true;
          packetPosition = ComStSt25sdkFtmprotocolFtmProtocol_END_PACKET;
          packetDataLength = remainingBytes;
        }
        else if ((remainingBytes + ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH) == self->mMaxTransmissionSize_) {
          sendPacketLength = false;
          packetPosition = ComStSt25sdkFtmprotocolFtmProtocol_END_PACKET;
          packetDataLength = remainingBytes;
        }
        else {
          sendPacketLength = false;
          packetPosition = ComStSt25sdkFtmprotocolFtmProtocol_MIDDLE_PACKET;
          packetDataLength = self->mMaxTransmissionSize_ - ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH;
        }
      }
      IOSByteArray *packetData = ComStSt25sdkFtmprotocolFtmProtocol_getPacketDataWithJavaIoByteArrayInputStream_withInt_(self, self->mTransmissionByteArrayInputStream_, packetDataLength);
      IOSByteArray *packet = ComStSt25sdkFtmprotocolFtmProtocol_preparePacketWithBoolean_withBoolean_withBoolean_withByte_withByteArray_withInt_(self, sendPacketLength, segmentStart, segmentEnd, packetPosition, packetData, self->mNumberOfBytesToSend_);
      ComStSt25sdkFtmprotocolFtmProtocol_sendPacketWithByteArray_withBoolean_withBoolean_withBoolean_(self, packet, segmentStart, segmentMiddle, segmentEnd);
    }
  }
  @catch (ComStSt25sdkSTException *e) {
    [e printStackTrace];
    ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error while preparing the segment!");
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
    ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error while preparing the segment!");
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_sendNextSegmentPacket(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  jboolean sendPacketLength;
  jbyte packetPosition;
  jint packetDataLength;
  jboolean segmentStart;
  jboolean segmentMiddle;
  jboolean segmentEnd;
  jint totalDataLength = 0;
  ComStSt25sdkSTLog_iWithNSString_(@"sendNextSegmentPacket");
  jint remainingBytesInSegment = [((JavaIoByteArrayInputStream *) nil_chk(self->mTransmissionSegmentInputStream_)) available];
  if (remainingBytesInSegment == 0) {
    ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error! There are no more Bytes to send!!!");
    return;
  }
  jint remainingBytesInTransmissionStream = [((JavaIoByteArrayInputStream *) nil_chk(self->mTransmissionByteArrayInputStream_)) available];
  jint remainingBytes = remainingBytesInSegment + remainingBytesInTransmissionStream;
  if (self->mCurrentPacketNumber_ == 0) {
    if (self->mNbrOfPacketsPerSegment_ == 1) {
      if (remainingBytesInTransmissionStream == 0) {
        if ((remainingBytesInSegment + ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH + ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_LENGTH + ComStSt25sdkFtmprotocolFtmProtocol_CRC_FIELD_LENGTH) <= self->mMaxTransmissionSize_) {
          sendPacketLength = true;
          segmentStart = true;
          segmentEnd = true;
          packetPosition = ComStSt25sdkFtmprotocolFtmProtocol_SINGLE_PACKET;
          packetDataLength = remainingBytesInSegment;
        }
        else if ((remainingBytesInSegment + ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH + ComStSt25sdkFtmprotocolFtmProtocol_CRC_FIELD_LENGTH) == self->mMaxTransmissionSize_) {
          sendPacketLength = false;
          segmentStart = true;
          segmentEnd = true;
          packetPosition = ComStSt25sdkFtmprotocolFtmProtocol_SINGLE_PACKET;
          packetDataLength = remainingBytesInSegment;
        }
        else {
          @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
        }
      }
      else {
        sendPacketLength = false;
        segmentStart = true;
        segmentEnd = true;
        packetPosition = ComStSt25sdkFtmprotocolFtmProtocol_FIRST_PACKET;
        totalDataLength = self->mNumberOfBytesToSend_;
        packetDataLength = remainingBytesInSegment;
      }
    }
    else {
      if ((remainingBytesInSegment + ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH + ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_LENGTH + ComStSt25sdkFtmprotocolFtmProtocol_CRC_FIELD_LENGTH) <= self->mMaxTransmissionSize_) {
        sendPacketLength = true;
        segmentStart = true;
        segmentEnd = true;
        packetPosition = ComStSt25sdkFtmprotocolFtmProtocol_SINGLE_PACKET;
        packetDataLength = remainingBytesInSegment;
      }
      else if ((remainingBytesInSegment + ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH + ComStSt25sdkFtmprotocolFtmProtocol_CRC_FIELD_LENGTH) == self->mMaxTransmissionSize_) {
        sendPacketLength = false;
        segmentStart = true;
        segmentEnd = true;
        packetPosition = ComStSt25sdkFtmprotocolFtmProtocol_SINGLE_PACKET;
        packetDataLength = remainingBytesInSegment;
      }
      else {
        sendPacketLength = false;
        segmentStart = true;
        segmentEnd = false;
        packetPosition = ComStSt25sdkFtmprotocolFtmProtocol_FIRST_PACKET;
        totalDataLength = self->mNumberOfBytesToSend_;
        packetDataLength = self->mMaxTransmissionSize_ - ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH - ComStSt25sdkFtmprotocolFtmProtocol_TOTAL_LENGTH_FIELD_LENGTH;
      }
    }
  }
  else {
    if ((remainingBytesInSegment + ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH + ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_LENGTH + ComStSt25sdkFtmprotocolFtmProtocol_CRC_FIELD_LENGTH) <= self->mMaxTransmissionSize_) {
      segmentStart = ((self->mCurrentPacketNumber_ % self->mNbrOfPacketsPerSegment_) == 0);
      segmentEnd = true;
      sendPacketLength = true;
      packetPosition = (remainingBytesInTransmissionStream == 0) ? ComStSt25sdkFtmprotocolFtmProtocol_END_PACKET : ComStSt25sdkFtmprotocolFtmProtocol_MIDDLE_PACKET;
      packetDataLength = remainingBytesInSegment;
    }
    else if ((remainingBytesInSegment + ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH + ComStSt25sdkFtmprotocolFtmProtocol_CRC_FIELD_LENGTH) == self->mMaxTransmissionSize_) {
      segmentStart = ((self->mCurrentPacketNumber_ % self->mNbrOfPacketsPerSegment_) == 0);
      segmentEnd = true;
      sendPacketLength = false;
      packetPosition = (remainingBytesInTransmissionStream == 0) ? ComStSt25sdkFtmprotocolFtmProtocol_END_PACKET : ComStSt25sdkFtmprotocolFtmProtocol_MIDDLE_PACKET;
      packetDataLength = remainingBytesInSegment;
    }
    else {
      if ((remainingBytesInSegment + ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH) <= self->mMaxTransmissionSize_) {
        segmentStart = ((self->mCurrentPacketNumber_ % self->mNbrOfPacketsPerSegment_) == 0);
        segmentEnd = false;
        sendPacketLength = true;
        packetPosition = ComStSt25sdkFtmprotocolFtmProtocol_MIDDLE_PACKET;
        packetDataLength = remainingBytesInSegment - 1;
      }
      else {
        segmentStart = ((self->mCurrentPacketNumber_ % self->mNbrOfPacketsPerSegment_) == 0);
        segmentEnd = false;
        sendPacketLength = false;
        packetPosition = ComStSt25sdkFtmprotocolFtmProtocol_MIDDLE_PACKET;
        packetDataLength = self->mMaxTransmissionSize_ - ComStSt25sdkFtmprotocolFtmProtocol_CONTROL_BYTE_FIELD_LENGTH;
      }
    }
  }
  segmentMiddle = (!segmentStart && !segmentEnd);
  @try {
    IOSByteArray *packetData = ComStSt25sdkFtmprotocolFtmProtocol_getPacketDataWithJavaIoByteArrayInputStream_withInt_(self, self->mTransmissionSegmentInputStream_, packetDataLength);
    IOSByteArray *packet = ComStSt25sdkFtmprotocolFtmProtocol_preparePacketWithBoolean_withBoolean_withBoolean_withByte_withByteArray_withInt_(self, sendPacketLength, segmentStart, segmentEnd, packetPosition, packetData, totalDataLength);
    if ((!segmentEnd) && (((IOSByteArray *) nil_chk(packet))->size_ < 220)) {
      ComStSt25sdkSTLog_eWithNSString_(@"Unexpected packet length");
    }
    ComStSt25sdkFtmprotocolFtmProtocol_sendPacketWithByteArray_withBoolean_withBoolean_withBoolean_(self, packet, segmentStart, segmentMiddle, segmentEnd);
  }
  @catch (ComStSt25sdkSTException *e) {
    switch ([[e getError] ordinal]) {
      case ComStSt25sdkSTException_STExceptionCode_Enum_TAG_NOT_IN_THE_FIELD:
      case ComStSt25sdkSTException_STExceptionCode_Enum_RFREADER_NO_RESPONSE:
      case ComStSt25sdkSTException_STExceptionCode_Enum_CMD_FAILED:
      ComStSt25sdkSTLog_wWithNSString_(JreStrcat("$$", @"error during sendNextSegmentPacket(): ", [((ComStSt25sdkSTException_STExceptionCode *) nil_chk([e getError])) description]));
      if (ComStSt25sdkFtmprotocolFtmProtocol_getTimeSinceFirstError(self) < self->mTimeOutInMs_) {
        ComStSt25sdkFtmprotocolFtmProtocol_restartTransmissionFromFirstSegmentPacket(self);
      }
      else {
        ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error! Timeout when sending data");
      }
      break;
      default:
      [e printStackTrace];
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Fatal error in sendNextSegmentPacket()");
      break;
    }
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_restartTransmissionFromFirstSegmentPacket(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  self->mNumberOfTransmissionRetries_++;
  if (self->mNumberOfTransmissionRetries_ < self->mNbrOfRetriesInCaseOfError_) {
    ComStSt25sdkSTLog_wWithNSString_(@"restartTransmissionFromFirstSegmentPacket");
    if (self->mTransmissionSegmentInputStream_ != nil) {
      [self->mTransmissionSegmentInputStream_ reset];
    }
    self->mCurrentPacketNumber_ = self->mStartSegmentPacketNumber_;
    ComStSt25sdkFtmprotocolFtmProtocol_updateTransmissionProgress(self);
    ComStSt25sdkFtmprotocolFtmProtocol_sleepBetweenSendCmds(self);
  }
  else {
    ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error! Max number of retry reached: Transmission failed!");
  }
}

IOSByteArray *ComStSt25sdkFtmprotocolFtmProtocol_getPacketDataWithJavaIoByteArrayInputStream_withInt_(ComStSt25sdkFtmprotocolFtmProtocol *self, JavaIoByteArrayInputStream *byteArrayInputStream, jint packetDataLength) {
  IOSByteArray *data = [IOSByteArray newArrayWithLength:packetDataLength];
  jint dataRead = [((JavaIoByteArrayInputStream *) nil_chk(byteArrayInputStream)) readWithByteArray:data withInt:0 withInt:data->size_];
  if (dataRead != packetDataLength) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
  }
  return data;
}

IOSByteArray *ComStSt25sdkFtmprotocolFtmProtocol_preparePacketWithBoolean_withBoolean_withBoolean_withByte_withByteArray_withInt_(ComStSt25sdkFtmprotocolFtmProtocol *self, jboolean sendPacketLength, jboolean segmentStart, jboolean segmentEnd, jbyte packetPosition, IOSByteArray *packetData, jint totalDataLength) {
  ComStSt25sdkSTLog_iWithNSString_(@"preparePacket");
  JavaIoByteArrayOutputStream *outputStream = new_JavaIoByteArrayOutputStream_init();
  @try {
    jbyte controlByte = (jbyte) (JreLShift32(packetPosition, ComStSt25sdkFtmprotocolFtmProtocol_PACKET_POSITION_OFFSET));
    if (segmentStart) {
      controlByte |= ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_START;
    }
    if (segmentEnd) {
      controlByte |= ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_END;
    }
    if (sendPacketLength) {
      controlByte |= ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_PRESENT;
    }
    if (self->mCurrentSegmentNumber_ % 2 == 1) {
      controlByte |= ComStSt25sdkFtmprotocolFtmProtocol_PARITY;
    }
    if (self->mIsErrorControlNeeded_) {
      controlByte |= ComStSt25sdkFtmprotocolFtmProtocol_PACKET_BELONGING_TO_A_SEGMENT;
    }
    [outputStream writeWithInt:controlByte];
    if (sendPacketLength) {
      jint packetLength = segmentEnd ? ((IOSByteArray *) nil_chk(packetData))->size_ + ComStSt25sdkFtmprotocolFtmProtocol_CRC_FIELD_LENGTH : ((IOSByteArray *) nil_chk(packetData))->size_;
      [outputStream writeWithInt:packetLength];
    }
    if (packetPosition == ComStSt25sdkFtmprotocolFtmProtocol_FIRST_PACKET) {
      if (totalDataLength == 0) {
        @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
      }
      IOSByteArray *totalLength = ComStSt25sdkHelper_convertIntTo4BytesHexaFormatWithInt_(totalDataLength);
      [outputStream writeWithByteArray:totalLength];
    }
    [outputStream writeWithByteArray:packetData];
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
  }
  IOSByteArray *packet = [outputStream toByteArray];
  ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_withByteArray_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, PACKET_PREPARED), packet);
  return packet;
}

void ComStSt25sdkFtmprotocolFtmProtocol_sendPacketWithByteArray_withBoolean_withBoolean_withBoolean_(ComStSt25sdkFtmprotocolFtmProtocol *self, IOSByteArray *packet, jboolean segmentStart, jboolean segmentMiddle, jboolean segmentEnd) {
  @try {
    jbyte controlByte = IOSByteArray_Get(nil_chk(packet), 0);
    if (segmentEnd) {
      packet = ComStSt25sdkHelper_concatenateByteArraysWithByteArray_withByteArray_(packet, self->mSegmentCrc_);
    }
    if (((IOSByteArray *) nil_chk(packet))->size_ > self->mMaxTransmissionSize_) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
    }
    if ((controlByte & ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_PRESENT) == 0) {
      if (packet->size_ != self->mMaxTransmissionSize_) {
        @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
      }
    }
    ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I$I$I", @"==> Send Packet ", self->mCurrentPacketNumber_, @" (", packet->size_, @" Bytes) from Segment ", self->mCurrentSegmentNumber_));
    ComStSt25sdkFtmprotocolFtmProtocol_printControlByteWithByte_(self, controlByte);
    ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$$", @"Data : ", ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(packet)));
    self->mLastPacket_ = packet;
    ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, SEND_PACKET));
    ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_PACKET));
    if (segmentStart) {
      ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_SEGMENT_START));
    }
    if (segmentMiddle) {
      ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_SEGMENT_MIDDLE));
    }
    if (segmentEnd) {
      ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_SEGMENT_END));
    }
    ComStSt25sdkFtmprotocolFtmProtocol_saveTimeOfLastNfcCommand(self);
    ComStSt25sdkFtmprotocolFtmProtocol_writeMailboxMessageWithInt_withByteArray_withByte_(self, packet->size_, packet, self->mFlag_);
    [self resetTimeOfFirstError];
    if (segmentStart) {
      ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_SEGMENT_START));
    }
    if (segmentMiddle) {
      ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_SEGMENT_MIDDLE));
    }
    if (segmentEnd) {
      ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_SEGMENT_END));
    }
    self->mCurrentPacketNumber_++;
    if (segmentEnd) {
      ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, WAIT_FOR_ACK));
      ComStSt25sdkFtmprotocolFtmProtocol_sleepBetweenSendCmds(self);
    }
    else {
      ComStSt25sdkFtmprotocolFtmProtocol_updateTransmissionProgress(self);
    }
  }
  @catch (ComStSt25sdkSTException *e) {
    switch ([[e getError] ordinal]) {
      case ComStSt25sdkSTException_STExceptionCode_Enum_TAG_NOT_IN_THE_FIELD:
      case ComStSt25sdkSTException_STExceptionCode_Enum_RFREADER_NO_RESPONSE:
      ComStSt25sdkSTLog_wWithNSString_(@"error during sendPacket: TAG_NOT_IN_THE_FIELD");
      if (ComStSt25sdkFtmprotocolFtmProtocol_getTimeSinceFirstError(self) < self->mTimeOutInMs_) {
        if (self->mIsErrorControlNeeded_) {
          ComStSt25sdkFtmprotocolFtmProtocol_restartTransmissionFromFirstSegmentPacket(self);
        }
      }
      else {
        ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error! Timeout when sending data");
      }
      break;
      case ComStSt25sdkSTException_STExceptionCode_Enum_CMD_FAILED:
      ComStSt25sdkSTLog_wWithNSString_(@"error during sendPacket: CMD_FAILED");
      @try {
        jbyte mbCtrlDynRegisterValue = [self readDynamicRegisterWithInt:ComStSt25sdkType5St25dvST25DVTag_REGISTER_DYN_MB_CTRL_ADDRESS withByte:self->mFlag_];
        if (ComStSt25sdkFtmprotocolFtmProtocol_hasHostPutMsgWithByte_(mbCtrlDynRegisterValue)) {
          ComStSt25sdkSTLog_eWithNSString_(@"The mailbox contains some non expected data from the host. Reset it");
          ComStSt25sdkFtmprotocolFtmProtocol_saveTimeOfLastNfcCommand(self);
          [((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) resetMailbox];
          self->mTimeOfFirstError_ = 0;
        }
      }
      @catch (ComStSt25sdkSTException *e1) {
        [e1 printStackTrace];
        ComStSt25sdkSTLog_eWithNSString_(@"sendPacket: Failed to read Mailbox status!");
      }
      break;
      default:
      [e printStackTrace];
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Fatal error in sendPacket()");
      break;
    }
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_resendPacket(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  if (self->mLastPacket_ == nil) {
    ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error! mLastPacket is null!");
    return;
  }
  @try {
    ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_RESENDING_PACKET));
    ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I$", @"==> Send Packet ", self->mCurrentPacketNumber_, @" (resend)"));
    ComStSt25sdkFtmprotocolFtmProtocol_saveTimeOfLastNfcCommand(self);
    ComStSt25sdkFtmprotocolFtmProtocol_writeMailboxMessageWithInt_withByteArray_withByte_(self, ((IOSByteArray *) nil_chk(self->mLastPacket_))->size_, self->mLastPacket_, self->mFlag_);
    [self resetTimeOfFirstError];
    self->mCurrentPacketNumber_++;
    jboolean segmentEnd = (IOSByteArray_Get(nil_chk(self->mLastPacket_), 0) & ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_END) == ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_END;
    if (segmentEnd) {
      ComStSt25sdkFtmprotocolFtmProtocol_setStateWithComStSt25sdkFtmprotocolFtmProtocol_State_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, WAIT_FOR_ACK));
      ComStSt25sdkFtmprotocolFtmProtocol_sleepBetweenSendCmds(self);
    }
    else {
      ComStSt25sdkFtmprotocolFtmProtocol_updateTransmissionProgress(self);
    }
  }
  @catch (ComStSt25sdkSTException *e) {
    switch ([[e getError] ordinal]) {
      case ComStSt25sdkSTException_STExceptionCode_Enum_TAG_NOT_IN_THE_FIELD:
      case ComStSt25sdkSTException_STExceptionCode_Enum_RFREADER_NO_RESPONSE:
      case ComStSt25sdkSTException_STExceptionCode_Enum_CMD_FAILED:
      ComStSt25sdkSTLog_wWithNSString_(JreStrcat("$$", @"Error in resendPacket: ", [((ComStSt25sdkSTException_STExceptionCode *) nil_chk([e getError])) description]));
      if (ComStSt25sdkFtmprotocolFtmProtocol_getTimeSinceFirstError(self) < self->mTimeOutInMs_) {
        if (self->mIsErrorControlNeeded_) {
          ComStSt25sdkFtmprotocolFtmProtocol_restartTransmissionFromFirstSegmentPacket(self);
        }
      }
      else {
        ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error! Timeout when sending data");
      }
      break;
      default:
      [e printStackTrace];
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Fatal error in resendPacket()");
      break;
    }
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_waitForAcknowledge(ComStSt25sdkFtmprotocolFtmProtocol *self) {
  @try {
    ComStSt25sdkSTLog_iWithNSString_(@"waitForAcknowledge");
    ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_READING_ACK));
    jbyte mbCtrlDynRegisterValue = [self readDynamicRegisterWithInt:ComStSt25sdkType5St25dvST25DVTag_REGISTER_DYN_MB_CTRL_ADDRESS withByte:self->mFlag_];
    if (!ComStSt25sdkFtmprotocolFtmProtocol_hasHostPutMsgWithByte_(mbCtrlDynRegisterValue)) {
      jlong timeSinceFirstError = ComStSt25sdkFtmprotocolFtmProtocol_getTimeSinceFirstError(self);
      if (!self->mRestartedFromFirstSegmentPacket_ && (timeSinceFirstError > 1000)) {
        ComStSt25sdkFtmprotocolFtmProtocol_restartTransmissionFromFirstSegmentPacket(self);
      }
      if (timeSinceFirstError > self->mTimeOutInMs_) {
        ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error! Timeout when waiting MCU acknowledge");
      }
      return;
    }
    [self resetTimeOfFirstError];
    ComStSt25sdkFtmprotocolFtmProtocol_saveTimeOfLastNfcCommand(self);
    IOSByteArray *receivedData = ComStSt25sdkFtmprotocolFtmProtocol_readMailboxMessageWithInt_withInt_withByte_(self, 0, 0, self->mFlag_);
    ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(self, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_ACK));
    [self resetTimeOfFirstError];
    if (((IOSByteArray *) nil_chk(receivedData))->size_ < 2) {
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Invalid acknowledge length!");
      return;
    }
    jbyte rfStatusByte = IOSByteArray_Get(receivedData, 0);
    IOSByteArray *ackData = [IOSByteArray newArrayWithLength:receivedData->size_ - 1];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(receivedData, 1, ackData, 0, ackData->size_);
    if (rfStatusByte == (jint) 0x00) {
      ComStSt25sdkFtmprotocolFtmProtocol_processAcknowledgeResponseWithByteArray_(self, ackData);
    }
    else {
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error! RF Cmd failed");
    }
  }
  @catch (ComStSt25sdkSTException *e) {
    switch ([[e getError] ordinal]) {
      case ComStSt25sdkSTException_STExceptionCode_Enum_TAG_NOT_IN_THE_FIELD:
      case ComStSt25sdkSTException_STExceptionCode_Enum_RFREADER_NO_RESPONSE:
      ComStSt25sdkSTLog_wWithNSString_(@"Error in waitForAcknowledge: TAG_NOT_IN_THE_FIELD");
      break;
      case ComStSt25sdkSTException_STExceptionCode_Enum_CMD_FAILED:
      ComStSt25sdkSTLog_wWithNSString_(@"Error in waitForAcknowledge: CMD_FAILED");
      break;
      default:
      [e printStackTrace];
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Fatal error in waitForAcknowledge()");
      break;
    }
    if (ComStSt25sdkFtmprotocolFtmProtocol_getTimeSinceFirstError(self) > self->mTimeOutInMs_) {
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error! Timeout when waiting MCU acknowledge");
    }
  }
  @catch (JavaLangInterruptedException *e) {
    [e printStackTrace];
    ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Sleep interrupted!");
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_processAcknowledgeResponseWithByteArray_(ComStSt25sdkFtmprotocolFtmProtocol *self, IOSByteArray *ackData) {
  if (ackData != nil) {
    ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I$$", @"processAcknowledgeResponse. ackData received (", ackData->size_, @" Bytes): ", ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(ackData)));
    jbyte cmdStatus = IOSByteArray_Get(ackData, 0);
    switch (cmdStatus) {
      case ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_OK:
      ComStSt25sdkSTLog_iWithNSString_(@"SEGMENT_OK");
      self->mTransmissionSegmentInputStream_ = nil;
      self->mNumberOfTransmissionRetries_ = 0;
      self->mCurrentSegmentNumber_++;
      ComStSt25sdkFtmprotocolFtmProtocol_updateTransmissionProgress(self);
      break;
      case ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_ERROR:
      ComStSt25sdkSTLog_eWithNSString_(@"SEGMENT_ERROR!");
      ComStSt25sdkFtmprotocolFtmProtocol_restartTransmissionFromFirstSegmentPacket(self);
      break;
      default:
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, NSString_java_formatWithNSString_withNSObjectArray_(@"Error! cmdStatus = 0x%x", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangByte_valueOfWithByte_(cmdStatus) } count:1 type:NSObject_class_()]));
      break;
    }
  }
  else {
    ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(self, @"Error! ackData is null!");
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_printMBControlDynRegisterWithByte_(ComStSt25sdkFtmprotocolFtmProtocol *self, jbyte registerValue) {
  ComStSt25sdkSTLog_iWithNSString_(@"MB_CTRL_Dyn:");
  if ((registerValue & (jint) 0x01) == (jint) 0x01) {
    ComStSt25sdkSTLog_iWithNSString_(@"MB_EN");
  }
  if ((registerValue & (jint) 0x02) == (jint) 0x02) {
    ComStSt25sdkSTLog_iWithNSString_(@"HOST_PUT_MSG");
  }
  if ((registerValue & (jint) 0x04) == (jint) 0x04) {
    ComStSt25sdkSTLog_iWithNSString_(@"RF_PUT_MSG");
  }
  if ((registerValue & (jint) 0x10) == (jint) 0x10) {
    ComStSt25sdkSTLog_iWithNSString_(@"HOST_MISS_MSG");
  }
  if ((registerValue & (jint) 0x20) == (jint) 0x20) {
    ComStSt25sdkSTLog_iWithNSString_(@"RF_MISS_MSG");
  }
  if ((registerValue & (jint) 0x40) == (jint) 0x40) {
    ComStSt25sdkSTLog_iWithNSString_(@"HOST_CURRENT_MSG");
  }
  if ((registerValue & (jint) 0x80) == (jint) 0x80) {
    ComStSt25sdkSTLog_iWithNSString_(@"RF_CURRENT_MSG");
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_printControlByteWithByte_(ComStSt25sdkFtmprotocolFtmProtocol *self, jbyte controlByte) {
  if ((controlByte & ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_PRESENT) == ComStSt25sdkFtmprotocolFtmProtocol_PACKET_LENGTH_FIELD_PRESENT) {
    ComStSt25sdkSTLog_iWithNSString_(@"DataLengthField Present");
  }
  if ((controlByte & ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_END) == ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_END) {
    ComStSt25sdkSTLog_iWithNSString_(@"Segment End");
  }
  if ((controlByte & ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_START) == ComStSt25sdkFtmprotocolFtmProtocol_SEGMENT_START) {
    ComStSt25sdkSTLog_iWithNSString_(@"Segment Start");
  }
  jint position = JreRShift32((controlByte & (jint) 0x0C), ComStSt25sdkFtmprotocolFtmProtocol_PACKET_POSITION_OFFSET);
  switch (position) {
    case ComStSt25sdkFtmprotocolFtmProtocol_SINGLE_PACKET:
    ComStSt25sdkSTLog_iWithNSString_(@"Single Packet");
    break;
    case ComStSt25sdkFtmprotocolFtmProtocol_FIRST_PACKET:
    ComStSt25sdkSTLog_iWithNSString_(@"First Packet. TotalLengthField Present");
    break;
    case ComStSt25sdkFtmprotocolFtmProtocol_MIDDLE_PACKET:
    ComStSt25sdkSTLog_iWithNSString_(@"Middle Packet");
    break;
    case ComStSt25sdkFtmprotocolFtmProtocol_END_PACKET:
    ComStSt25sdkSTLog_iWithNSString_(@"End Packet");
    break;
    default:
    ComStSt25sdkSTLog_iWithNSString_(@"Invalid position!");
    break;
  }
  if ((controlByte & (jint) 0x0C) == (jint) 0x02) {
    ComStSt25sdkSTLog_iWithNSString_(@"Retransmission");
  }
}

jboolean ComStSt25sdkFtmprotocolFtmProtocol_isMailboxEnabledWithByte_(jbyte mbCtrlDynRegisterValue) {
  ComStSt25sdkFtmprotocolFtmProtocol_initialize();
  return (mbCtrlDynRegisterValue & (jint) 0x01) == (jint) 0x01;
}

jboolean ComStSt25sdkFtmprotocolFtmProtocol_hasHostPutMsgWithByte_(jbyte mbCtrlDynRegisterValue) {
  ComStSt25sdkFtmprotocolFtmProtocol_initialize();
  return (mbCtrlDynRegisterValue & (jint) 0x02) == (jint) 0x02;
}

jboolean ComStSt25sdkFtmprotocolFtmProtocol_hasRFPutMsgWithByte_(jbyte mbCtrlDynRegisterValue) {
  ComStSt25sdkFtmprotocolFtmProtocol_initialize();
  return (mbCtrlDynRegisterValue & (jint) 0x04) == (jint) 0x04;
}

void ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_(ComStSt25sdkFtmprotocolFtmProtocol *self, ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *testPoint) {
  if (self->mFtmProtocolHook_ != nil) {
    [self->mFtmProtocolHook_ ftmProtocolHookWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint:testPoint withByteArray:nil];
  }
}

void ComStSt25sdkFtmprotocolFtmProtocol_notifyTestPointWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint_withByteArray_(ComStSt25sdkFtmprotocolFtmProtocol *self, ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *testPoint, IOSByteArray *arg) {
  if (self->mFtmProtocolHook_ != nil) {
    [self->mFtmProtocolHook_ ftmProtocolHookWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint:testPoint withByteArray:arg];
  }
}

IOSByteArray *ComStSt25sdkFtmprotocolFtmProtocol_readMailboxMessageWithInt_withInt_withByte_(ComStSt25sdkFtmprotocolFtmProtocol *self, jint mbAddress, jint size, jbyte flag) {
  IOSByteArray *result;
  if (self->mUseFastCommands_) {
    result = [((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) fastReadMailboxMessageWithInt:mbAddress withInt:size withByte:flag];
  }
  else {
    result = [((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) readMailboxMessageWithInt:mbAddress withInt:size withByte:flag];
  }
  return result;
}

jbyte ComStSt25sdkFtmprotocolFtmProtocol_writeMailboxMessageWithInt_withByteArray_withByte_(ComStSt25sdkFtmprotocolFtmProtocol *self, jint size, IOSByteArray *buffer, jbyte flag) {
  jbyte result;
  if (self->mUseFastCommands_) {
    result = [((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) fastWriteMailboxMessageWithInt:size withByteArray:buffer withByte:flag];
  }
  else {
    result = [((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) writeMailboxMessageWithInt:size withByteArray:buffer withByte:flag];
  }
  return result;
}

IOSByteArray *ComStSt25sdkFtmprotocolFtmProtocol_readDynConfigWithInt_withByte_(ComStSt25sdkFtmprotocolFtmProtocol *self, jint configId, jbyte flag) {
  IOSByteArray *result;
  if (self->mUseFastCommands_) {
    result = [((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) fastReadDynConfigWithInt:configId withByte:flag];
  }
  else {
    result = [((ComStSt25sdkType5St25dvST25DVTag *) nil_chk(self->mST25DVTag_)) readDynConfigWithInt:configId withByte:flag];
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkFtmprotocolFtmProtocol)

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus)

ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_values_[3];

@implementation ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus

+ (ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *)TRANSFER_OK {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_OK);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *)TRANSFER_FAILED {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_FAILED);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *)TRANSFER_CANCELLED {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_CANCELLED);
}

+ (IOSObjectArray *)values {
  return ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_values();
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *)valueOfWithNSString:(NSString *)name {
  return ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_valueOfWithNSString_(name);
}

- (ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_Enum)toNSEnum {
  return (ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComStSt25sdkFtmprotocolFtmProtocol_TransferStatus;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkFtmprotocolFtmProtocol_TransferStatus;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRANSFER_OK", "LComStSt25sdkFtmprotocolFtmProtocol_TransferStatus;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "TRANSFER_FAILED", "LComStSt25sdkFtmprotocolFtmProtocol_TransferStatus;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "TRANSFER_CANCELLED", "LComStSt25sdkFtmprotocolFtmProtocol_TransferStatus;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_OK), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_FAILED), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_CANCELLED), "LComStSt25sdkFtmprotocolFtmProtocol;", "Ljava/lang/Enum<Lcom/st/st25sdk/ftmprotocol/FtmProtocol$TransferStatus;>;" };
  static const J2ObjcClassInfo _ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus = { "TransferStatus", "com.st.st25sdk.ftmprotocol", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus;
}

+ (void)initialize {
  if (self == [ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus class]) {
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_OK) = new_ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_class_(), 0), 0);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_FAILED) = new_ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_class_(), 1), 1);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_CANCELLED) = new_ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_class_(), 2), 2);
    J2OBJC_SET_INITIALIZED(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus)
  }
}

@end

void ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_initWithNSString_withInt_(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *new_ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_values() {
  ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_initialize();
  return [IOSObjectArray arrayWithObjects:ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_values_ count:3 type:ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_class_()];
}

ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_valueOfWithNSString_(NSString *name) {
  ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_initialize();
  for (int i = 0; i < 3; i++) {
    ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *e = ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_fromOrdinal(NSUInteger ordinal) {
  ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus)

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint)

ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_values_[19];

@implementation ComStSt25sdkFtmprotocolFtmProtocol_TestPoint

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)PACKET_PREPARED {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, PACKET_PREPARED);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)BEFORE_READING_ACK {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_READING_ACK);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)AFTER_READING_ACK {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_ACK);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)BEFORE_SENDING_SEGMENT_START {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_SEGMENT_START);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)BEFORE_SENDING_SEGMENT_MIDDLE {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_SEGMENT_MIDDLE);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)BEFORE_SENDING_SEGMENT_END {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_SEGMENT_END);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)BEFORE_SENDING_PACKET {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_PACKET);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)BEFORE_RESENDING_PACKET {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_RESENDING_PACKET);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)AFTER_SENDING_SEGMENT_START {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_SEGMENT_START);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)AFTER_SENDING_SEGMENT_MIDDLE {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_SEGMENT_MIDDLE);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)AFTER_SENDING_SEGMENT_END {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_SEGMENT_END);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)BEFORE_READING_PACKET {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_READING_PACKET);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)CHECKING_IF_MB_AVAILABLE_FOR_READING {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, CHECKING_IF_MB_AVAILABLE_FOR_READING);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)CHECKING_SEGMENT_CRC {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, CHECKING_SEGMENT_CRC);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)BEFORE_SENDING_ACK {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_ACK);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)AFTER_SENDING_ACK {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_ACK);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)AFTER_READING_SEGMENT_START {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_SEGMENT_START);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)AFTER_READING_SEGMENT_MIDDLE {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_SEGMENT_MIDDLE);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)AFTER_READING_SEGMENT_END {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_SEGMENT_END);
}

+ (IOSObjectArray *)values {
  return ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_values();
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *)valueOfWithNSString:(NSString *)name {
  return ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_valueOfWithNSString_(name);
}

- (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_Enum)toNSEnum {
  return (ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PACKET_PREPARED", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "BEFORE_READING_ACK", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "AFTER_READING_ACK", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "BEFORE_SENDING_SEGMENT_START", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "BEFORE_SENDING_SEGMENT_MIDDLE", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "BEFORE_SENDING_SEGMENT_END", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "BEFORE_SENDING_PACKET", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "BEFORE_RESENDING_PACKET", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "AFTER_SENDING_SEGMENT_START", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "AFTER_SENDING_SEGMENT_MIDDLE", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "AFTER_SENDING_SEGMENT_END", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "BEFORE_READING_PACKET", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
    { "CHECKING_IF_MB_AVAILABLE_FOR_READING", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 14, -1, -1 },
    { "CHECKING_SEGMENT_CRC", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 15, -1, -1 },
    { "BEFORE_SENDING_ACK", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 16, -1, -1 },
    { "AFTER_SENDING_ACK", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 17, -1, -1 },
    { "AFTER_READING_SEGMENT_START", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 18, -1, -1 },
    { "AFTER_READING_SEGMENT_MIDDLE", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 19, -1, -1 },
    { "AFTER_READING_SEGMENT_END", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;", .constantValue.asLong = 0, 0x4019, -1, 20, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, PACKET_PREPARED), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_READING_ACK), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_ACK), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_SEGMENT_START), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_SEGMENT_MIDDLE), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_SEGMENT_END), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_PACKET), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_RESENDING_PACKET), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_SEGMENT_START), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_SEGMENT_MIDDLE), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_SEGMENT_END), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_READING_PACKET), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, CHECKING_IF_MB_AVAILABLE_FOR_READING), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, CHECKING_SEGMENT_CRC), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_ACK), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_ACK), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_SEGMENT_START), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_SEGMENT_MIDDLE), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_SEGMENT_END), "LComStSt25sdkFtmprotocolFtmProtocol;", "Ljava/lang/Enum<Lcom/st/st25sdk/ftmprotocol/FtmProtocol$TestPoint;>;" };
  static const J2ObjcClassInfo _ComStSt25sdkFtmprotocolFtmProtocol_TestPoint = { "TestPoint", "com.st.st25sdk.ftmprotocol", ptrTable, methods, fields, 7, 0x4019, 2, 19, 21, -1, -1, 22, -1 };
  return &_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint;
}

+ (void)initialize {
  if (self == [ComStSt25sdkFtmprotocolFtmProtocol_TestPoint class]) {
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, PACKET_PREPARED) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 0), 0);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_READING_ACK) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 1), 1);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_ACK) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 2), 2);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_SEGMENT_START) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 3), 3);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_SEGMENT_MIDDLE) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 4), 4);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_SEGMENT_END) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 5), 5);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_PACKET) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 6), 6);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_RESENDING_PACKET) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 7), 7);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_SEGMENT_START) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 8), 8);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_SEGMENT_MIDDLE) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 9), 9);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_SEGMENT_END) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 10), 10);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_READING_PACKET) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 11), 11);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, CHECKING_IF_MB_AVAILABLE_FOR_READING) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 12), 12);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, CHECKING_SEGMENT_CRC) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 13), 13);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, BEFORE_SENDING_ACK) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 14), 14);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_SENDING_ACK) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 15), 15);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_SEGMENT_START) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 16), 16);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_SEGMENT_MIDDLE) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 17), 17);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, AFTER_READING_SEGMENT_END) = new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_(), 18), 18);
    J2OBJC_SET_INITIALIZED(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint)
  }
}

@end

void ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *new_ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_values() {
  ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initialize();
  return [IOSObjectArray arrayWithObjects:ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_values_ count:19 type:ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_class_()];
}

ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_valueOfWithNSString_(NSString *name) {
  ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initialize();
  for (int i = 0; i < 19; i++) {
    ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *e = ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComStSt25sdkFtmprotocolFtmProtocol_TestPoint *ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_fromOrdinal(NSUInteger ordinal) {
  ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_initialize();
  if (ordinal >= 19) {
    return nil;
  }
  return ComStSt25sdkFtmprotocolFtmProtocol_TestPoint_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkFtmprotocolFtmProtocol_TestPoint)

@implementation ComStSt25sdkFtmprotocolFtmProtocol_FtmProtocolHook

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(ftmProtocolHookWithComStSt25sdkFtmprotocolFtmProtocol_TestPoint:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "ftmProtocolHook", "LComStSt25sdkFtmprotocolFtmProtocol_TestPoint;[B", "LComStSt25sdkSTException;", "LComStSt25sdkFtmprotocolFtmProtocol;" };
  static const J2ObjcClassInfo _ComStSt25sdkFtmprotocolFtmProtocol_FtmProtocolHook = { "FtmProtocolHook", "com.st.st25sdk.ftmprotocol", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, -1, -1 };
  return &_ComStSt25sdkFtmprotocolFtmProtocol_FtmProtocolHook;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComStSt25sdkFtmprotocolFtmProtocol_FtmProtocolHook)

@implementation ComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(transmissionProgressWithInt:withInt:withInt:);
  methods[1].selector = @selector(receptionProgressWithInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transmissionProgress", "III", "receptionProgress", "LComStSt25sdkFtmprotocolFtmProtocol;" };
  static const J2ObjcClassInfo _ComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener = { "TransferProgressionListener", "com.st.st25sdk.ftmprotocol", ptrTable, methods, NULL, 7, 0x609, 2, 0, 3, -1, -1, -1, -1 };
  return &_ComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener)

@implementation ComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(transferDoneWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transferDone", "LComStSt25sdkFtmprotocolFtmProtocol_TransferStatus;[B", "LComStSt25sdkFtmprotocolFtmProtocol;" };
  static const J2ObjcClassInfo _ComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener = { "TransferCompletionListener", "com.st.st25sdk.ftmprotocol", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComStSt25sdkFtmprotocolFtmProtocol_TransferCompletionListener)

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkFtmprotocolFtmProtocol_State)

ComStSt25sdkFtmprotocolFtmProtocol_State *ComStSt25sdkFtmprotocolFtmProtocol_State_values_[6];

@implementation ComStSt25sdkFtmprotocolFtmProtocol_State

+ (ComStSt25sdkFtmprotocolFtmProtocol_State *)IDLE {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, IDLE);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_State *)PREPARE_PACKET {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, PREPARE_PACKET);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_State *)SEND_PACKET {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, SEND_PACKET);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_State *)WAIT_FOR_ACK {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, WAIT_FOR_ACK);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_State *)RECEIVE_PACKET {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, RECEIVE_PACKET);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_State *)SEND_ACK {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, SEND_ACK);
}

+ (IOSObjectArray *)values {
  return ComStSt25sdkFtmprotocolFtmProtocol_State_values();
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_State *)valueOfWithNSString:(NSString *)name {
  return ComStSt25sdkFtmprotocolFtmProtocol_State_valueOfWithNSString_(name);
}

- (ComStSt25sdkFtmprotocolFtmProtocol_State_Enum)toNSEnum {
  return (ComStSt25sdkFtmprotocolFtmProtocol_State_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComStSt25sdkFtmprotocolFtmProtocol_State;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkFtmprotocolFtmProtocol_State;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IDLE", "LComStSt25sdkFtmprotocolFtmProtocol_State;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "PREPARE_PACKET", "LComStSt25sdkFtmprotocolFtmProtocol_State;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "SEND_PACKET", "LComStSt25sdkFtmprotocolFtmProtocol_State;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "WAIT_FOR_ACK", "LComStSt25sdkFtmprotocolFtmProtocol_State;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "RECEIVE_PACKET", "LComStSt25sdkFtmprotocolFtmProtocol_State;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "SEND_ACK", "LComStSt25sdkFtmprotocolFtmProtocol_State;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, IDLE), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, PREPARE_PACKET), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, SEND_PACKET), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, WAIT_FOR_ACK), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, RECEIVE_PACKET), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, SEND_ACK), "LComStSt25sdkFtmprotocolFtmProtocol;", "Ljava/lang/Enum<Lcom/st/st25sdk/ftmprotocol/FtmProtocol$State;>;" };
  static const J2ObjcClassInfo _ComStSt25sdkFtmprotocolFtmProtocol_State = { "State", "com.st.st25sdk.ftmprotocol", ptrTable, methods, fields, 7, 0x401c, 2, 6, 8, -1, -1, 9, -1 };
  return &_ComStSt25sdkFtmprotocolFtmProtocol_State;
}

+ (void)initialize {
  if (self == [ComStSt25sdkFtmprotocolFtmProtocol_State class]) {
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, IDLE) = new_ComStSt25sdkFtmprotocolFtmProtocol_State_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_State_class_(), 0), 0);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, PREPARE_PACKET) = new_ComStSt25sdkFtmprotocolFtmProtocol_State_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_State_class_(), 1), 1);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, SEND_PACKET) = new_ComStSt25sdkFtmprotocolFtmProtocol_State_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_State_class_(), 2), 2);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, WAIT_FOR_ACK) = new_ComStSt25sdkFtmprotocolFtmProtocol_State_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_State_class_(), 3), 3);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, RECEIVE_PACKET) = new_ComStSt25sdkFtmprotocolFtmProtocol_State_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_State_class_(), 4), 4);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, SEND_ACK) = new_ComStSt25sdkFtmprotocolFtmProtocol_State_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_State_class_(), 5), 5);
    J2OBJC_SET_INITIALIZED(ComStSt25sdkFtmprotocolFtmProtocol_State)
  }
}

@end

void ComStSt25sdkFtmprotocolFtmProtocol_State_initWithNSString_withInt_(ComStSt25sdkFtmprotocolFtmProtocol_State *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComStSt25sdkFtmprotocolFtmProtocol_State *new_ComStSt25sdkFtmprotocolFtmProtocol_State_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComStSt25sdkFtmprotocolFtmProtocol_State, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComStSt25sdkFtmprotocolFtmProtocol_State_values() {
  ComStSt25sdkFtmprotocolFtmProtocol_State_initialize();
  return [IOSObjectArray arrayWithObjects:ComStSt25sdkFtmprotocolFtmProtocol_State_values_ count:6 type:ComStSt25sdkFtmprotocolFtmProtocol_State_class_()];
}

ComStSt25sdkFtmprotocolFtmProtocol_State *ComStSt25sdkFtmprotocolFtmProtocol_State_valueOfWithNSString_(NSString *name) {
  ComStSt25sdkFtmprotocolFtmProtocol_State_initialize();
  for (int i = 0; i < 6; i++) {
    ComStSt25sdkFtmprotocolFtmProtocol_State *e = ComStSt25sdkFtmprotocolFtmProtocol_State_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComStSt25sdkFtmprotocolFtmProtocol_State *ComStSt25sdkFtmprotocolFtmProtocol_State_fromOrdinal(NSUInteger ordinal) {
  ComStSt25sdkFtmprotocolFtmProtocol_State_initialize();
  if (ordinal >= 6) {
    return nil;
  }
  return ComStSt25sdkFtmprotocolFtmProtocol_State_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkFtmprotocolFtmProtocol_State)

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus)

ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_values_[5];

@implementation ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus

+ (ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *)WAITING_FOR_FIRST_PACKET {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_FIRST_PACKET);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *)WAITING_FOR_RETRANSMISSION {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_RETRANSMISSION);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *)WAITING_FOR_FIRST_SEGMENT_PACKET {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_FIRST_SEGMENT_PACKET);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *)WAITING_FOR_NEXT_SEGMENT_PACKET {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_NEXT_SEGMENT_PACKET);
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *)WAITING_FOR_PACKETS_WITHOUT_ACK {
  return JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_PACKETS_WITHOUT_ACK);
}

+ (IOSObjectArray *)values {
  return ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_values();
}

+ (ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *)valueOfWithNSString:(NSString *)name {
  return ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_valueOfWithNSString_(name);
}

- (ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_Enum)toNSEnum {
  return (ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "WAITING_FOR_FIRST_PACKET", "LComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "WAITING_FOR_RETRANSMISSION", "LComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "WAITING_FOR_FIRST_SEGMENT_PACKET", "LComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "WAITING_FOR_NEXT_SEGMENT_PACKET", "LComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "WAITING_FOR_PACKETS_WITHOUT_ACK", "LComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_FIRST_PACKET), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_RETRANSMISSION), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_FIRST_SEGMENT_PACKET), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_NEXT_SEGMENT_PACKET), &JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_PACKETS_WITHOUT_ACK), "LComStSt25sdkFtmprotocolFtmProtocol;", "Ljava/lang/Enum<Lcom/st/st25sdk/ftmprotocol/FtmProtocol$ReceptionStatus;>;" };
  static const J2ObjcClassInfo _ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus = { "ReceptionStatus", "com.st.st25sdk.ftmprotocol", ptrTable, methods, fields, 7, 0x4019, 2, 5, 7, -1, -1, 8, -1 };
  return &_ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus;
}

+ (void)initialize {
  if (self == [ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus class]) {
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_FIRST_PACKET) = new_ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_class_(), 0), 0);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_RETRANSMISSION) = new_ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_class_(), 1), 1);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_FIRST_SEGMENT_PACKET) = new_ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_class_(), 2), 2);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_NEXT_SEGMENT_PACKET) = new_ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_class_(), 3), 3);
    JreEnum(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, WAITING_FOR_PACKETS_WITHOUT_ACK) = new_ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_class_(), 4), 4);
    J2OBJC_SET_INITIALIZED(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus)
  }
}

@end

void ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_initWithNSString_withInt_(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *new_ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_values() {
  ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_initialize();
  return [IOSObjectArray arrayWithObjects:ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_values_ count:5 type:ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_class_()];
}

ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_valueOfWithNSString_(NSString *name) {
  ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_initialize();
  for (int i = 0; i < 5; i++) {
    ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *e = ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus *ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_fromOrdinal(NSUInteger ordinal) {
  ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkFtmprotocolFtmProtocol_ReceptionStatus)

@implementation ComStSt25sdkFtmprotocolFtmProtocol_1

- (instancetype)initWithComStSt25sdkFtmprotocolFtmProtocol:(ComStSt25sdkFtmprotocolFtmProtocol *)outer$ {
  ComStSt25sdkFtmprotocolFtmProtocol_1_initWithComStSt25sdkFtmprotocolFtmProtocol_(self, outer$);
  return self;
}

- (void)transferDoneWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus:(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus *)transferStatus
                                                            withByteArray:(IOSByteArray *)response {
  this$0_->mFtmReceivedData_ = response;
  this$0_->mFtmTransferStatus_ = transferStatus;
  @synchronized(self) {
    this$0_->mTransferDone_ = true;
    [self java_notifyAll];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkFtmprotocolFtmProtocol:);
  methods[1].selector = @selector(transferDoneWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComStSt25sdkFtmprotocolFtmProtocol;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "transferDone", "LComStSt25sdkFtmprotocolFtmProtocol_TransferStatus;[B", "LComStSt25sdkFtmprotocolFtmProtocol;", "sendFtmDataAndWaitForCompletionWithByteArray:withBoolean:withBoolean:withComStSt25sdkFtmprotocolFtmProtocol_TransferProgressionListener:withInt:withByte:" };
  static const J2ObjcClassInfo _ComStSt25sdkFtmprotocolFtmProtocol_1 = { "", "com.st.st25sdk.ftmprotocol", ptrTable, methods, fields, 7, 0x8010, 2, 1, 2, -1, 3, -1, -1 };
  return &_ComStSt25sdkFtmprotocolFtmProtocol_1;
}

@end

void ComStSt25sdkFtmprotocolFtmProtocol_1_initWithComStSt25sdkFtmprotocolFtmProtocol_(ComStSt25sdkFtmprotocolFtmProtocol_1 *self, ComStSt25sdkFtmprotocolFtmProtocol *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComStSt25sdkFtmprotocolFtmProtocol_1 *new_ComStSt25sdkFtmprotocolFtmProtocol_1_initWithComStSt25sdkFtmprotocolFtmProtocol_(ComStSt25sdkFtmprotocolFtmProtocol *outer$) {
  J2OBJC_NEW_IMPL(ComStSt25sdkFtmprotocolFtmProtocol_1, initWithComStSt25sdkFtmprotocolFtmProtocol_, outer$)
}

ComStSt25sdkFtmprotocolFtmProtocol_1 *create_ComStSt25sdkFtmprotocolFtmProtocol_1_initWithComStSt25sdkFtmprotocolFtmProtocol_(ComStSt25sdkFtmprotocolFtmProtocol *outer$) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkFtmprotocolFtmProtocol_1, initWithComStSt25sdkFtmprotocolFtmProtocol_, outer$)
}

@implementation ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1

- (void)run {
  ComStSt25sdkSTLog_iWithNSString_(@"FtmProtocol thread created");
  this$0_->mFtmTheadRunning_ = true;
  while (this$0_->mFtmTheadRunning_) {
    @try {
      if (this$0_->mCancelCurrentTransfer_) {
        if (this$0_->mState_ != JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, IDLE)) {
          ComStSt25sdkSTLog_wWithNSString_(@"Transmission cancelled");
          this$0_->mCancelCurrentTransfer_ = false;
          ComStSt25sdkFtmprotocolFtmProtocol_finalizeTransferWithComStSt25sdkFtmprotocolFtmProtocol_TransferStatus_withByteArray_(this$0_, JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_TransferStatus, TRANSFER_CANCELLED), nil);
        }
      }
      if (this$0_->mPauseCurrentTransfer_) {
        ComStSt25sdkFtmprotocolFtmProtocol_sleepInMsWithLong_(this$0_, this$0_->mSleepTimeInMsWhenPaused_);
        continue;
      }
      switch ([this$0_->mState_ ordinal]) {
        default:
        case ComStSt25sdkFtmprotocolFtmProtocol_State_Enum_IDLE:
        [((JavaUtilConcurrentSemaphore *) nil_chk(this$0_->ftmSemaphore_)) acquire];
        ComStSt25sdkSTLog_iWithNSString_(@"FTM Semaphore received");
        break;
        case ComStSt25sdkFtmprotocolFtmProtocol_State_Enum_PREPARE_PACKET:
        ComStSt25sdkFtmprotocolFtmProtocol_sendNextPacket(this$0_);
        ComStSt25sdkFtmprotocolFtmProtocol_sleepBetweenSendCmds(this$0_);
        break;
        case ComStSt25sdkFtmprotocolFtmProtocol_State_Enum_SEND_PACKET:
        ComStSt25sdkFtmprotocolFtmProtocol_resendPacket(this$0_);
        ComStSt25sdkFtmprotocolFtmProtocol_sleepBetweenSendCmds(this$0_);
        break;
        case ComStSt25sdkFtmprotocolFtmProtocol_State_Enum_WAIT_FOR_ACK:
        ComStSt25sdkFtmprotocolFtmProtocol_waitForAcknowledge(this$0_);
        if (this$0_->mState_ == JreLoadEnum(ComStSt25sdkFtmprotocolFtmProtocol_State, WAIT_FOR_ACK)) {
          ComStSt25sdkFtmprotocolFtmProtocol_sleepWhenWaitingForAck(this$0_);
        }
        break;
        case ComStSt25sdkFtmprotocolFtmProtocol_State_Enum_RECEIVE_PACKET:
        if (ComStSt25sdkFtmprotocolFtmProtocol_isMailboxAvailableForReading(this$0_)) {
          [this$0_ resetTimeOfFirstError];
          ComStSt25sdkFtmprotocolFtmProtocol_receiveNextPacket(this$0_);
        }
        else {
          jlong timeSinceFirstError = ComStSt25sdkFtmprotocolFtmProtocol_getTimeSinceFirstError(this$0_);
          if (timeSinceFirstError > this$0_->mTimeOutInMs_) {
            ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(this$0_, @"Error! Timeout when waiting data from MCU");
          }
        }
        ComStSt25sdkFtmprotocolFtmProtocol_sleepBetweenReceiveCmds(this$0_);
        break;
        case ComStSt25sdkFtmprotocolFtmProtocol_State_Enum_SEND_ACK:
        ComStSt25sdkFtmprotocolFtmProtocol_sendAcknowledge(this$0_);
        break;
      }
    }
    @catch (JavaLangInterruptedException *e) {
      [e printStackTrace];
      ComStSt25sdkFtmprotocolFtmProtocol_handleFatalErrorWithNSString_(this$0_, @"Thread sleep interrupted");
    }
  }
  ComStSt25sdkSTLog_iWithNSString_(@"FtmProtocol thread stopped");
}

@end

void ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1_initWithComStSt25sdkFtmprotocolFtmProtocol_(ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1 *self, ComStSt25sdkFtmprotocolFtmProtocol *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1 *new_ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1_initWithComStSt25sdkFtmprotocolFtmProtocol_(ComStSt25sdkFtmprotocolFtmProtocol *outer$) {
  J2OBJC_NEW_IMPL(ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1, initWithComStSt25sdkFtmprotocolFtmProtocol_, outer$)
}

ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1 *create_ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1_initWithComStSt25sdkFtmprotocolFtmProtocol_(ComStSt25sdkFtmprotocolFtmProtocol *outer$) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkFtmprotocolFtmProtocol_$Lambda$1, initWithComStSt25sdkFtmprotocolFtmProtocol_, outer$)
}
