//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type5/STVicinityTag.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/NFCTag.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/TagCache.h"
#include "com/st/st25sdk/TagHelper.h"
#include "com/st/st25sdk/command/Iso15693Command.h"
#include "com/st/st25sdk/command/Iso15693CustomCommand.h"
#include "com/st/st25sdk/command/NdefVicinityCommand.h"
#include "com/st/st25sdk/command/VicinityCommand.h"
#include "com/st/st25sdk/command/VicinityMemoryCommand.h"
#include "com/st/st25sdk/ndef/NDEFMsg.h"
#include "com/st/st25sdk/type5/CCFileVicinity.h"
#include "com/st/st25sdk/type5/ReadBlockResult.h"
#include "com/st/st25sdk/type5/STType5Sector.h"
#include "com/st/st25sdk/type5/STType5Tag.h"
#include "com/st/st25sdk/type5/STVicinityTag.h"
#include "com/st/st25sdk/type5/SysFile.h"
#include "com/st/st25sdk/type5/SysFileVicinity.h"
#include "java/lang/Exception.h"
#include "java/util/Arrays.h"

@interface ComStSt25sdkType5STVicinityTag ()

- (jboolean)isPasswordNumberValidWithInt:(jint)passwordNumber;

@end

__attribute__((unused)) static jboolean ComStSt25sdkType5STVicinityTag_isPasswordNumberValidWithInt_(ComStSt25sdkType5STVicinityTag *self, jint passwordNumber);

@implementation ComStSt25sdkType5STVicinityTag

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)readerInterface
                                        withByteArray:(IOSByteArray *)uid
                                              withInt:(jint)nbOfSectors
                                              withInt:(jint)nbOfBlocksPerSector {
  ComStSt25sdkType5STVicinityTag_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_withInt_(self, readerInterface, uid, nbOfSectors, nbOfBlocksPerSector);
  return self;
}

- (void)setMaxReadMultipleBlocksReturnedWithInt:(jint)maxReadMultipleBlocksReturned {
  [super setMaxReadMultipleBlocksReturnedWithInt:maxReadMultipleBlocksReturned];
  [((ComStSt25sdkCommandVicinityMemoryCommand *) nil_chk(mVicinityMemoryCommand_)) setTagMaxReadMultipleBlockLengthWithInt:mMaxReadMultipleBlocksReturned_];
  [((ComStSt25sdkCommandNdefVicinityCommand *) nil_chk(mNdefVicinityCmd_)) setTagMaxReadMultipleBlockLengthWithInt:mMaxReadMultipleBlocksReturned_];
}

- (void)writeNdefMessageWithComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg {
  [self writeNdefMessageWithComStSt25sdkNdefNDEFMsg:msg withByte:[((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) getFlag] withBoolean:true];
}

- (void)writeNdefMessageWithComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg
                                           withByte:(jbyte)flag {
  [self writeNdefMessageWithComStSt25sdkNdefNDEFMsg:msg withByte:flag withBoolean:true];
}

- (void)writeNdefMessageWithComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg
                                        withBoolean:(jboolean)updateCCFile {
  [self writeNdefMessageWithComStSt25sdkNdefNDEFMsg:msg withByte:[((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) getFlag] withBoolean:updateCCFile];
}

- (void)writeNdefMessageWithComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg
                                           withByte:(jbyte)flag
                                        withBoolean:(jboolean)updateCCFile {
  jint tlSize = 2;
  jint terminatorTlvLength = 1;
  jint ccfileLength;
  jint ccMemorySize;
  jint ndefLength;
  @try {
    ndefLength = [((ComStSt25sdkNdefNDEFMsg *) nil_chk(msg)) getLength];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_NDEF_DATA));
  }
  if (updateCCFile) {
    if (![self isCCFileValid]) {
      [self initEmptyCCFile];
      if (mNdefMsg_ != nil) {
        [((ComStSt25sdkTagCache *) nil_chk(mCache_)) removeWithId:mNdefMsg_];
      }
      [self writeCCFile];
    }
  }
  ccfileLength = [self getCCFileLength];
  ccMemorySize = [self getCCMemorySize];
  if (ccfileLength > 0) {
    if ((ccMemorySize - ccfileLength - tlSize - terminatorTlvLength) >= ndefLength) {
      if (mNdefMsg_ != nil) {
        [((ComStSt25sdkTagCache *) nil_chk(mCache_)) removeWithId:mNdefMsg_];
      }
      [((ComStSt25sdkCommandNdefVicinityCommand *) nil_chk(mNdefVicinityCmd_)) writeNdefMessageWithInt:(jbyte) ccfileLength / [self getBlockSizeInBytes] withComStSt25sdkNdefNDEFMsg:msg withByte:flag withByteArray:mUid_];
    }
    else {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NDEF_MESSAGE_TOO_BIG));
    }
  }
  else {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE));
  }
  mNdefMsg_ = [msg copy__];
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) addWithId:mNdefMsg_];
}

- (ComStSt25sdkNdefNDEFMsg *)readNdefMessage {
  return [self readNdefMessageWithByte:[((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) getFlag]];
}

- (ComStSt25sdkNdefNDEFMsg *)readNdefMessageWithByte:(jbyte)flag {
  if ([((ComStSt25sdkTagCache *) nil_chk(mCache_)) isCacheActivated] && [((ComStSt25sdkTagCache *) nil_chk(mCache_)) isCacheValidWithId:mNdefMsg_]) return [((ComStSt25sdkNdefNDEFMsg *) nil_chk(mNdefMsg_)) copy__];
  jint offsetInBlocks = [self getCCFileLength] / [self getBlockSizeInBytes];
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) removeWithId:mNdefMsg_];
  mNdefMsg_ = [((ComStSt25sdkCommandNdefVicinityCommand *) nil_chk(mNdefVicinityCmd_)) readNdefMessageWithInt:offsetInBlocks withByte:flag withByteArray:[self getUid]];
  if (mNdefMsg_ != nil) {
    [((ComStSt25sdkTagCache *) nil_chk(mCache_)) addWithId:mNdefMsg_];
    return [((ComStSt25sdkNdefNDEFMsg *) nil_chk(mNdefMsg_)) copy__];
  }
  return nil;
}

- (IOSByteArray *)readBytesWithInt:(jint)byteAddress
                           withInt:(jint)sizeInBytes {
  return [self readBytesWithInt:byteAddress withInt:sizeInBytes withByte:[((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) getFlag]];
}

- (IOSByteArray *)readBytesWithInt:(jint)byteAddress
                           withInt:(jint)sizeInBytes
                          withByte:(jbyte)flag {
  jint memSizeInBytes = [self getMemSizeInBytes];
  if ((byteAddress < 0) || (byteAddress >= memSizeInBytes)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ((byteAddress + sizeInBytes) > memSizeInBytes) {
    sizeInBytes = memSizeInBytes - byteAddress;
  }
  return [((ComStSt25sdkCommandVicinityMemoryCommand *) nil_chk(mVicinityMemoryCommand_)) readBytesWithInt:byteAddress withInt:sizeInBytes withByte:flag withByteArray:[self getUid]];
}

- (void)writeBytesWithInt:(jint)byteAddress
            withByteArray:(IOSByteArray *)data {
  [self writeBytesWithInt:byteAddress withByteArray:data withByte:[((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) getFlag]];
}

- (void)writeBytesWithInt:(jint)byteAddress
            withByteArray:(IOSByteArray *)data
                 withByte:(jbyte)flag {
  if ((byteAddress < 0) || ((byteAddress + ((IOSByteArray *) nil_chk(data))->size_) > [self getMemSizeInBytes])) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  [((ComStSt25sdkCommandVicinityMemoryCommand *) nil_chk(mVicinityMemoryCommand_)) writeBytesWithInt:byteAddress withByteArray:data withByte:flag withByteArray:[self getUid]];
}

- (ComStSt25sdkType5ReadBlockResult *)readBlocksWithInt:(jint)firstBlockAddress
                                                withInt:(jint)sizeInBlocks {
  return [((ComStSt25sdkCommandVicinityMemoryCommand *) nil_chk(mVicinityMemoryCommand_)) readBlocksWithInt:firstBlockAddress withInt:sizeInBlocks];
}

- (ComStSt25sdkType5ReadBlockResult *)readBlocksWithInt:(jint)firstBlockAddress
                                                withInt:(jint)sizeInBlocks
                                               withByte:(jbyte)flag {
  return [((ComStSt25sdkCommandVicinityMemoryCommand *) nil_chk(mVicinityMemoryCommand_)) readBlocksWithInt:firstBlockAddress withInt:sizeInBlocks withByte:flag withByteArray:[self getUid]];
}

- (void)writeBlocksWithInt:(jint)firstBlockAddress
             withByteArray:(IOSByteArray *)data {
  [((ComStSt25sdkCommandVicinityMemoryCommand *) nil_chk(mVicinityMemoryCommand_)) writeBlocksWithInt:firstBlockAddress withByteArray:data];
}

- (void)writeBlocksWithInt:(jint)firstBlockAddress
             withByteArray:(IOSByteArray *)data
                  withByte:(jbyte)flag {
  [((ComStSt25sdkCommandVicinityMemoryCommand *) nil_chk(mVicinityMemoryCommand_)) writeBlocksWithInt:firstBlockAddress withByteArray:data withByte:flag withByteArray:[self getUid]];
}

- (void)initEmptyCCFile {
  jint memSize = [self getMemSizeInBytes];
  [((ComStSt25sdkType5CCFileVicinity *) nil_chk(mCCFile_STVicinityTag_)) initEmptyCCFileWithInt:memSize];
}

- (jint)getExpectedCCFileLength {
  if ([((ComStSt25sdkType5CCFileVicinity *) nil_chk(mCCFile_STVicinityTag_)) getUseCCFileOn4Bytes]) {
    return 4;
  }
  else {
    return 8;
  }
}

- (jint)getCCFileLength {
  return [((ComStSt25sdkType5CCFileVicinity *) nil_chk(mCCFile_STVicinityTag_)) getCCLength];
}

- (IOSByteArray *)readCCFile {
  return [((ComStSt25sdkType5CCFileVicinity *) nil_chk(mCCFile_STVicinityTag_)) read];
}

- (void)writeCCFile {
  [((ComStSt25sdkType5CCFileVicinity *) nil_chk(mCCFile_STVicinityTag_)) write];
}

- (void)writeCCFileWithByteArray:(IOSByteArray *)buffer {
  [((ComStSt25sdkType5CCFileVicinity *) nil_chk(mCCFile_STVicinityTag_)) writeWithByteArray:buffer];
}

- (jbyte)getCCMagicNumber {
  return [((ComStSt25sdkType5CCFileVicinity *) nil_chk(mCCFile_STVicinityTag_)) getMagicNumber];
}

- (jbyte)getCCMappingVersion {
  return [((ComStSt25sdkType5CCFileVicinity *) nil_chk(mCCFile_STVicinityTag_)) getCCMappingVersion];
}

- (jbyte)getCCReadAccess {
  return [((ComStSt25sdkType5CCFileVicinity *) nil_chk(mCCFile_STVicinityTag_)) getCCReadAccess];
}

- (jbyte)getCCWriteAccess {
  return [((ComStSt25sdkType5CCFileVicinity *) nil_chk(mCCFile_STVicinityTag_)) getCCWriteAccess];
}

- (jint)getCCMemorySize {
  return [((ComStSt25sdkType5CCFileVicinity *) nil_chk(mCCFile_STVicinityTag_)) getDataAreaSize];
}

- (IOSByteArray *)readSingleBlockWithInt:(jint)blockAddress {
  return [self readSingleBlockWithInt:blockAddress withByte:[((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) getFlag]];
}

- (IOSByteArray *)readSingleBlockWithInt:(jint)blockAddress
                                withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFFFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) readSingleBlockWithByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(blockAddress) withByte:flag withByteArray:mUid_];
}

- (jbyte)writeSingleBlockWithInt:(jint)blockAddress
                   withByteArray:(IOSByteArray *)buffer {
  return [self writeSingleBlockWithInt:blockAddress withByteArray:buffer withByte:[((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) getFlag]];
}

- (jbyte)writeSingleBlockWithInt:(jint)blockAddress
                   withByteArray:(IOSByteArray *)buffer
                        withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFFFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) writeSingleBlockWithByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(blockAddress) withByteArray:buffer withByte:flag withByteArray:mUid_];
}

- (IOSByteArray *)readMultipleBlockWithInt:(jint)blockAddress
                                   withInt:(jint)numberOfBlocks {
  return [self readMultipleBlockWithInt:blockAddress withInt:numberOfBlocks withByte:[((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) getFlag]];
}

- (IOSByteArray *)readMultipleBlockWithInt:(jint)blockAddress
                                   withInt:(jint)numberOfBlocks
                                  withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFFFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (blockAddress < 0 || blockAddress > (jint) 0xFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) readMultipleBlockWithByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(blockAddress) withByte:(jbyte) numberOfBlocks withByte:flag withByteArray:mUid_];
}

- (IOSByteArray *)fastReadSingleBlockWithInt:(jint)blockAddress {
  return [self fastReadSingleBlockWithInt:blockAddress withByte:[((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) getFlag]];
}

- (IOSByteArray *)fastReadSingleBlockWithInt:(jint)blockAddress
                                    withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFFFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) fastReadSingleBlockWithByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(blockAddress) withByte:flag withByteArray:[self getUid]];
}

- (IOSByteArray *)fastReadMultipleBlockWithInt:(jint)blockAddress
                                       withInt:(jint)numberOfBlocks {
  return [self fastReadMultipleBlockWithInt:blockAddress withInt:numberOfBlocks withByte:[((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) getFlag]];
}

- (IOSByteArray *)fastReadMultipleBlockWithInt:(jint)blockAddress
                                       withInt:(jint)numberOfBlocks
                                      withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFFFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (numberOfBlocks < 0 || numberOfBlocks > (jint) 0xFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) fastReadMultipleBlockWithByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(blockAddress) withByte:(jbyte) numberOfBlocks withByte:flag withByteArray:[self getUid]];
}

- (IOSByteArray *)readSysFile {
  return [((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) getSystemInfo];
}

- (jint)getMemSizeInBytes {
  return [self getNumberOfBlocks] * [self getBlockSizeInBytes];
}

- (jint)getNumberOfSectors {
  return mNbOfSectors_;
}

- (jint)getNumberOfBlocksPerSector {
  return mNbOfBlocksPerSector_;
}

- (jbyte)getSecurityStatusWithInt:(jint)sector {
  if (mSectorSec_ != nil) return [mSectorSec_ getSecurityStatusWithInt:sector];
  return (jbyte) (jint) 0xFF;
}

- (IOSByteArray *)getSecurityStatus {
  if (mSectorSec_ != nil) return [mSectorSec_ getSecurityStatus];
  return [IOSByteArray newArrayWithLength:0];
}

- (void)setSecurityStatusWithInt:(jint)sector
                        withByte:(jbyte)value {
  if (mSectorSec_ != nil) [mSectorSec_ setSecurityStatusWithInt:sector withByte:value];
}

- (jboolean)isPasswordNumberValidWithInt:(jint)passwordNumber {
  return ComStSt25sdkType5STVicinityTag_isPasswordNumberValidWithInt_(self, passwordNumber);
}

- (void)presentPasswordWithInt:(jint)passwordNumber
                 withByteArray:(IOSByteArray *)password {
  if (!ComStSt25sdkType5STVicinityTag_isPasswordNumberValidWithInt_(self, passwordNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  [((ComStSt25sdkCommandIso15693CustomCommand *) nil_chk(mIso15693CustomCommand_)) presentPwdWithByte:(jbyte) passwordNumber withByteArray:password];
}

- (void)writePasswordWithInt:(jint)passwordNumber
               withByteArray:(IOSByteArray *)newPassword {
  if (!ComStSt25sdkType5STVicinityTag_isPasswordNumberValidWithInt_(self, passwordNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  [((ComStSt25sdkCommandIso15693CustomCommand *) nil_chk(mIso15693CustomCommand_)) writePwdWithByte:(jbyte) passwordNumber withByteArray:newPassword];
}

- (jint)getPasswordLengthWithInt:(jint)passwordNumber {
  return ComStSt25sdkTagHelper_PWD_ON_32_BITS;
}

- (jint)getConfigurationPasswordNumber {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jint)getPasswordNumberWithInt:(jint)sector {
  if (mSectorSec_ != nil) return ((JreRShift32([mSectorSec_ getSecurityStatusWithInt:sector], 3)) & (jint) 0x03);
  else @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
}

- (void)setPasswordNumberWithInt:(jint)sector
                         withInt:(jint)passwordNumber {
  if (!ComStSt25sdkType5STVicinityTag_isPasswordNumberValidWithInt_(self, passwordNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (mSectorSec_ != nil) [mSectorSec_ setSecurityStatusWithInt:sector withByte:(jbyte) (JreLShift32(passwordNumber, 3))];
  else @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
}

- (IOSByteArray *)getMultipleBlockSecurityStatusWithInt:(jint)blockAddress
                                                withInt:(jint)numberOfBlocks {
  return [self getMultipleBlockSecurityStatusWithInt:blockAddress withInt:numberOfBlocks withByte:[((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getFlag]];
}

- (IOSByteArray *)getMultipleBlockSecurityStatusWithInt:(jint)blockAddress
                                                withInt:(jint)numberOfBlocks
                                               withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFFFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (numberOfBlocks < 0 || numberOfBlocks > (jint) 0xFFFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandVicinityCommand *) nil_chk(mCmd_)) getMultipleBlockSecStatusWithByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(blockAddress) withByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(numberOfBlocks) withByte:flag withByteArray:[self getUid]];
}

- (jboolean)getUseCCFileOn4Bytes {
  return [((ComStSt25sdkType5CCFileVicinity *) nil_chk(mCCFile_STVicinityTag_)) getUseCCFileOn4Bytes];
}

- (void)setUseCCFileOn4BytesWithBoolean:(jboolean)useCCFileOn4Bytes {
  [((ComStSt25sdkType5CCFileVicinity *) nil_chk(mCCFile_STVicinityTag_)) setUseCCFileOn4BytesWithBoolean:useCCFileOn4Bytes];
}

- (IOSByteArray *)getExpectedCCFileData {
  jint memSize = [self getMemSizeInBytes];
  ComStSt25sdkType5CCFileVicinity *expectedCCFile = new_ComStSt25sdkType5CCFileVicinity_initWithComStSt25sdkCommandVicinityMemoryCommand_(mVicinityMemoryCommand_);
  [expectedCCFile initEmptyCCFileWithInt:memSize];
  IOSByteArray *expectedCCFileData = [expectedCCFile rebuildBuffer];
  return expectedCCFileData;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 7, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 8, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkNdefNDEFMsg;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkNdefNDEFMsg;", 0x1, 9, 10, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 12, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 13, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 16, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkType5ReadBlockResult;", 0x1, 17, 12, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkType5ReadBlockResult;", 0x1, 17, 13, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 15, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 16, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 21, 3, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 21, 22, 1, -1, -1, -1 },
    { NULL, "B", 0x1, 23, 15, 1, -1, -1, -1 },
    { NULL, "B", 0x1, 23, 16, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 24, 12, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 24, 13, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 25, 3, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 25, 22, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 26, 12, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 26, 13, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, 27, 3, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 22, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, 29, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 15, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 15, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 32, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 33, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 12, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 35, 12, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 35, 13, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withInt:withInt:);
  methods[1].selector = @selector(setMaxReadMultipleBlocksReturnedWithInt:);
  methods[2].selector = @selector(writeNdefMessageWithComStSt25sdkNdefNDEFMsg:);
  methods[3].selector = @selector(writeNdefMessageWithComStSt25sdkNdefNDEFMsg:withByte:);
  methods[4].selector = @selector(writeNdefMessageWithComStSt25sdkNdefNDEFMsg:withBoolean:);
  methods[5].selector = @selector(writeNdefMessageWithComStSt25sdkNdefNDEFMsg:withByte:withBoolean:);
  methods[6].selector = @selector(readNdefMessage);
  methods[7].selector = @selector(readNdefMessageWithByte:);
  methods[8].selector = @selector(readBytesWithInt:withInt:);
  methods[9].selector = @selector(readBytesWithInt:withInt:withByte:);
  methods[10].selector = @selector(writeBytesWithInt:withByteArray:);
  methods[11].selector = @selector(writeBytesWithInt:withByteArray:withByte:);
  methods[12].selector = @selector(readBlocksWithInt:withInt:);
  methods[13].selector = @selector(readBlocksWithInt:withInt:withByte:);
  methods[14].selector = @selector(writeBlocksWithInt:withByteArray:);
  methods[15].selector = @selector(writeBlocksWithInt:withByteArray:withByte:);
  methods[16].selector = @selector(initEmptyCCFile);
  methods[17].selector = @selector(getExpectedCCFileLength);
  methods[18].selector = @selector(getCCFileLength);
  methods[19].selector = @selector(readCCFile);
  methods[20].selector = @selector(writeCCFile);
  methods[21].selector = @selector(writeCCFileWithByteArray:);
  methods[22].selector = @selector(getCCMagicNumber);
  methods[23].selector = @selector(getCCMappingVersion);
  methods[24].selector = @selector(getCCReadAccess);
  methods[25].selector = @selector(getCCWriteAccess);
  methods[26].selector = @selector(getCCMemorySize);
  methods[27].selector = @selector(readSingleBlockWithInt:);
  methods[28].selector = @selector(readSingleBlockWithInt:withByte:);
  methods[29].selector = @selector(writeSingleBlockWithInt:withByteArray:);
  methods[30].selector = @selector(writeSingleBlockWithInt:withByteArray:withByte:);
  methods[31].selector = @selector(readMultipleBlockWithInt:withInt:);
  methods[32].selector = @selector(readMultipleBlockWithInt:withInt:withByte:);
  methods[33].selector = @selector(fastReadSingleBlockWithInt:);
  methods[34].selector = @selector(fastReadSingleBlockWithInt:withByte:);
  methods[35].selector = @selector(fastReadMultipleBlockWithInt:withInt:);
  methods[36].selector = @selector(fastReadMultipleBlockWithInt:withInt:withByte:);
  methods[37].selector = @selector(readSysFile);
  methods[38].selector = @selector(getMemSizeInBytes);
  methods[39].selector = @selector(getNumberOfSectors);
  methods[40].selector = @selector(getNumberOfBlocksPerSector);
  methods[41].selector = @selector(getSecurityStatusWithInt:);
  methods[42].selector = @selector(getSecurityStatus);
  methods[43].selector = @selector(setSecurityStatusWithInt:withByte:);
  methods[44].selector = @selector(isPasswordNumberValidWithInt:);
  methods[45].selector = @selector(presentPasswordWithInt:withByteArray:);
  methods[46].selector = @selector(writePasswordWithInt:withByteArray:);
  methods[47].selector = @selector(getPasswordLengthWithInt:);
  methods[48].selector = @selector(getConfigurationPasswordNumber);
  methods[49].selector = @selector(getPasswordNumberWithInt:);
  methods[50].selector = @selector(setPasswordNumberWithInt:withInt:);
  methods[51].selector = @selector(getMultipleBlockSecurityStatusWithInt:withInt:);
  methods[52].selector = @selector(getMultipleBlockSecurityStatusWithInt:withInt:withByte:);
  methods[53].selector = @selector(getUseCCFileOn4Bytes);
  methods[54].selector = @selector(setUseCCFileOn4BytesWithBoolean:);
  methods[55].selector = @selector(getExpectedCCFileData);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mCCFile_STVicinityTag_", "LComStSt25sdkType5CCFileVicinity;", .constantValue.asLong = 0, 0x4, 38, -1, -1, -1 },
    { "mCmd_", "LComStSt25sdkCommandVicinityCommand;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mNdefVicinityCmd_", "LComStSt25sdkCommandNdefVicinityCommand;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mSectorSec_", "LComStSt25sdkType5STType5Sector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mVicinityMemoryCommand_", "LComStSt25sdkCommandVicinityMemoryCommand;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mNbOfSectors_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mNbOfBlocksPerSector_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[BII", "LComStSt25sdkSTException;", "setMaxReadMultipleBlocksReturned", "I", "writeNdefMessage", "LComStSt25sdkNdefNDEFMsg;", "LComStSt25sdkNdefNDEFMsg;B", "LComStSt25sdkNdefNDEFMsg;Z", "LComStSt25sdkNdefNDEFMsg;BZ", "readNdefMessage", "B", "readBytes", "II", "IIB", "writeBytes", "I[B", "I[BB", "readBlocks", "writeBlocks", "writeCCFile", "[B", "readSingleBlock", "IB", "writeSingleBlock", "readMultipleBlock", "fastReadSingleBlock", "fastReadMultipleBlock", "getSecurityStatus", "setSecurityStatus", "isPasswordNumberValid", "presentPassword", "writePassword", "getPasswordLength", "getPasswordNumber", "setPasswordNumber", "getMultipleBlockSecurityStatus", "setUseCCFileOn4Bytes", "Z", "mCCFile" };
  static const J2ObjcClassInfo _ComStSt25sdkType5STVicinityTag = { "STVicinityTag", "com.st.st25sdk.type5", ptrTable, methods, fields, 7, 0x1, 56, 7, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType5STVicinityTag;
}

@end

void ComStSt25sdkType5STVicinityTag_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_withInt_(ComStSt25sdkType5STVicinityTag *self, id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid, jint nbOfSectors, jint nbOfBlocksPerSector) {
  ComStSt25sdkType5STType5Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  self->mAddressingMode_ = JreLoadEnum(ComStSt25sdkNFCTag_TagAddressingMode, NON_ADDRESSED);
  self->mCmd_ = new_ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(readerInterface, uid);
  self->mNdefVicinityCmd_ = new_ComStSt25sdkCommandNdefVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(readerInterface, uid);
  self->mVicinityMemoryCommand_ = new_ComStSt25sdkCommandVicinityMemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(readerInterface, uid);
  self->mCCFile_STVicinityTag_ = new_ComStSt25sdkType5CCFileVicinity_initWithComStSt25sdkCommandVicinityMemoryCommand_(self->mVicinityMemoryCommand_);
  self->mSysFile_ = new_ComStSt25sdkType5SysFileVicinity_initWithComStSt25sdkCommandVicinityCommand_(self->mCmd_);
  self->mUid_ = JavaUtilArrays_copyOfWithByteArray_withInt_(uid, ((IOSByteArray *) nil_chk(uid))->size_);
  self->mDescription_ = @"ISO/IEC 15693";
  [((ComStSt25sdkTagCache *) nil_chk(self->mCache_)) addWithId:self->mCCFile_STVicinityTag_];
  [((ComStSt25sdkTagCache *) nil_chk(self->mCache_)) addWithId:self->mSysFile_];
  self->mNbOfSectors_ = nbOfSectors;
  self->mNbOfBlocksPerSector_ = nbOfBlocksPerSector;
  @try {
    self->mSectorSec_ = new_ComStSt25sdkType5STType5Sector_initWithComStSt25sdkCommandIso15693Protocol_withInt_withInt_(self->mCmd_, nbOfSectors, nbOfBlocksPerSector);
    [((ComStSt25sdkTagCache *) nil_chk(self->mCache_)) addWithId:self->mSectorSec_];
  }
  @catch (ComStSt25sdkSTException *e) {
    ComStSt25sdkSTLog_eWithNSString_(@"No support for sector interface");
  }
}

ComStSt25sdkType5STVicinityTag *new_ComStSt25sdkType5STVicinityTag_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_withInt_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid, jint nbOfSectors, jint nbOfBlocksPerSector) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType5STVicinityTag, initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_withInt_, readerInterface, uid, nbOfSectors, nbOfBlocksPerSector)
}

ComStSt25sdkType5STVicinityTag *create_ComStSt25sdkType5STVicinityTag_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_withInt_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid, jint nbOfSectors, jint nbOfBlocksPerSector) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType5STVicinityTag, initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_withInt_, readerInterface, uid, nbOfSectors, nbOfBlocksPerSector)
}

jboolean ComStSt25sdkType5STVicinityTag_isPasswordNumberValidWithInt_(ComStSt25sdkType5STVicinityTag *self, jint passwordNumber) {
  return (passwordNumber >= 1 && passwordNumber <= 3);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType5STVicinityTag)
