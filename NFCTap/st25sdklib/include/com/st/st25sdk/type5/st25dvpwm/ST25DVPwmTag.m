//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type5/st25dvpwm/ST25DVPwmTag.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/MultiAreaInterface.h"
#include "com/st/st25sdk/NFCTag.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STRegister.h"
#include "com/st/st25sdk/TagCache.h"
#include "com/st/st25sdk/TagHelper.h"
#include "com/st/st25sdk/command/Iso15693CustomCommand.h"
#include "com/st/st25sdk/type5/STType5MultiAreaTag.h"
#include "com/st/st25sdk/type5/st25dvpwm/ST25DV02KWRegisterPwmCtrlSecurityAttribute.h"
#include "com/st/st25sdk/type5/st25dvpwm/ST25DV02KWRegisterPwmRfConfiguration.h"
#include "com/st/st25sdk/type5/st25dvpwm/ST25DVPwmTag.h"
#include "com/st/st25sdk/type5/st25tv/ST25TVRegisterArea1SecurityAttribute.h"
#include "com/st/st25sdk/type5/st25tv/ST25TVRegisterArea2SecurityAttribute.h"
#include "com/st/st25sdk/type5/st25tv/ST25TVRegisterKeyId.h"
#include "com/st/st25sdk/type5/st25tv/ST25TVRegisterLockConfiguration.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface ComStSt25sdkType5St25dvpwmST25DVPwmTag () {
 @public
  JavaUtilTreeMap *mST25DV02KWRegisterMap_;
  ComStSt25sdkType5St25tvST25TVRegisterArea1SecurityAttribute *mRegisterArea1SecurityAttribute_;
  ComStSt25sdkType5St25tvST25TVRegisterArea2SecurityAttribute *mRegisterArea2SecurityAttribute_;
  ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmCtrlSecurityAttribute *mRegisterPwmCtrlSecurityAttribute_;
  ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration *mRegisterPwmRfConfiguration_;
  ComStSt25sdkType5St25tvST25TVRegisterLockConfiguration *mRegisterLockConfiguration_;
  ComStSt25sdkType5St25tvST25TVRegisterKeyId *mRegisterKeyId_;
}

- (jboolean)isPasswordNumberValidWithInt:(jint)passwordNumber;

- (jboolean)isPwmNumberValidWithInt:(jint)pwmNumber;

- (void)writePwmControlWithInt:(jint)pwmNumber
                 withByteArray:(IOSByteArray *)pwmControl;

- (jint)computePeriodFromControlWithByteArray:(IOSByteArray *)control;

- (jint)computePulseWidthFromControlWithByteArray:(IOSByteArray *)control;

- (jint)computeDutyCycleFromControlWithByteArray:(IOSByteArray *)control;

- (jint)computeFreqFromControlWithByteArray:(IOSByteArray *)control;

- (void)computeControlFromPeriodAndPulseWidthWithByteArray:(IOSByteArray *)control
                                                   withInt:(jint)period
                                                   withInt:(jint)pulseWidth
                                               withBoolean:(jboolean)pwmEnable;

@end

J2OBJC_FIELD_SETTER(ComStSt25sdkType5St25dvpwmST25DVPwmTag, mST25DV02KWRegisterMap_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(ComStSt25sdkType5St25dvpwmST25DVPwmTag, mRegisterArea1SecurityAttribute_, ComStSt25sdkType5St25tvST25TVRegisterArea1SecurityAttribute *)
J2OBJC_FIELD_SETTER(ComStSt25sdkType5St25dvpwmST25DVPwmTag, mRegisterArea2SecurityAttribute_, ComStSt25sdkType5St25tvST25TVRegisterArea2SecurityAttribute *)
J2OBJC_FIELD_SETTER(ComStSt25sdkType5St25dvpwmST25DVPwmTag, mRegisterPwmCtrlSecurityAttribute_, ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmCtrlSecurityAttribute *)
J2OBJC_FIELD_SETTER(ComStSt25sdkType5St25dvpwmST25DVPwmTag, mRegisterPwmRfConfiguration_, ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration *)
J2OBJC_FIELD_SETTER(ComStSt25sdkType5St25dvpwmST25DVPwmTag, mRegisterLockConfiguration_, ComStSt25sdkType5St25tvST25TVRegisterLockConfiguration *)
J2OBJC_FIELD_SETTER(ComStSt25sdkType5St25dvpwmST25DVPwmTag, mRegisterKeyId_, ComStSt25sdkType5St25tvST25TVRegisterKeyId *)

inline jint ComStSt25sdkType5St25dvpwmST25DVPwmTag_get_ST25DVPWM_PWM1_CONTROL_ADDR(void);
#define ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM1_CONTROL_ADDR 248
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkType5St25dvpwmST25DVPwmTag, ST25DVPWM_PWM1_CONTROL_ADDR, jint)

inline jint ComStSt25sdkType5St25dvpwmST25DVPwmTag_get_ST25DVPWM_PWM2_CONTROL_ADDR(void);
#define ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM2_CONTROL_ADDR 249
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkType5St25dvpwmST25DVPwmTag, ST25DVPWM_PWM2_CONTROL_ADDR, jint)

__attribute__((unused)) static jboolean ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPasswordNumberValidWithInt_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, jint passwordNumber);

__attribute__((unused)) static jboolean ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, jint pwmNumber);

__attribute__((unused)) static void ComStSt25sdkType5St25dvpwmST25DVPwmTag_writePwmControlWithInt_withByteArray_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, jint pwmNumber, IOSByteArray *pwmControl);

__attribute__((unused)) static jint ComStSt25sdkType5St25dvpwmST25DVPwmTag_computePeriodFromControlWithByteArray_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, IOSByteArray *control);

__attribute__((unused)) static jint ComStSt25sdkType5St25dvpwmST25DVPwmTag_computePulseWidthFromControlWithByteArray_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, IOSByteArray *control);

__attribute__((unused)) static jint ComStSt25sdkType5St25dvpwmST25DVPwmTag_computeDutyCycleFromControlWithByteArray_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, IOSByteArray *control);

__attribute__((unused)) static jint ComStSt25sdkType5St25dvpwmST25DVPwmTag_computeFreqFromControlWithByteArray_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, IOSByteArray *control);

__attribute__((unused)) static void ComStSt25sdkType5St25dvpwmST25DVPwmTag_computeControlFromPeriodAndPulseWidthWithByteArray_withInt_withInt_withBoolean_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, IOSByteArray *control, jint period, jint pulseWidth, jboolean pwmEnable);

@interface ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1 : NSObject < ComStSt25sdkSTRegister_RegisterListener > {
 @public
  ComStSt25sdkType5St25dvpwmST25DVPwmTag *this$0_;
}

- (void)registerChange;

@end

J2OBJC_EMPTY_STATIC_INIT(ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1)

__attribute__((unused)) static void ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1_initWithComStSt25sdkType5St25dvpwmST25DVPwmTag_(ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1 *self, ComStSt25sdkType5St25dvpwmST25DVPwmTag *outer$);

__attribute__((unused)) static ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1 *new_ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1_initWithComStSt25sdkType5St25dvpwmST25DVPwmTag_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1 *create_ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1_initWithComStSt25sdkType5St25dvpwmST25DVPwmTag_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *outer$);

@implementation ComStSt25sdkType5St25dvpwmST25DVPwmTag

+ (jint)PWM1 {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM1;
}

+ (jint)PWM2 {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM2;
}

+ (jint)ST25DVPWM_REGISTER_AREA1_SECURITY_ATTRIBUTE {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_AREA1_SECURITY_ATTRIBUTE;
}

+ (jint)ST25DVPWM_REGISTER_AREA2_SECURITY_ATTRIBUTE {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_AREA2_SECURITY_ATTRIBUTE;
}

+ (jint)ST25DVPWM_REGISTER_PWM_CTRL_SECURITY_ATTRIBUTES {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_PWM_CTRL_SECURITY_ATTRIBUTES;
}

+ (jint)ST25DVPWM_REGISTER_PWM_RF_CONFIGURATION {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_PWM_RF_CONFIGURATION;
}

+ (jint)ST25DVPWM_REGISTER_LOCK_CONFIGURATION {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_LOCK_CONFIGURATION;
}

+ (jint)ST25DVPWM_REGISTER_KEY_ID {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_KEY_ID;
}

+ (jint)ST25DVPWM_PWM_PASSWORD_ID {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_PASSWORD_ID;
}

+ (jint)ST25DVPWM_AREA1_PASSWORD_ID {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_AREA1_PASSWORD_ID;
}

+ (jint)ST25DVPWM_AREA2_PASSWORD_ID {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_AREA2_PASSWORD_ID;
}

+ (jint)ST25DVPWM_CONFIGURATION_PASSWORD_ID {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_CONFIGURATION_PASSWORD_ID;
}

+ (jdouble)ST25DVPWM_PWM_RESOLUTION_NS {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_RESOLUTION_NS;
}

+ (jint)ST25DVPWM_PWM_MAX_FREQ {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_MAX_FREQ;
}

+ (jint)ST25DVPWM_PWM_MIN_FREQ {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_MIN_FREQ;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)readerInterface
                                        withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkType5St25dvpwmST25DVPwmTag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  return self;
}

- (id<JavaUtilList>)getRegisterList {
  return new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilTreeMap *) nil_chk(mST25DV02KWRegisterMap_)) values]);
}

- (id<JavaUtilList>)getDynamicRegisterList {
  return nil;
}

- (ComStSt25sdkSTRegister *)getRegisterWithInt:(jint)registerAddress {
  return [((JavaUtilTreeMap *) nil_chk(mST25DV02KWRegisterMap_)) getWithId:JavaLangInteger_valueOfWithInt_(registerAddress)];
}

- (void)refreshRegistersStatus {
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilTreeMap *) nil_chk(mST25DV02KWRegisterMap_)) entrySet])) {
    [((ComStSt25sdkSTRegister *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) invalidateCache];
    [((ComStSt25sdkSTRegister *) nil_chk([entry_ getValue])) getRegisterValue];
  }
}

- (jboolean)isPasswordNumberValidWithInt:(jint)passwordNumber {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPasswordNumberValidWithInt_(self, passwordNumber);
}

- (void)presentPasswordWithInt:(jint)passwordNumber
                 withByteArray:(IOSByteArray *)password {
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPasswordNumberValidWithInt_(self, passwordNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  [((ComStSt25sdkCommandIso15693CustomCommand *) nil_chk(mIso15693CustomCommand_)) presentPwdWithByte:(jbyte) passwordNumber withByteArray:password];
}

- (void)writePasswordWithInt:(jint)passwordNumber
               withByteArray:(IOSByteArray *)newPassword {
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPasswordNumberValidWithInt_(self, passwordNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ([self getPasswordLengthWithInt:passwordNumber] == ComStSt25sdkTagHelper_PWD_ON_64_BITS) {
    if (((IOSByteArray *) nil_chk(newPassword))->size_ != 8) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
    }
    IOSByteArray *newPasswordPart1 = JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(newPassword, 0, 4);
    IOSByteArray *newPasswordPart2 = JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(newPassword, 4, 8);
    [((ComStSt25sdkCommandIso15693CustomCommand *) nil_chk(mIso15693CustomCommand_)) writePwdWithByte:(jbyte) ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_AREA1_PASSWORD_ID withByteArray:newPasswordPart1];
    [((ComStSt25sdkCommandIso15693CustomCommand *) nil_chk(mIso15693CustomCommand_)) writePwdWithByte:(jbyte) ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_AREA2_PASSWORD_ID withByteArray:newPasswordPart2];
  }
  else {
    if (((IOSByteArray *) nil_chk(newPassword))->size_ != 4) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
    }
    [((ComStSt25sdkCommandIso15693CustomCommand *) nil_chk(mIso15693CustomCommand_)) writePwdWithByte:(jbyte) passwordNumber withByteArray:newPassword];
  }
}

- (jint)getPasswordLengthWithInt:(jint)passwordNumber {
  jint passwordLength;
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPasswordNumberValidWithInt_(self, passwordNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  switch (passwordNumber) {
    default:
    case ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_AREA2_PASSWORD_ID:
    case ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_CONFIGURATION_PASSWORD_ID:
    case ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_PASSWORD_ID:
    passwordLength = ComStSt25sdkTagHelper_PWD_ON_32_BITS;
    break;
    case ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_AREA1_PASSWORD_ID:
    if ([self getNumberOfAreas] == 1) {
      passwordLength = ComStSt25sdkTagHelper_PWD_ON_64_BITS;
    }
    else {
      passwordLength = ComStSt25sdkTagHelper_PWD_ON_32_BITS;
    }
  }
  return passwordLength;
}

- (jint)getAreaPasswordLengthWithInt:(jint)area {
  jint passwordLength;
  if (![self isAreaNumberValidWithInt:area]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (area == ComStSt25sdkMultiAreaInterface_AREA1) {
    passwordLength = [self getPasswordLengthWithInt:ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_AREA1_PASSWORD_ID];
  }
  else if (area == ComStSt25sdkMultiAreaInterface_AREA2) {
    passwordLength = [self getPasswordLengthWithInt:ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_AREA2_PASSWORD_ID];
  }
  else {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return passwordLength;
}

- (jint)getConfigurationPasswordNumber {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_CONFIGURATION_PASSWORD_ID;
}

- (jint)getPasswordNumberWithInt:(jint)area {
  if (![self isAreaNumberValidWithInt:area]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (area == ComStSt25sdkMultiAreaInterface_AREA1) {
    return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_AREA1_PASSWORD_ID;
  }
  else if (area == ComStSt25sdkMultiAreaInterface_AREA2) {
    return ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_AREA2_PASSWORD_ID;
  }
  else {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
}

- (jint)getMaxNumberOfAreas {
  return 2;
}

- (jint)getNumberOfAreas {
  if ([((ComStSt25sdkType5St25tvST25TVRegisterArea1SecurityAttribute *) nil_chk(mRegisterArea1SecurityAttribute_)) isMemoryConfiguredInSingleArea]) {
    return 1;
  }
  return 2;
}

- (void)setNumberOfAreasWithInt:(jint)nbOfAreas {
  if ((nbOfAreas <= 0) || (nbOfAreas > [self getMaxNumberOfAreas])) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (nbOfAreas == 1) {
    [((ComStSt25sdkType5St25tvST25TVRegisterArea1SecurityAttribute *) nil_chk(mRegisterArea1SecurityAttribute_)) setIsMemoryConfiguredInSingleAreaWithBoolean:true];
  }
  else {
    [((ComStSt25sdkType5St25tvST25TVRegisterArea1SecurityAttribute *) nil_chk(mRegisterArea1SecurityAttribute_)) setIsMemoryConfiguredInSingleAreaWithBoolean:false];
  }
}

- (jint)getAreaSizeInBytesWithInt:(jint)area {
  if (![self isAreaNumberValidWithInt:area]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ([((ComStSt25sdkType5St25tvST25TVRegisterArea1SecurityAttribute *) nil_chk(mRegisterArea1SecurityAttribute_)) isMemoryConfiguredInSingleArea]) {
    return 256;
  }
  return 128;
}

- (jint)getAreaOffsetInBlocksWithInt:(jint)area {
  jint offsetInBlocks;
  if (![self isAreaNumberValidWithInt:area]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  switch (area) {
    default:
    case ComStSt25sdkMultiAreaInterface_AREA1:
    offsetInBlocks = 0;
    break;
    case ComStSt25sdkMultiAreaInterface_AREA2:
    offsetInBlocks = 32;
    break;
  }
  return offsetInBlocks;
}

- (jint)getAreaOffsetInBytesWithInt:(jint)area {
  if (![self isAreaNumberValidWithInt:area]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return ([self getAreaOffsetInBlocksWithInt:area] * [self getBlockSizeInBytes]);
}

- (jint)getAreaFromByteAddressWithInt:(jint)address {
  jint memSizeInBytes = [self getMemSizeInBytes];
  if (address < 0 || address >= memSizeInBytes) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jint numberOfAreas = [self getNumberOfAreas];
  if (numberOfAreas == 1) {
    return ComStSt25sdkMultiAreaInterface_AREA1;
  }
  else if (address < [self getAreaOffsetInBlocksWithInt:ComStSt25sdkMultiAreaInterface_AREA2] * [self getBlockSizeInBytes]) {
    return ComStSt25sdkMultiAreaInterface_AREA1;
  }
  else {
    return ComStSt25sdkMultiAreaInterface_AREA2;
  }
}

- (void)setPasswordNumberWithInt:(jint)area
                         withInt:(jint)passwordNumber {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
}

- (id<JavaUtilList>)getPossibleReadWriteProtectionWithInt:(jint)area {
  if (![self isAreaNumberValidWithInt:area]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  id<JavaUtilList> possibleReadWriteProtections = new_JavaUtilArrayList_init();
  [possibleReadWriteProtections addWithId:JreLoadEnum(ComStSt25sdkTagHelper_ReadWriteProtection, READABLE_AND_WRITABLE)];
  [possibleReadWriteProtections addWithId:JreLoadEnum(ComStSt25sdkTagHelper_ReadWriteProtection, READABLE_AND_WRITE_PROTECTED_BY_PWD)];
  [possibleReadWriteProtections addWithId:JreLoadEnum(ComStSt25sdkTagHelper_ReadWriteProtection, READ_AND_WRITE_PROTECTED_BY_PWD)];
  [possibleReadWriteProtections addWithId:JreLoadEnum(ComStSt25sdkTagHelper_ReadWriteProtection, READ_PROTECTED_BY_PWD_AND_WRITE_IMPOSSIBLE)];
  return possibleReadWriteProtections;
}

- (ComStSt25sdkTagHelper_ReadWriteProtection *)getReadWriteProtectionWithInt:(jint)area {
  if (![self isAreaNumberValidWithInt:area]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  switch (area) {
    case 1:
    return [((ComStSt25sdkType5St25tvST25TVRegisterArea1SecurityAttribute *) nil_chk(mRegisterArea1SecurityAttribute_)) getArea1ReadWriteProtection];
    case 2:
    return [((ComStSt25sdkType5St25tvST25TVRegisterArea2SecurityAttribute *) nil_chk(mRegisterArea2SecurityAttribute_)) getArea2SecurityStatus];
    default:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
  }
}

- (void)setReadWriteProtectionWithInt:(jint)area
withComStSt25sdkTagHelper_ReadWriteProtection:(ComStSt25sdkTagHelper_ReadWriteProtection *)protection {
  if (![self isAreaNumberValidWithInt:area]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  switch (area) {
    case 1:
    [((ComStSt25sdkType5St25tvST25TVRegisterArea1SecurityAttribute *) nil_chk(mRegisterArea1SecurityAttribute_)) setArea1ReadWriteProtectionWithComStSt25sdkTagHelper_ReadWriteProtection:protection];
    break;
    case 2:
    [((ComStSt25sdkType5St25tvST25TVRegisterArea2SecurityAttribute *) nil_chk(mRegisterArea2SecurityAttribute_)) setArea2SecurityStatusWithComStSt25sdkTagHelper_ReadWriteProtection:protection];
    break;
    default:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
  }
}

- (void)setReadWriteProtectionWithInt:(jint)area
withComStSt25sdkTagHelper_ReadWriteProtection:(ComStSt25sdkTagHelper_ReadWriteProtection *)protection
                        withByteArray:(IOSByteArray *)password {
  [self presentPasswordWithInt:ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_CONFIGURATION_PASSWORD_ID withByteArray:password];
  [self setReadWriteProtectionWithInt:area withComStSt25sdkTagHelper_ReadWriteProtection:protection];
}

- (ComStSt25sdkTagHelper_ReadWriteProtection *)getPwmCtrlAccessRights {
  return [((ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmCtrlSecurityAttribute *) nil_chk(mRegisterPwmCtrlSecurityAttribute_)) getPwmCtrlAccessRights];
}

- (void)setPwmCtrlAccessRightsWithComStSt25sdkTagHelper_ReadWriteProtection:(ComStSt25sdkTagHelper_ReadWriteProtection *)readWriteProtection {
  [((ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmCtrlSecurityAttribute *) nil_chk(mRegisterPwmCtrlSecurityAttribute_)) setPwmCtrlAccessRightsWithComStSt25sdkTagHelper_ReadWriteProtection:readWriteProtection];
}

- (ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming *)getPwmOutputDriverTrimmingWithInt:(jint)pwmNumber {
  ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming *outputDriverTrimming;
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(self, pwmNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  switch (pwmNumber) {
    case 1:
    outputDriverTrimming = [((ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration *) nil_chk(mRegisterPwmRfConfiguration_)) getOutputDriverTrimmingWithComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_PwmDrive:JreLoadEnum(ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_PwmDrive, PWM1_DRIVE)];
    break;
    case 2:
    outputDriverTrimming = [((ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration *) nil_chk(mRegisterPwmRfConfiguration_)) getOutputDriverTrimmingWithComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_PwmDrive:JreLoadEnum(ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_PwmDrive, PWM2_DRIVE)];
    break;
    default:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return outputDriverTrimming;
}

- (ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming *)getPwmOutputDriverTrimming {
  return [self getPwmOutputDriverTrimmingWithInt:ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM1];
}

- (void)setPwmOutputDriverTrimmingWithInt:(jint)pwmNumber
withComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming:(ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming *)trimmingValue {
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(self, pwmNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  switch (pwmNumber) {
    case 1:
    [((ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration *) nil_chk(mRegisterPwmRfConfiguration_)) setOutputDriverTrimmingWithComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_PwmDrive:JreLoadEnum(ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_PwmDrive, PWM1_DRIVE) withComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming:trimmingValue];
    break;
    case 2:
    [((ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration *) nil_chk(mRegisterPwmRfConfiguration_)) setOutputDriverTrimmingWithComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_PwmDrive:JreLoadEnum(ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_PwmDrive, PWM2_DRIVE) withComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming:trimmingValue];
    break;
    default:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
}

- (void)setPwmOutputDriverTrimmingWithComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming:(ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming *)trimmingValue {
  [self setPwmOutputDriverTrimmingWithInt:ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM1 withComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming:trimmingValue];
}

- (ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_DualityManagement *)getDualityManagement {
  return [((ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration *) nil_chk(mRegisterPwmRfConfiguration_)) getDualityManagement];
}

- (void)setDualityManagementWithComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_DualityManagement:(ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_DualityManagement *)value {
  [((ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration *) nil_chk(mRegisterPwmRfConfiguration_)) setDualityManagementWithComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_DualityManagement:value];
}

- (void)lockConfiguration {
  [((ComStSt25sdkType5St25tvST25TVRegisterLockConfiguration *) nil_chk(mRegisterLockConfiguration_)) lockConfiguration];
}

- (jboolean)isPwmNumberValidWithInt:(jint)pwmNumber {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(self, pwmNumber);
}

- (IOSByteArray *)readPwmControlWithInt:(jint)pwmNumber {
  IOSByteArray *pwmControl;
  jint pwmControlAddr;
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(self, pwmNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  switch (pwmNumber) {
    case 1:
    pwmControl = mPwm1Control_;
    pwmControlAddr = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM1_CONTROL_ADDR;
    break;
    case 2:
    pwmControl = mPwm2Control_;
    pwmControlAddr = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM2_CONTROL_ADDR;
    break;
    default:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ([((ComStSt25sdkTagCache *) nil_chk(mCache_)) isCacheActivated] && [((ComStSt25sdkTagCache *) nil_chk(mCache_)) isCacheValidWithId:pwmControl]) {
    return pwmControl;
  }
  IOSByteArray *buf = [self readSingleBlockWithInt:pwmControlAddr];
  if (((IOSByteArray *) nil_chk(buf))->size_ < 5) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED), buf);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 1, pwmControl, 0, 4);
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) validateCacheWithId:pwmControl];
  return pwmControl;
}

- (void)writePwmControlWithInt:(jint)pwmNumber
                 withByteArray:(IOSByteArray *)pwmControl {
  ComStSt25sdkType5St25dvpwmST25DVPwmTag_writePwmControlWithInt_withByteArray_(self, pwmNumber, pwmControl);
}

- (jint)computePeriodFromControlWithByteArray:(IOSByteArray *)control {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_computePeriodFromControlWithByteArray_(self, control);
}

- (jint)computePulseWidthFromControlWithByteArray:(IOSByteArray *)control {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_computePulseWidthFromControlWithByteArray_(self, control);
}

- (jint)computeDutyCycleFromControlWithByteArray:(IOSByteArray *)control {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_computeDutyCycleFromControlWithByteArray_(self, control);
}

- (jint)computeFreqFromControlWithByteArray:(IOSByteArray *)control {
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_computeFreqFromControlWithByteArray_(self, control);
}

- (jint)computePeriodWithInt:(jint)freq {
  if (freq > ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_MAX_FREQ || freq < ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_MIN_FREQ) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return JreFpToInt((1000000000 / (freq * ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_RESOLUTION_NS)));
}

- (jint)computePulseWidthWithInt:(jint)period
                         withInt:(jint)dutyCycle {
  if (period < 0 || dutyCycle < 0 || dutyCycle > 100) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return period * dutyCycle / 100;
}

- (void)computeControlFromPeriodAndPulseWidthWithByteArray:(IOSByteArray *)control
                                                   withInt:(jint)period
                                                   withInt:(jint)pulseWidth
                                               withBoolean:(jboolean)pwmEnable {
  ComStSt25sdkType5St25dvpwmST25DVPwmTag_computeControlFromPeriodAndPulseWidthWithByteArray_withInt_withInt_withBoolean_(self, control, period, pulseWidth, pwmEnable);
}

- (jint)getNumberOfPwm {
  return mPwmNumber_;
}

- (void)setPwmConfigurationWithInt:(jint)pwmNumber
                           withInt:(jint)freq
                           withInt:(jint)dutyCycle
                       withBoolean:(jboolean)enable {
  IOSByteArray *pwmControl;
  if (freq < ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_MIN_FREQ || freq > ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_MAX_FREQ || dutyCycle < 0 || dutyCycle > 100) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(self, pwmNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  switch (pwmNumber) {
    case 1:
    pwmControl = mPwm1Control_;
    break;
    case 2:
    pwmControl = mPwm2Control_;
    break;
    default:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jint period = [self computePeriodWithInt:freq];
  jint pulseWidth = [self computePulseWidthWithInt:period withInt:dutyCycle];
  ComStSt25sdkType5St25dvpwmST25DVPwmTag_computeControlFromPeriodAndPulseWidthWithByteArray_withInt_withInt_withBoolean_(self, pwmControl, period, pulseWidth, enable);
  ComStSt25sdkType5St25dvpwmST25DVPwmTag_writePwmControlWithInt_withByteArray_(self, pwmNumber, pwmControl);
}

- (void)setPwmConfigurationWithInt:(jint)freq
                           withInt:(jint)dutyCycle
                       withBoolean:(jboolean)enable {
  [self setPwmConfigurationWithInt:ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM1 withInt:freq withInt:dutyCycle withBoolean:enable];
}

- (void)enablePwmWithInt:(jint)pwmNumber
             withBoolean:(jboolean)enable {
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(self, pwmNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jint freq = [self getPwmFrequencyWithInt:pwmNumber];
  jint dutyCycle = [self getPwmDutyCycleWithInt:pwmNumber];
  [self setPwmConfigurationWithInt:pwmNumber withInt:freq withInt:dutyCycle withBoolean:enable];
}

- (void)enablePwmWithBoolean:(jboolean)enable {
  [self enablePwmWithInt:ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM1 withBoolean:enable];
}

- (jboolean)isPwmEnableWithInt:(jint)pwmNumber {
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(self, pwmNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *pwmControl = [self readPwmControlWithInt:pwmNumber];
  return (IOSByteArray_Get(nil_chk(pwmControl), 3) & (jbyte) (jint) 0x80) == (jbyte) (jint) 0x80;
}

- (jboolean)isPwmEnable {
  return [self isPwmEnableWithInt:ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM1];
}

- (void)setPwmFrequencyWithInt:(jint)pwmNumber
                       withInt:(jint)freq {
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(self, pwmNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jboolean enable = [self isPwmEnableWithInt:pwmNumber];
  jint dutyCycle = [self getPwmDutyCycleWithInt:pwmNumber];
  [self setPwmConfigurationWithInt:pwmNumber withInt:freq withInt:dutyCycle withBoolean:enable];
}

- (void)setPwmFrequencyWithInt:(jint)freq {
  [self setPwmFrequencyWithInt:ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM1 withInt:freq];
}

- (jint)getPwmFrequencyWithInt:(jint)pwmNumber {
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(self, pwmNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *pwmControl = [self readPwmControlWithInt:pwmNumber];
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_computeFreqFromControlWithByteArray_(self, pwmControl);
}

- (jint)getPwmFrequency {
  return [self getPwmFrequencyWithInt:ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM1];
}

- (void)setPwmDutyCycleWithInt:(jint)pwmNumber
                       withInt:(jint)dutyCycle {
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(self, pwmNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jboolean enable = [self isPwmEnableWithInt:pwmNumber];
  jint freq = [self getPwmFrequencyWithInt:pwmNumber];
  [self setPwmConfigurationWithInt:pwmNumber withInt:freq withInt:dutyCycle withBoolean:enable];
}

- (void)setPwmDutyCycleWithInt:(jint)dutyCycle {
  [self setPwmDutyCycleWithInt:ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM1 withInt:dutyCycle];
}

- (jint)getPwmDutyCycleWithInt:(jint)pwmNumber {
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(self, pwmNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *pwmControl = [self readPwmControlWithInt:pwmNumber];
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_computeDutyCycleFromControlWithByteArray_(self, pwmControl);
}

- (jint)getPwmDutyCycle {
  return [self getPwmDutyCycleWithInt:ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM1];
}

- (jint)getPwmPulseWidthWithInt:(jint)pwmNumber {
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(self, pwmNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *pwmControl = [self readPwmControlWithInt:pwmNumber];
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_computePulseWidthFromControlWithByteArray_(self, pwmControl);
}

- (jint)getPwmPulseWidth {
  return [self getPwmPulseWidthWithInt:ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM1];
}

- (jint)getPwmPeriodWithInt:(jint)pwmNumber {
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(self, pwmNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *pwmControl = [self readPwmControlWithInt:pwmNumber];
  return ComStSt25sdkType5St25dvpwmST25DVPwmTag_computePeriodFromControlWithByteArray_(self, pwmControl);
}

- (jint)getPwmPeriod {
  return [self getPwmPeriodWithInt:ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM1];
}

- (jbyte)getKeyIdNDA {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, IMPLEMENTED_IN_NDA_VERSION));
}

- (jboolean)isSignatureOkNDA {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, IMPLEMENTED_IN_NDA_VERSION));
}

- (IOSByteArray *)readSignatureNDA {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, IMPLEMENTED_IN_NDA_VERSION));
}

- (NSString *)getDecodedCertificateNDA {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, IMPLEMENTED_IN_NDA_VERSION));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LComStSt25sdkSTRegister;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 4, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, 1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 19, 4, 1, 20, -1, -1 },
    { NULL, "LComStSt25sdkTagHelper_ReadWriteProtection;", 0x1, 21, 4, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 24, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkTagHelper_ReadWriteProtection;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming;", 0x1, 27, 4, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 30, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_DualityManagement;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, 33, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 34, 4, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 7, 1, -1, -1, -1 },
    { NULL, "I", 0x2, 36, 37, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 38, 37, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 39, 37, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 40, 37, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 41, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 42, 18, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 44, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 46, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 47, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 49, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 50, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 51, 4, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 18, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 53, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 18, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 55, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 56, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 57, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[1].selector = @selector(getRegisterList);
  methods[2].selector = @selector(getDynamicRegisterList);
  methods[3].selector = @selector(getRegisterWithInt:);
  methods[4].selector = @selector(refreshRegistersStatus);
  methods[5].selector = @selector(isPasswordNumberValidWithInt:);
  methods[6].selector = @selector(presentPasswordWithInt:withByteArray:);
  methods[7].selector = @selector(writePasswordWithInt:withByteArray:);
  methods[8].selector = @selector(getPasswordLengthWithInt:);
  methods[9].selector = @selector(getAreaPasswordLengthWithInt:);
  methods[10].selector = @selector(getConfigurationPasswordNumber);
  methods[11].selector = @selector(getPasswordNumberWithInt:);
  methods[12].selector = @selector(getMaxNumberOfAreas);
  methods[13].selector = @selector(getNumberOfAreas);
  methods[14].selector = @selector(setNumberOfAreasWithInt:);
  methods[15].selector = @selector(getAreaSizeInBytesWithInt:);
  methods[16].selector = @selector(getAreaOffsetInBlocksWithInt:);
  methods[17].selector = @selector(getAreaOffsetInBytesWithInt:);
  methods[18].selector = @selector(getAreaFromByteAddressWithInt:);
  methods[19].selector = @selector(setPasswordNumberWithInt:withInt:);
  methods[20].selector = @selector(getPossibleReadWriteProtectionWithInt:);
  methods[21].selector = @selector(getReadWriteProtectionWithInt:);
  methods[22].selector = @selector(setReadWriteProtectionWithInt:withComStSt25sdkTagHelper_ReadWriteProtection:);
  methods[23].selector = @selector(setReadWriteProtectionWithInt:withComStSt25sdkTagHelper_ReadWriteProtection:withByteArray:);
  methods[24].selector = @selector(getPwmCtrlAccessRights);
  methods[25].selector = @selector(setPwmCtrlAccessRightsWithComStSt25sdkTagHelper_ReadWriteProtection:);
  methods[26].selector = @selector(getPwmOutputDriverTrimmingWithInt:);
  methods[27].selector = @selector(getPwmOutputDriverTrimming);
  methods[28].selector = @selector(setPwmOutputDriverTrimmingWithInt:withComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming:);
  methods[29].selector = @selector(setPwmOutputDriverTrimmingWithComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming:);
  methods[30].selector = @selector(getDualityManagement);
  methods[31].selector = @selector(setDualityManagementWithComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_DualityManagement:);
  methods[32].selector = @selector(lockConfiguration);
  methods[33].selector = @selector(isPwmNumberValidWithInt:);
  methods[34].selector = @selector(readPwmControlWithInt:);
  methods[35].selector = @selector(writePwmControlWithInt:withByteArray:);
  methods[36].selector = @selector(computePeriodFromControlWithByteArray:);
  methods[37].selector = @selector(computePulseWidthFromControlWithByteArray:);
  methods[38].selector = @selector(computeDutyCycleFromControlWithByteArray:);
  methods[39].selector = @selector(computeFreqFromControlWithByteArray:);
  methods[40].selector = @selector(computePeriodWithInt:);
  methods[41].selector = @selector(computePulseWidthWithInt:withInt:);
  methods[42].selector = @selector(computeControlFromPeriodAndPulseWidthWithByteArray:withInt:withInt:withBoolean:);
  methods[43].selector = @selector(getNumberOfPwm);
  methods[44].selector = @selector(setPwmConfigurationWithInt:withInt:withInt:withBoolean:);
  methods[45].selector = @selector(setPwmConfigurationWithInt:withInt:withBoolean:);
  methods[46].selector = @selector(enablePwmWithInt:withBoolean:);
  methods[47].selector = @selector(enablePwmWithBoolean:);
  methods[48].selector = @selector(isPwmEnableWithInt:);
  methods[49].selector = @selector(isPwmEnable);
  methods[50].selector = @selector(setPwmFrequencyWithInt:withInt:);
  methods[51].selector = @selector(setPwmFrequencyWithInt:);
  methods[52].selector = @selector(getPwmFrequencyWithInt:);
  methods[53].selector = @selector(getPwmFrequency);
  methods[54].selector = @selector(setPwmDutyCycleWithInt:withInt:);
  methods[55].selector = @selector(setPwmDutyCycleWithInt:);
  methods[56].selector = @selector(getPwmDutyCycleWithInt:);
  methods[57].selector = @selector(getPwmDutyCycle);
  methods[58].selector = @selector(getPwmPulseWidthWithInt:);
  methods[59].selector = @selector(getPwmPulseWidth);
  methods[60].selector = @selector(getPwmPeriodWithInt:);
  methods[61].selector = @selector(getPwmPeriod);
  methods[62].selector = @selector(getKeyIdNDA);
  methods[63].selector = @selector(isSignatureOkNDA);
  methods[64].selector = @selector(readSignatureNDA);
  methods[65].selector = @selector(getDecodedCertificateNDA);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mST25DV02KWRegisterMap_", "LJavaUtilTreeMap;", .constantValue.asLong = 0, 0x2, -1, -1, 58, -1 },
    { "mRegisterArea1SecurityAttribute_", "LComStSt25sdkType5St25tvST25TVRegisterArea1SecurityAttribute;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRegisterArea2SecurityAttribute_", "LComStSt25sdkType5St25tvST25TVRegisterArea2SecurityAttribute;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRegisterPwmCtrlSecurityAttribute_", "LComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmCtrlSecurityAttribute;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRegisterPwmRfConfiguration_", "LComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRegisterLockConfiguration_", "LComStSt25sdkType5St25tvST25TVRegisterLockConfiguration;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRegisterKeyId_", "LComStSt25sdkType5St25tvST25TVRegisterKeyId;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPwm1Control_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mPwm2Control_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mPwmNumber_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "PWM1", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM1, 0x19, -1, -1, -1, -1 },
    { "PWM2", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_PWM2, 0x19, -1, -1, -1, -1 },
    { "ST25DVPWM_REGISTER_AREA1_SECURITY_ATTRIBUTE", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_AREA1_SECURITY_ATTRIBUTE, 0x19, -1, -1, -1, -1 },
    { "ST25DVPWM_REGISTER_AREA2_SECURITY_ATTRIBUTE", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_AREA2_SECURITY_ATTRIBUTE, 0x19, -1, -1, -1, -1 },
    { "ST25DVPWM_REGISTER_PWM_CTRL_SECURITY_ATTRIBUTES", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_PWM_CTRL_SECURITY_ATTRIBUTES, 0x19, -1, -1, -1, -1 },
    { "ST25DVPWM_REGISTER_PWM_RF_CONFIGURATION", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_PWM_RF_CONFIGURATION, 0x19, -1, -1, -1, -1 },
    { "ST25DVPWM_REGISTER_LOCK_CONFIGURATION", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_LOCK_CONFIGURATION, 0x19, -1, -1, -1, -1 },
    { "ST25DVPWM_REGISTER_KEY_ID", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_KEY_ID, 0x19, -1, -1, -1, -1 },
    { "ST25DVPWM_PWM_PASSWORD_ID", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_PASSWORD_ID, 0x19, -1, -1, -1, -1 },
    { "ST25DVPWM_AREA1_PASSWORD_ID", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_AREA1_PASSWORD_ID, 0x19, -1, -1, -1, -1 },
    { "ST25DVPWM_AREA2_PASSWORD_ID", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_AREA2_PASSWORD_ID, 0x19, -1, -1, -1, -1 },
    { "ST25DVPWM_CONFIGURATION_PASSWORD_ID", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_CONFIGURATION_PASSWORD_ID, 0x19, -1, -1, -1, -1 },
    { "ST25DVPWM_PWM1_CONTROL_ADDR", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM1_CONTROL_ADDR, 0x1a, -1, -1, -1, -1 },
    { "ST25DVPWM_PWM2_CONTROL_ADDR", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM2_CONTROL_ADDR, 0x1a, -1, -1, -1, -1 },
    { "ST25DVPWM_PWM_RESOLUTION_NS", "D", .constantValue.asDouble = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_RESOLUTION_NS, 0x19, -1, -1, -1, -1 },
    { "ST25DVPWM_PWM_MAX_FREQ", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_MAX_FREQ, 0x19, -1, -1, -1, -1 },
    { "ST25DVPWM_PWM_MIN_FREQ", "I", .constantValue.asInt = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_MIN_FREQ, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[B", "LComStSt25sdkSTException;", "()Ljava/util/List<Lcom/st/st25sdk/STRegister;>;", "getRegister", "I", "isPasswordNumberValid", "presentPassword", "I[B", "writePassword", "getPasswordLength", "getAreaPasswordLength", "getPasswordNumber", "setNumberOfAreas", "getAreaSizeInBytes", "getAreaOffsetInBlocks", "getAreaOffsetInBytes", "getAreaFromByteAddress", "setPasswordNumber", "II", "getPossibleReadWriteProtection", "(I)Ljava/util/List<Lcom/st/st25sdk/TagHelper$ReadWriteProtection;>;", "getReadWriteProtection", "setReadWriteProtection", "ILComStSt25sdkTagHelper_ReadWriteProtection;", "ILComStSt25sdkTagHelper_ReadWriteProtection;[B", "setPwmCtrlAccessRights", "LComStSt25sdkTagHelper_ReadWriteProtection;", "getPwmOutputDriverTrimming", "setPwmOutputDriverTrimming", "ILComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming;", "LComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_OutputDriverTrimming;", "setDualityManagement", "LComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_DualityManagement;", "isPwmNumberValid", "readPwmControl", "writePwmControl", "computePeriodFromControl", "[B", "computePulseWidthFromControl", "computeDutyCycleFromControl", "computeFreqFromControl", "computePeriod", "computePulseWidth", "computeControlFromPeriodAndPulseWidth", "[BIIZ", "setPwmConfiguration", "IIIZ", "IIZ", "enablePwm", "IZ", "Z", "isPwmEnable", "setPwmFrequency", "getPwmFrequency", "setPwmDutyCycle", "getPwmDutyCycle", "getPwmPulseWidth", "getPwmPeriod", "Ljava/util/TreeMap<Ljava/lang/Integer;Lcom/st/st25sdk/STRegister;>;" };
  static const J2ObjcClassInfo _ComStSt25sdkType5St25dvpwmST25DVPwmTag = { "ST25DVPwmTag", "com.st.st25sdk.type5.st25dvpwm", ptrTable, methods, fields, 7, 0x401, 66, 27, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType5St25dvpwmST25DVPwmTag;
}

@end

void ComStSt25sdkType5St25dvpwmST25DVPwmTag_initWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  ComStSt25sdkType5STType5MultiAreaTag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  self->mPwm1Control_ = [IOSByteArray newArrayWithLength:4];
  self->mPwm2Control_ = [IOSByteArray newArrayWithLength:4];
  self->mPwmNumber_ = 2;
  self->mName_ = @"ST25DV-PWM";
  self->mTypeDescription_ = JreLoadStatic(ComStSt25sdkNFCTag, NFC_RFID_TAG);
  self->mST25DV02KWRegisterMap_ = new_JavaUtilTreeMap_init();
  self->mRegisterArea1SecurityAttribute_ = ComStSt25sdkType5St25tvST25TVRegisterArea1SecurityAttribute_newInstanceWithComStSt25sdkCommandIso15693CustomCommand_withInt_(self->mIso15693CustomCommand_, ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_AREA1_SECURITY_ATTRIBUTE);
  self->mRegisterArea2SecurityAttribute_ = ComStSt25sdkType5St25tvST25TVRegisterArea2SecurityAttribute_newInstanceWithComStSt25sdkCommandIso15693CustomCommand_withInt_(self->mIso15693CustomCommand_, ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_AREA2_SECURITY_ATTRIBUTE);
  self->mRegisterPwmCtrlSecurityAttribute_ = ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmCtrlSecurityAttribute_newInstanceWithComStSt25sdkCommandIso15693CustomCommand_withInt_(self->mIso15693CustomCommand_, ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_PWM_CTRL_SECURITY_ATTRIBUTES);
  self->mRegisterPwmRfConfiguration_ = ComStSt25sdkType5St25dvpwmST25DV02KWRegisterPwmRfConfiguration_newInstanceWithComStSt25sdkCommandIso15693CustomCommand_withInt_(self->mIso15693CustomCommand_, ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_PWM_RF_CONFIGURATION);
  self->mRegisterLockConfiguration_ = ComStSt25sdkType5St25tvST25TVRegisterLockConfiguration_newInstanceWithComStSt25sdkCommandIso15693CustomCommand_withInt_(self->mIso15693CustomCommand_, ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_LOCK_CONFIGURATION);
  self->mRegisterKeyId_ = ComStSt25sdkType5St25tvST25TVRegisterKeyId_newInstanceWithComStSt25sdkCommandIso15693CustomCommand_withInt_(self->mIso15693CustomCommand_, ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_KEY_ID);
  (void) [((JavaUtilTreeMap *) nil_chk(self->mST25DV02KWRegisterMap_)) putWithId:JavaLangInteger_valueOfWithInt_(ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_AREA1_SECURITY_ATTRIBUTE) withId:self->mRegisterArea1SecurityAttribute_];
  (void) [((JavaUtilTreeMap *) nil_chk(self->mST25DV02KWRegisterMap_)) putWithId:JavaLangInteger_valueOfWithInt_(ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_AREA2_SECURITY_ATTRIBUTE) withId:self->mRegisterArea2SecurityAttribute_];
  (void) [((JavaUtilTreeMap *) nil_chk(self->mST25DV02KWRegisterMap_)) putWithId:JavaLangInteger_valueOfWithInt_(ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_PWM_CTRL_SECURITY_ATTRIBUTES) withId:self->mRegisterPwmCtrlSecurityAttribute_];
  (void) [((JavaUtilTreeMap *) nil_chk(self->mST25DV02KWRegisterMap_)) putWithId:JavaLangInteger_valueOfWithInt_(ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_PWM_RF_CONFIGURATION) withId:self->mRegisterPwmRfConfiguration_];
  (void) [((JavaUtilTreeMap *) nil_chk(self->mST25DV02KWRegisterMap_)) putWithId:JavaLangInteger_valueOfWithInt_(ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_LOCK_CONFIGURATION) withId:self->mRegisterLockConfiguration_];
  (void) [((JavaUtilTreeMap *) nil_chk(self->mST25DV02KWRegisterMap_)) putWithId:JavaLangInteger_valueOfWithInt_(ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_REGISTER_KEY_ID) withId:self->mRegisterKeyId_];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilTreeMap *) nil_chk(self->mST25DV02KWRegisterMap_)) entrySet])) {
    [((ComStSt25sdkTagCache *) nil_chk(self->mCache_)) addWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue]];
  }
  [self initAreaList];
  [((ComStSt25sdkType5St25tvST25TVRegisterArea1SecurityAttribute *) nil_chk(self->mRegisterArea1SecurityAttribute_)) addRegisterListenerWithComStSt25sdkSTRegister_RegisterListener:new_ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1_initWithComStSt25sdkType5St25dvpwmST25DVPwmTag_(self)];
  jint memSizeInBlocks = [self getNumberOfBlocks];
  [self setMaxReadMultipleBlocksReturnedWithInt:memSizeInBlocks];
  self->mPwmNumber_ = 2;
  [((ComStSt25sdkTagCache *) nil_chk(self->mCache_)) addWithId:self->mPwm1Control_];
  [((ComStSt25sdkTagCache *) nil_chk(self->mCache_)) invalidateCacheWithId:self->mPwm1Control_];
  [((ComStSt25sdkTagCache *) nil_chk(self->mCache_)) addWithId:self->mPwm2Control_];
  [((ComStSt25sdkTagCache *) nil_chk(self->mCache_)) invalidateCacheWithId:self->mPwm2Control_];
}

jboolean ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPasswordNumberValidWithInt_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, jint passwordNumber) {
  return (passwordNumber >= 0 && passwordNumber <= ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_CONFIGURATION_PASSWORD_ID);
}

jboolean ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, jint pwmNumber) {
  return (pwmNumber >= 1 && pwmNumber <= self->mPwmNumber_);
}

void ComStSt25sdkType5St25dvpwmST25DVPwmTag_writePwmControlWithInt_withByteArray_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, jint pwmNumber, IOSByteArray *pwmControl) {
  IOSByteArray *selectedPwmControl;
  jint pwmControlAddr;
  if ((pwmControl == nil) || (((IOSByteArray *) nil_chk(pwmControl))->size_ != 4)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (!ComStSt25sdkType5St25dvpwmST25DVPwmTag_isPwmNumberValidWithInt_(self, pwmNumber)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  switch (pwmNumber) {
    case 1:
    selectedPwmControl = self->mPwm1Control_;
    pwmControlAddr = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM1_CONTROL_ADDR;
    break;
    case 2:
    selectedPwmControl = self->mPwm2Control_;
    pwmControlAddr = ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM2_CONTROL_ADDR;
    break;
    default:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  [((ComStSt25sdkTagCache *) nil_chk(self->mCache_)) invalidateCacheWithId:selectedPwmControl];
  [self writeSingleBlockWithInt:pwmControlAddr withByteArray:pwmControl];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(pwmControl, 0, selectedPwmControl, 0, 4);
  [((ComStSt25sdkTagCache *) nil_chk(self->mCache_)) validateCacheWithId:selectedPwmControl];
}

jint ComStSt25sdkType5St25dvpwmST25DVPwmTag_computePeriodFromControlWithByteArray_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, IOSByteArray *control) {
  if (control == nil || control->size_ < 4) {
    return 0;
  }
  return ComStSt25sdkHelper_convert2BytesHexaFormatToIntWithByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (IOSByteArray_Get(control, 1) & (jint) 0x7F), IOSByteArray_Get(control, 0) } count:2]);
}

jint ComStSt25sdkType5St25dvpwmST25DVPwmTag_computePulseWidthFromControlWithByteArray_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, IOSByteArray *control) {
  if (control == nil || control->size_ < 4) {
    return 0;
  }
  return ComStSt25sdkHelper_convert2BytesHexaFormatToIntWithByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (IOSByteArray_Get(control, 3) & (jint) 0x7F), IOSByteArray_Get(control, 2) } count:2]);
}

jint ComStSt25sdkType5St25dvpwmST25DVPwmTag_computeDutyCycleFromControlWithByteArray_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, IOSByteArray *control) {
  jint period = ComStSt25sdkType5St25dvpwmST25DVPwmTag_computePeriodFromControlWithByteArray_(self, control);
  if (period != 0) {
    if (((100 * ComStSt25sdkType5St25dvpwmST25DVPwmTag_computePulseWidthFromControlWithByteArray_(self, control)) % period) == 0) {
      return (100 * ComStSt25sdkType5St25dvpwmST25DVPwmTag_computePulseWidthFromControlWithByteArray_(self, control)) / period;
    }
    return (100 * ComStSt25sdkType5St25dvpwmST25DVPwmTag_computePulseWidthFromControlWithByteArray_(self, control)) / period + 1;
  }
  return 0;
}

jint ComStSt25sdkType5St25dvpwmST25DVPwmTag_computeFreqFromControlWithByteArray_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, IOSByteArray *control) {
  jint period = ComStSt25sdkType5St25dvpwmST25DVPwmTag_computePeriodFromControlWithByteArray_(self, control);
  if (period != 0) {
    return JreFpToInt((1000000000 / (period * ComStSt25sdkType5St25dvpwmST25DVPwmTag_ST25DVPWM_PWM_RESOLUTION_NS)));
  }
  return 0;
}

void ComStSt25sdkType5St25dvpwmST25DVPwmTag_computeControlFromPeriodAndPulseWidthWithByteArray_withInt_withInt_withBoolean_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *self, IOSByteArray *control, jint period, jint pulseWidth, jboolean pwmEnable) {
  if (control == nil || control->size_ < 4) {
    return;
  }
  *IOSByteArray_GetRef(control, 1) = (jbyte) (JreRShift32((period & (jint) 0x7F00), 8));
  *IOSByteArray_GetRef(control, 0) = (jbyte) (period & (jint) 0xFF);
  if (pwmEnable) {
    *IOSByteArray_GetRef(control, 3) = (jbyte) ((JreRShift32((pulseWidth & (jint) 0x7F00), 8)) | (jint) 0x80);
  }
  else {
    *IOSByteArray_GetRef(control, 3) = (jbyte) (JreRShift32((pulseWidth & (jint) 0x7F00), 8));
  }
  *IOSByteArray_GetRef(control, 2) = (jbyte) (pulseWidth & (jint) 0xFF);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType5St25dvpwmST25DVPwmTag)

@implementation ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1

- (void)registerChange {
  [((ComStSt25sdkType5St25tvST25TVRegisterArea1SecurityAttribute *) nil_chk(this$0_->mRegisterArea1SecurityAttribute_)) invalidateCache];
  [this$0_ initAreaList];
}

@end

void ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1_initWithComStSt25sdkType5St25dvpwmST25DVPwmTag_(ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1 *self, ComStSt25sdkType5St25dvpwmST25DVPwmTag *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1 *new_ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1_initWithComStSt25sdkType5St25dvpwmST25DVPwmTag_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *outer$) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1, initWithComStSt25sdkType5St25dvpwmST25DVPwmTag_, outer$)
}

ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1 *create_ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1_initWithComStSt25sdkType5St25dvpwmST25DVPwmTag_(ComStSt25sdkType5St25dvpwmST25DVPwmTag *outer$) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType5St25dvpwmST25DVPwmTag_$Lambda$1, initWithComStSt25sdkType5St25dvpwmST25DVPwmTag_, outer$)
}
