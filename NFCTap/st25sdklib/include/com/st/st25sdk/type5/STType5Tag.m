//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type5/STType5Tag.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/TagCache.h"
#include "com/st/st25sdk/command/Iso15693Command.h"
#include "com/st/st25sdk/command/Iso15693CustomCommand.h"
#include "com/st/st25sdk/command/NdefType5Command.h"
#include "com/st/st25sdk/command/Type5Command.h"
#include "com/st/st25sdk/type5/STType5Tag.h"
#include "com/st/st25sdk/type5/SysFile.h"
#include "com/st/st25sdk/type5/SysFileType5.h"
#include "com/st/st25sdk/type5/Type5Tag.h"

@implementation ComStSt25sdkType5STType5Tag

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)readerInterface
                                        withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkType5STType5Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  return self;
}

- (jbyte)select {
  return [self selectWithByte:[((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) getFlag]];
}

- (jbyte)selectWithByte:(jbyte)flag {
  return [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) selectWithByte:flag withByteArray:[self getUid]];
}

- (jint)getSysFileLength {
  return [((ComStSt25sdkType5SysFile *) nil_chk(mSysFile_)) getSysLength];
}

- (jbyte)getDSFID {
  return [((ComStSt25sdkType5SysFile *) nil_chk(mSysFile_)) getDSFID];
}

- (IOSByteArray *)getVICCCommandList {
  IOSByteArray *viccCmdListSupported;
  if ([mSysFile_ isKindOfClass:[ComStSt25sdkType5SysFileType5 class]]) {
    viccCmdListSupported = [((ComStSt25sdkType5SysFileType5 *) nil_chk(((ComStSt25sdkType5SysFileType5 *) mSysFile_))) getVICCCommandList];
  }
  else {
    viccCmdListSupported = [IOSByteArray newArrayWithLength:0];
  }
  return viccCmdListSupported;
}

- (jboolean)isVICCCommandListSupported {
  jboolean isViccCmdListSupported = false;
  if ([mSysFile_ isKindOfClass:[ComStSt25sdkType5SysFileType5 class]]) {
    isViccCmdListSupported = ((ComStSt25sdkType5SysFileType5 *) nil_chk(((ComStSt25sdkType5SysFileType5 *) mSysFile_)))->mVICCCommandListSupported_;
  }
  return isViccCmdListSupported;
}

- (jbyte)getAFI {
  return [((ComStSt25sdkType5SysFile *) nil_chk(mSysFile_)) getAFI];
}

- (jbyte)getICRef {
  return [((ComStSt25sdkType5SysFile *) nil_chk(mSysFile_)) getICRef];
}

- (jint)getNumberOfBlocks {
  return ([((ComStSt25sdkType5SysFile *) nil_chk(mSysFile_)) getNumberOfBlocks] + 1);
}

- (jint)getMemSizeInBytes {
  return [self getNumberOfBlocks] * [self getBlockSizeInBytes];
}

- (jbyte)getProductCode {
  IOSByteArray *uid = [self getUid];
  return IOSByteArray_Get(nil_chk(uid), 2);
}

- (IOSByteArray *)extendedGetSystemInfo {
  return [self extendedGetSystemInfoWithByte:(jbyte) (jint) 0x7F withByte:[((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getFlag]];
}

- (IOSByteArray *)extendedGetSystemInfoWithByte:(jbyte)parameter
                                       withByte:(jbyte)flag {
  return [((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) extendedGetSystemInfoWithByte:parameter withByte:flag withByteArray:[self getUid]];
}

- (jbyte)resetToReady {
  return [self resetToReadyWithByte:[((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getFlag]];
}

- (jbyte)resetToReadyWithByte:(jbyte)flag {
  return [((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) resetToReadyWithByte:flag withByteArray:[self getUid]];
}

- (jbyte)writeAFIWithByte:(jbyte)value {
  return [self writeAFIWithByte:value withByte:[((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getFlag]];
}

- (jbyte)writeAFIWithByte:(jbyte)value
                 withByte:(jbyte)flag {
  jbyte result = [((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) writeAFIWithByte:value withByte:flag withByteArray:[self getUid]];
  [((ComStSt25sdkType5SysFile *) nil_chk(mSysFile_)) setAFIWithByte:value];
  return result;
}

- (jbyte)lockAFI {
  return [self lockAFIWithByte:[((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getFlag]];
}

- (jbyte)lockAFIWithByte:(jbyte)flag {
  return [((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) lockAFIWithByte:flag withByteArray:[self getUid]];
}

- (jbyte)writeDSFIDWithByte:(jbyte)value {
  return [self writeDSFIDWithByte:value withByte:[((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getFlag]];
}

- (jbyte)writeDSFIDWithByte:(jbyte)value
                   withByte:(jbyte)flag {
  jbyte result = [((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) writeDSFIDWithByte:value withByte:flag withByteArray:[self getUid]];
  [((ComStSt25sdkType5SysFile *) nil_chk(mSysFile_)) setDSFIDWithByte:value];
  return result;
}

- (jbyte)lockDSFID {
  return [self lockDSFIDWithByte:[((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getFlag]];
}

- (jbyte)lockDSFIDWithByte:(jbyte)flag {
  return [((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) lockDSFIDWithByte:flag withByteArray:[self getUid]];
}

- (IOSByteArray *)readSysFile {
  return [self getSystemInfo];
}

- (IOSByteArray *)readSysFileWithByte:(jbyte)flag {
  return [self getSystemInfoWithByte:flag];
}

- (IOSByteArray *)getSystemInfo {
  return [self getSystemInfoWithByte:[((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getFlag]];
}

- (IOSByteArray *)getSystemInfoWithByte:(jbyte)flag {
  return [((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getSystemInfoWithByte:flag withByteArray:[self getUid]];
}

- (IOSByteArray *)getMultipleBlockSecurityStatusWithInt:(jint)blockAddress
                                                withInt:(jint)numberOfBlocks {
  return [self getMultipleBlockSecurityStatusWithInt:blockAddress withInt:numberOfBlocks withByte:[((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getFlag]];
}

- (IOSByteArray *)getMultipleBlockSecurityStatusWithInt:(jint)blockAddress
                                                withInt:(jint)numberOfBlocks
                                               withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (numberOfBlocks < 0 || numberOfBlocks > (jint) 0xFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getMultipleBlockSecStatusWithByte:(jbyte) blockAddress withByte:(jbyte) numberOfBlocks withByte:flag withByteArray:[self getUid]];
}

- (IOSByteArray *)fastReadSingleBlockWithInt:(jint)blockAddress {
  return [self fastReadSingleBlockWithInt:blockAddress withByte:[((ComStSt25sdkCommandIso15693CustomCommand *) nil_chk(mIso15693CustomCommand_)) getFlag]];
}

- (IOSByteArray *)fastReadSingleBlockWithInt:(jint)blockAddress
                                    withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandIso15693CustomCommand *) nil_chk(mIso15693CustomCommand_)) fastReadSingleBlockWithByte:(jbyte) blockAddress withByte:flag withByteArray:[self getUid]];
}

- (IOSByteArray *)fastReadMultipleBlockWithInt:(jint)blockAddress
                                       withInt:(jint)numberOfBlocks {
  return [self fastReadMultipleBlockWithInt:blockAddress withInt:numberOfBlocks withByte:[((ComStSt25sdkCommandIso15693CustomCommand *) nil_chk(mIso15693CustomCommand_)) getFlag]];
}

- (IOSByteArray *)fastReadMultipleBlockWithInt:(jint)blockAddress
                                       withInt:(jint)numberOfBlocks
                                      withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (numberOfBlocks < 0 || numberOfBlocks > (jint) 0xFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandIso15693CustomCommand *) nil_chk(mIso15693CustomCommand_)) fastReadMultipleBlockWithByte:(jbyte) blockAddress withByte:(jbyte) numberOfBlocks withByte:flag withByteArray:[self getUid]];
}

- (ComStSt25sdkType5SysFile *)getSystemFile {
  return mSysFile_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, 6, 3, 1, -1, -1, -1 },
    { NULL, "B", 0x1, 7, 3, 1, -1, -1, -1 },
    { NULL, "B", 0x1, 7, 5, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, 8, 3, 1, -1, -1, -1 },
    { NULL, "B", 0x1, 9, 3, 1, -1, -1, -1 },
    { NULL, "B", 0x1, 9, 5, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, 10, 3, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 3, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 3, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 13, 14, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 13, 15, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 16, 17, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 16, 18, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 19, 14, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 19, 15, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkType5SysFile;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[1].selector = @selector(select);
  methods[2].selector = @selector(selectWithByte:);
  methods[3].selector = @selector(getSysFileLength);
  methods[4].selector = @selector(getDSFID);
  methods[5].selector = @selector(getVICCCommandList);
  methods[6].selector = @selector(isVICCCommandListSupported);
  methods[7].selector = @selector(getAFI);
  methods[8].selector = @selector(getICRef);
  methods[9].selector = @selector(getNumberOfBlocks);
  methods[10].selector = @selector(getMemSizeInBytes);
  methods[11].selector = @selector(getProductCode);
  methods[12].selector = @selector(extendedGetSystemInfo);
  methods[13].selector = @selector(extendedGetSystemInfoWithByte:withByte:);
  methods[14].selector = @selector(resetToReady);
  methods[15].selector = @selector(resetToReadyWithByte:);
  methods[16].selector = @selector(writeAFIWithByte:);
  methods[17].selector = @selector(writeAFIWithByte:withByte:);
  methods[18].selector = @selector(lockAFI);
  methods[19].selector = @selector(lockAFIWithByte:);
  methods[20].selector = @selector(writeDSFIDWithByte:);
  methods[21].selector = @selector(writeDSFIDWithByte:withByte:);
  methods[22].selector = @selector(lockDSFID);
  methods[23].selector = @selector(lockDSFIDWithByte:);
  methods[24].selector = @selector(readSysFile);
  methods[25].selector = @selector(readSysFileWithByte:);
  methods[26].selector = @selector(getSystemInfo);
  methods[27].selector = @selector(getSystemInfoWithByte:);
  methods[28].selector = @selector(getMultipleBlockSecurityStatusWithInt:withInt:);
  methods[29].selector = @selector(getMultipleBlockSecurityStatusWithInt:withInt:withByte:);
  methods[30].selector = @selector(fastReadSingleBlockWithInt:);
  methods[31].selector = @selector(fastReadSingleBlockWithInt:withByte:);
  methods[32].selector = @selector(fastReadMultipleBlockWithInt:withInt:);
  methods[33].selector = @selector(fastReadMultipleBlockWithInt:withInt:withByte:);
  methods[34].selector = @selector(getSystemFile);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mSysFile_", "LComStSt25sdkType5SysFile;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mIso15693CustomCommand_", "LComStSt25sdkCommandIso15693CustomCommand;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[B", "LComStSt25sdkSTException;", "select", "B", "extendedGetSystemInfo", "BB", "resetToReady", "writeAFI", "lockAFI", "writeDSFID", "lockDSFID", "readSysFile", "getSystemInfo", "getMultipleBlockSecurityStatus", "II", "IIB", "fastReadSingleBlock", "I", "IB", "fastReadMultipleBlock" };
  static const J2ObjcClassInfo _ComStSt25sdkType5STType5Tag = { "STType5Tag", "com.st.st25sdk.type5", ptrTable, methods, fields, 7, 0x1, 35, 2, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType5STType5Tag;
}

@end

void ComStSt25sdkType5STType5Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkType5STType5Tag *self, id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  ComStSt25sdkType5Type5Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  self->mName_ = @"ISO15693/NFC Type 5 Tag";
  [((ComStSt25sdkCommandType5Command *) nil_chk(self->mType5Cmd_)) setIsReadMultipleBlockSupportedWithBoolean:true];
  [((ComStSt25sdkCommandType5Command *) nil_chk(self->mType5Cmd_)) setIsWriteMultipleBlockSupportedWithBoolean:false];
  [((ComStSt25sdkCommandNdefType5Command *) nil_chk(self->mNdefCmd_)) setIsReadMultipleBlockSupportedWithBoolean:true];
  [((ComStSt25sdkCommandNdefType5Command *) nil_chk(self->mNdefCmd_)) setIsWriteMultipleBlockSupportedWithBoolean:false];
  self->mIso15693CustomCommand_ = new_ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(readerInterface, uid);
  self->mSysFile_ = new_ComStSt25sdkType5SysFileType5_initWithComStSt25sdkCommandIso15693Command_(self->mIso15693CustomCommand_);
  [((ComStSt25sdkTagCache *) nil_chk(self->mCache_)) addWithId:self->mSysFile_];
}

ComStSt25sdkType5STType5Tag *new_ComStSt25sdkType5STType5Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType5STType5Tag, initWithComStSt25sdkRFReaderInterface_withByteArray_, readerInterface, uid)
}

ComStSt25sdkType5STType5Tag *create_ComStSt25sdkType5STType5Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType5STType5Tag, initWithComStSt25sdkRFReaderInterface_withByteArray_, readerInterface, uid)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType5STType5Tag)
