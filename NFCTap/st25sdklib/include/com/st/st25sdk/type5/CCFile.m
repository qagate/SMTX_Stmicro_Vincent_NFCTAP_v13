//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type5/CCFile.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/type5/CCFile.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"

@interface ComStSt25sdkType5CCFile ()

- (void)checkCache;

@end

inline jbyte ComStSt25sdkType5CCFile_get_SUPPORT_MULTIPLE_BLOCK_READ_CMD_MASK(void);
#define ComStSt25sdkType5CCFile_SUPPORT_MULTIPLE_BLOCK_READ_CMD_MASK 1
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkType5CCFile, SUPPORT_MULTIPLE_BLOCK_READ_CMD_MASK, jbyte)

inline jbyte ComStSt25sdkType5CCFile_get_SUPPORT_LOCK_BLOCK_CMD_MASK(void);
#define ComStSt25sdkType5CCFile_SUPPORT_LOCK_BLOCK_CMD_MASK 8
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkType5CCFile, SUPPORT_LOCK_BLOCK_CMD_MASK, jbyte)

inline jbyte ComStSt25sdkType5CCFile_get_SUPPORT_SPECIAL_FRAME_CMD_MASK(void);
#define ComStSt25sdkType5CCFile_SUPPORT_SPECIAL_FRAME_CMD_MASK 16
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkType5CCFile, SUPPORT_SPECIAL_FRAME_CMD_MASK, jbyte)

inline jbyte ComStSt25sdkType5CCFile_get_VICINITY_HIGH_DENSITY_CMD_MASK(void);
#define ComStSt25sdkType5CCFile_VICINITY_HIGH_DENSITY_CMD_MASK 4
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkType5CCFile, VICINITY_HIGH_DENSITY_CMD_MASK, jbyte)

__attribute__((unused)) static void ComStSt25sdkType5CCFile_checkCache(ComStSt25sdkType5CCFile *self);

__attribute__((unused)) static IOSObjectArray *ComStSt25sdkType5CCFile__Annotations$0(void);

@implementation ComStSt25sdkType5CCFile

+ (jbyte)CCFILE_SHORT_IDENTIFIER {
  return ComStSt25sdkType5CCFile_CCFILE_SHORT_IDENTIFIER;
}

+ (jbyte)CCFILE_LONG_IDENTIFIER {
  return ComStSt25sdkType5CCFile_CCFILE_LONG_IDENTIFIER;
}

+ (jint)CCFILE_DATA_AREA_SIZE_MULTIPLIER {
  return ComStSt25sdkType5CCFile_CCFILE_DATA_AREA_SIZE_MULTIPLIER;
}

- (IOSByteArray *)read {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)write {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)writeWithByteArray:(IOSByteArray *)buffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initEmptyCCFileWithInt:(jint)memSizeInBytes {
  if (memSizeInBytes > 2040) {
    mCCLength_ = 8;
    mMagicNumber_ = ComStSt25sdkType5CCFile_CCFILE_LONG_IDENTIFIER;
    mMappingVersion_ = (jbyte) (jint) 0x40;
    mReadAccess_ = (jint) 0x00;
    mWriteAccess_ = (jint) 0x00;
    mDataAreaSize_ = memSizeInBytes;
    mSupport2ByteAddressMode_ = true;
    mSupportMultipleBlockReadCommand_ = true;
    mSupportLockBlockCommand_ = false;
    mSupportSpecialFrameCommand_ = false;
    mVicinityHighDensityOverflow_ = false;
  }
  else {
    mCCLength_ = 4;
    mMagicNumber_ = ComStSt25sdkType5CCFile_CCFILE_SHORT_IDENTIFIER;
    mMappingVersion_ = (jbyte) (jint) 0x40;
    mReadAccess_ = (jint) 0x00;
    mWriteAccess_ = (jint) 0x00;
    mDataAreaSize_ = memSizeInBytes;
    mSupport2ByteAddressMode_ = false;
    mSupportMultipleBlockReadCommand_ = true;
    mSupportLockBlockCommand_ = false;
    mSupportSpecialFrameCommand_ = false;
    mVicinityHighDensityOverflow_ = false;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComStSt25sdkType5CCFile_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)getExpectedCCFileLengthWithInt:(jint)dataAreaSizeInBytes {
  return ComStSt25sdkType5CCFile_getExpectedCCFileLengthWithInt_(dataAreaSizeInBytes);
}

- (jint)getCCLength {
  ComStSt25sdkType5CCFile_checkCache(self);
  return mCCLength_;
}

- (jbyte)getMagicNumber {
  ComStSt25sdkType5CCFile_checkCache(self);
  return mMagicNumber_;
}

- (jbyte)getCCMappingVersion {
  ComStSt25sdkType5CCFile_checkCache(self);
  return mMappingVersion_;
}

- (jbyte)getCCReadAccess {
  ComStSt25sdkType5CCFile_checkCache(self);
  return mReadAccess_;
}

- (jbyte)getCCWriteAccess {
  ComStSt25sdkType5CCFile_checkCache(self);
  return mWriteAccess_;
}

- (jint)getDataAreaSize {
  ComStSt25sdkType5CCFile_checkCache(self);
  return mDataAreaSize_;
}

- (jboolean)is2ByteAddressModeSupported {
  ComStSt25sdkType5CCFile_checkCache(self);
  return mSupport2ByteAddressMode_;
}

- (jboolean)isMultipleBlockReadCommandSupported {
  ComStSt25sdkType5CCFile_checkCache(self);
  return mSupportMultipleBlockReadCommand_;
}

- (jboolean)isLockBlockCommandSupported {
  ComStSt25sdkType5CCFile_checkCache(self);
  return mSupportLockBlockCommand_;
}

- (jboolean)isSpecialFrameCommandSupported {
  ComStSt25sdkType5CCFile_checkCache(self);
  return mSupportSpecialFrameCommand_;
}

- (jboolean)isVicinityHighDensityOverflow {
  ComStSt25sdkType5CCFile_checkCache(self);
  return mVicinityHighDensityOverflow_;
}

- (void)invalidateCache {
  mCacheInvalidated_ = true;
}

- (void)validateCache {
  mCacheInvalidated_ = false;
}

- (void)activateCache {
  mCacheActivated_ = true;
  mCacheInvalidated_ = true;
}

- (void)deactivateCache {
  mCacheActivated_ = false;
}

- (void)updateCache {
  if ([self isCacheActivated]) {
    [self invalidateCache];
    IOSByteArray *buffer = [self read];
    [self parseCCFileWithByteArray:buffer];
    mCacheInvalidated_ = false;
  }
}

- (jboolean)isCacheValid {
  return !mCacheInvalidated_;
}

- (jboolean)isCacheActivated {
  return mCacheActivated_;
}

- (void)parseCCFileWithByteArray:(IOSByteArray *)buffer {
  if (((IOSByteArray *) nil_chk(buffer))->size_ < 3) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE));
  }
  if (IOSByteArray_Get(buffer, 2) == (jint) 0x00) {
    if (buffer->size_ != 8) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE));
    }
    mCCLength_ = buffer->size_;
    mDataAreaSize_ = ComStSt25sdkType5CCFile_CCFILE_DATA_AREA_SIZE_MULTIPLIER * ((JreLShift32(ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(buffer, 6)), 8)) + ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(buffer, 7)));
  }
  else {
    if (buffer->size_ != 4) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE));
    }
    mCCLength_ = buffer->size_;
    mDataAreaSize_ = ComStSt25sdkType5CCFile_CCFILE_DATA_AREA_SIZE_MULTIPLIER * ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(buffer, 2));
  }
  mMagicNumber_ = IOSByteArray_Get(buffer, 0);
  mSupport2ByteAddressMode_ = (IOSByteArray_Get(buffer, 0) == ComStSt25sdkType5CCFile_CCFILE_LONG_IDENTIFIER);
  mMappingVersion_ = (jbyte) (IOSByteArray_Get(buffer, 1) & (jint) 0xF0);
  mReadAccess_ = (jbyte) (IOSByteArray_Get(buffer, 1) & (jint) 0x0C);
  mWriteAccess_ = (jbyte) (IOSByteArray_Get(buffer, 1) & (jint) 0x03);
  mSupportMultipleBlockReadCommand_ = ((IOSByteArray_Get(buffer, 3) & ComStSt25sdkType5CCFile_SUPPORT_MULTIPLE_BLOCK_READ_CMD_MASK) == ComStSt25sdkType5CCFile_SUPPORT_MULTIPLE_BLOCK_READ_CMD_MASK);
  mSupportLockBlockCommand_ = ((IOSByteArray_Get(buffer, 3) & ComStSt25sdkType5CCFile_SUPPORT_LOCK_BLOCK_CMD_MASK) == ComStSt25sdkType5CCFile_SUPPORT_LOCK_BLOCK_CMD_MASK);
  mSupportSpecialFrameCommand_ = ((IOSByteArray_Get(buffer, 3) & ComStSt25sdkType5CCFile_SUPPORT_SPECIAL_FRAME_CMD_MASK) == ComStSt25sdkType5CCFile_SUPPORT_SPECIAL_FRAME_CMD_MASK);
  mVicinityHighDensityOverflow_ = ((IOSByteArray_Get(buffer, 3) & ComStSt25sdkType5CCFile_VICINITY_HIGH_DENSITY_CMD_MASK) == ComStSt25sdkType5CCFile_VICINITY_HIGH_DENSITY_CMD_MASK);
}

- (IOSByteArray *)rebuildBuffer {
  if (mCCLength_ != 4 && mCCLength_ != 8) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE));
  }
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:mCCLength_];
  *IOSByteArray_GetRef(buffer, 0) = mMagicNumber_;
  *IOSByteArray_GetRef(buffer, 1) = (jbyte) (mMappingVersion_ | mReadAccess_ | mWriteAccess_);
  *IOSByteArray_GetRef(buffer, 3) = (jint) 0x00;
  if (mSupportMultipleBlockReadCommand_) {
    *IOSByteArray_GetRef(buffer, 3) |= ComStSt25sdkType5CCFile_SUPPORT_MULTIPLE_BLOCK_READ_CMD_MASK;
  }
  if (mSupportLockBlockCommand_) {
    *IOSByteArray_GetRef(buffer, 3) |= ComStSt25sdkType5CCFile_SUPPORT_LOCK_BLOCK_CMD_MASK;
  }
  if (mSupportSpecialFrameCommand_) {
    *IOSByteArray_GetRef(buffer, 3) |= ComStSt25sdkType5CCFile_SUPPORT_SPECIAL_FRAME_CMD_MASK;
  }
  if (mVicinityHighDensityOverflow_) {
    *IOSByteArray_GetRef(buffer, 3) |= ComStSt25sdkType5CCFile_VICINITY_HIGH_DENSITY_CMD_MASK;
  }
  if (mCCLength_ == 4) {
    *IOSByteArray_GetRef(buffer, 2) = (jbyte) (mDataAreaSize_ / ComStSt25sdkType5CCFile_CCFILE_DATA_AREA_SIZE_MULTIPLIER);
  }
  else {
    *IOSByteArray_GetRef(buffer, 2) = (jint) 0x00;
    *IOSByteArray_GetRef(buffer, 4) = (jint) 0x00;
    *IOSByteArray_GetRef(buffer, 5) = (jint) 0x00;
    *IOSByteArray_GetRef(buffer, 6) = (jbyte) (JreRShift32(((mDataAreaSize_ / ComStSt25sdkType5CCFile_CCFILE_DATA_AREA_SIZE_MULTIPLIER) & (jint) 0xFF00), 8));
    *IOSByteArray_GetRef(buffer, 7) = (jbyte) ((mDataAreaSize_ / ComStSt25sdkType5CCFile_CCFILE_DATA_AREA_SIZE_MULTIPLIER) & (jint) 0xFF);
  }
  return buffer;
}

- (void)checkCache {
  ComStSt25sdkType5CCFile_checkCache(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[B", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 1, 2, 0, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 4, -1, -1, 6, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, 0, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(read);
  methods[1].selector = @selector(write);
  methods[2].selector = @selector(writeWithByteArray:);
  methods[3].selector = @selector(initEmptyCCFileWithInt:);
  methods[4].selector = @selector(init);
  methods[5].selector = @selector(getExpectedCCFileLengthWithInt:);
  methods[6].selector = @selector(getCCLength);
  methods[7].selector = @selector(getMagicNumber);
  methods[8].selector = @selector(getCCMappingVersion);
  methods[9].selector = @selector(getCCReadAccess);
  methods[10].selector = @selector(getCCWriteAccess);
  methods[11].selector = @selector(getDataAreaSize);
  methods[12].selector = @selector(is2ByteAddressModeSupported);
  methods[13].selector = @selector(isMultipleBlockReadCommandSupported);
  methods[14].selector = @selector(isLockBlockCommandSupported);
  methods[15].selector = @selector(isSpecialFrameCommandSupported);
  methods[16].selector = @selector(isVicinityHighDensityOverflow);
  methods[17].selector = @selector(invalidateCache);
  methods[18].selector = @selector(validateCache);
  methods[19].selector = @selector(activateCache);
  methods[20].selector = @selector(deactivateCache);
  methods[21].selector = @selector(updateCache);
  methods[22].selector = @selector(isCacheValid);
  methods[23].selector = @selector(isCacheActivated);
  methods[24].selector = @selector(parseCCFileWithByteArray:);
  methods[25].selector = @selector(rebuildBuffer);
  methods[26].selector = @selector(checkCache);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mCCLength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mMagicNumber_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mMappingVersion_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mReadAccess_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mWriteAccess_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mDataAreaSize_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mBlockSize_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mSupport2ByteAddressMode_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mSupportMultipleBlockReadCommand_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mSupportLockBlockCommand_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mSupportSpecialFrameCommand_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mVicinityHighDensityOverflow_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mCacheActivated_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mCacheInvalidated_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "CCFILE_SHORT_IDENTIFIER", "B", .constantValue.asChar = ComStSt25sdkType5CCFile_CCFILE_SHORT_IDENTIFIER, 0x19, -1, -1, -1, -1 },
    { "CCFILE_LONG_IDENTIFIER", "B", .constantValue.asChar = ComStSt25sdkType5CCFile_CCFILE_LONG_IDENTIFIER, 0x19, -1, -1, -1, -1 },
    { "CCFILE_DATA_AREA_SIZE_MULTIPLIER", "I", .constantValue.asInt = ComStSt25sdkType5CCFile_CCFILE_DATA_AREA_SIZE_MULTIPLIER, 0x19, -1, -1, -1, -1 },
    { "SUPPORT_MULTIPLE_BLOCK_READ_CMD_MASK", "B", .constantValue.asChar = ComStSt25sdkType5CCFile_SUPPORT_MULTIPLE_BLOCK_READ_CMD_MASK, 0x1a, -1, -1, -1, -1 },
    { "SUPPORT_LOCK_BLOCK_CMD_MASK", "B", .constantValue.asChar = ComStSt25sdkType5CCFile_SUPPORT_LOCK_BLOCK_CMD_MASK, 0x1a, -1, -1, -1, -1 },
    { "SUPPORT_SPECIAL_FRAME_CMD_MASK", "B", .constantValue.asChar = ComStSt25sdkType5CCFile_SUPPORT_SPECIAL_FRAME_CMD_MASK, 0x1a, -1, -1, -1, -1 },
    { "VICINITY_HIGH_DENSITY_CMD_MASK", "B", .constantValue.asChar = ComStSt25sdkType5CCFile_VICINITY_HIGH_DENSITY_CMD_MASK, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkSTException;", "write", "[B", "initEmptyCCFile", "I", "getExpectedCCFileLength", (void *)&ComStSt25sdkType5CCFile__Annotations$0, "parseCCFile" };
  static const J2ObjcClassInfo _ComStSt25sdkType5CCFile = { "CCFile", "com.st.st25sdk.type5", ptrTable, methods, fields, 7, 0x401, 27, 21, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType5CCFile;
}

@end

void ComStSt25sdkType5CCFile_init(ComStSt25sdkType5CCFile *self) {
  NSObject_init(self);
  self->mCacheActivated_ = true;
  self->mCacheInvalidated_ = true;
}

jint ComStSt25sdkType5CCFile_getExpectedCCFileLengthWithInt_(jint dataAreaSizeInBytes) {
  ComStSt25sdkType5CCFile_initialize();
  if (dataAreaSizeInBytes > 2040) {
    return 8;
  }
  else {
    return 4;
  }
}

void ComStSt25sdkType5CCFile_checkCache(ComStSt25sdkType5CCFile *self) {
  if (![self isCacheActivated]) {
    IOSByteArray *buffer = [self read];
    [self parseCCFileWithByteArray:buffer];
  }
  else if (![self isCacheValid]) {
    [self updateCache];
  }
}

IOSObjectArray *ComStSt25sdkType5CCFile__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType5CCFile)
