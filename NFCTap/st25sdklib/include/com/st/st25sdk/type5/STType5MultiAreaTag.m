//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type5/STType5MultiAreaTag.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/MultiAreaInterface.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/TagCache.h"
#include "com/st/st25sdk/command/Iso15693Command.h"
#include "com/st/st25sdk/command/NdefType5Command.h"
#include "com/st/st25sdk/ndef/NDEFMsg.h"
#include "com/st/st25sdk/type5/STAreaContent.h"
#include "com/st/st25sdk/type5/STType5MultiAreaTag.h"
#include "com/st/st25sdk/type5/STType5Tag.h"
#include "java/lang/Exception.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation ComStSt25sdkType5STType5MultiAreaTag

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)readerInterface
                                        withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkType5STType5MultiAreaTag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  return self;
}

- (void)initAreaList {
  for (ComStSt25sdkType5STAreaContent * __strong it in nil_chk(mAreaList_)) {
    [((ComStSt25sdkTagCache *) nil_chk(mCache_)) removeWithId:it];
  }
  [mAreaList_ clear];
  jint maxNumberOfAreas = [self getNumberOfAreas];
  for (jint area = ComStSt25sdkMultiAreaInterface_AREA1; area <= maxNumberOfAreas; area++) {
    ComStSt25sdkType5STAreaContent *stAreaContent = nil;
    @try {
      stAreaContent = new_ComStSt25sdkType5STAreaContent_initWithComStSt25sdkType5STType5MultiAreaTag_withInt_withInt_withComStSt25sdkCommandNdefType5Command_(self, [self getAreaOffsetInBytesWithInt:area], [self getAreaSizeInBytesWithInt:area], mNdefCmd_);
    }
    @catch (ComStSt25sdkSTException *e) {
      ComStSt25sdkSTLog_eWithNSString_(JreStrcat("$I", @"Failed to initialize Area ", area));
    }
    if (stAreaContent != nil) {
      [((id<JavaUtilList>) nil_chk(mAreaList_)) addWithId:stAreaContent];
      [((ComStSt25sdkTagCache *) nil_chk(mCache_)) addWithId:stAreaContent];
    }
  }
}

- (jboolean)isAreaNumberValidWithInt:(jint)area {
  return (area >= 1 && area <= [self getNumberOfAreas]);
}

- (jint)getMaxNumberOfAreas {
  return 0;
}

- (jint)getNumberOfAreas {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (void)setNumberOfAreasWithInt:(jint)nbOfAreas {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jint)getAreaSizeInBytesWithInt:(jint)area {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jint)getAreaOffsetInBytesWithInt:(jint)area {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jint)getAreaOffsetInBlocksWithInt:(jint)area {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jint)getAreaFromBlockAddressWithInt:(jint)blockOffset {
  return [self getAreaFromByteAddressWithInt:blockOffset * [self getBlockSizeInBytes]];
}

- (jint)getAreaFromByteAddressWithInt:(jint)blockOffset {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (IOSByteArray *)readBytesWithInt:(jint)area
                           withInt:(jint)offsetInBytes
                           withInt:(jint)sizeInBytes {
  if (![self isAreaNumberValidWithInt:area]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (offsetInBytes < 0 || sizeInBytes < 0) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ((offsetInBytes + sizeInBytes) > [self getAreaSizeInBytesWithInt:area]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jint byteAddress = [self getAreaOffsetInBytesWithInt:area] + offsetInBytes;
  return [self readBytesWithInt:byteAddress withInt:sizeInBytes];
}

- (void)writeBytesWithInt:(jint)area
                  withInt:(jint)offsetInBytes
            withByteArray:(IOSByteArray *)data {
  if (![self isAreaNumberValidWithInt:area]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (offsetInBytes < 0) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (data == nil || (data->size_ + offsetInBytes) > [self getAreaSizeInBytesWithInt:area]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jint byteAddress = [self getAreaOffsetInBytesWithInt:area] + offsetInBytes;
  [self writeBytesWithInt:byteAddress withByteArray:data];
}

- (ComStSt25sdkNdefNDEFMsg *)readNdefMessageWithInt:(jint)area {
  ComStSt25sdkNdefNDEFMsg *ndefMsg = nil;
  if (![self isAreaNumberValidWithInt:area]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (area == ComStSt25sdkMultiAreaInterface_AREA1) {
    return [self readNdefMessage];
  }
  @try {
    ComStSt25sdkType5STAreaContent *areaContent = [((id<JavaUtilList>) nil_chk(mAreaList_)) getWithInt:area - 1];
    if (areaContent != nil) {
      ndefMsg = [areaContent readNdefMessage];
    }
  }
  @catch (JavaLangIndexOutOfBoundsException *ex) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return ndefMsg;
}

- (void)writeNdefMessageWithInt:(jint)area
    withComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg {
  if (![self isAreaNumberValidWithInt:area]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (area == ComStSt25sdkMultiAreaInterface_AREA1) {
    [self writeNdefMessageWithComStSt25sdkNdefNDEFMsg:msg];
    return;
  }
  @try {
    ComStSt25sdkType5STAreaContent *areaContent = [((id<JavaUtilList>) nil_chk(mAreaList_)) getWithInt:area - 1];
    if (areaContent != nil) {
      [areaContent writeNdefMessageWithComStSt25sdkNdefNDEFMsg:msg];
    }
  }
  @catch (JavaLangIndexOutOfBoundsException *ex) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
}

- (void)writeNdefMessageWithComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg
                                           withByte:(jbyte)flag {
  [self writeNdefMessageWithComStSt25sdkNdefNDEFMsg:msg withByte:flag withBoolean:true];
}

- (void)writeNdefMessageWithComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg
                                        withBoolean:(jboolean)updateCCFile {
  [self writeNdefMessageWithComStSt25sdkNdefNDEFMsg:msg withByte:[((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getFlag] withBoolean:updateCCFile];
}

- (void)writeNdefMessageWithComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg
                                           withByte:(jbyte)flag
                                        withBoolean:(jboolean)updateCCFile {
  jint tlSize = 2;
  jint terminatorTlvLength = 1;
  jint ccfileLength;
  jint areaSize = [self getAreaSizeInBytesWithInt:ComStSt25sdkMultiAreaInterface_AREA1];
  if (updateCCFile) {
    if (![self isCCFileValid]) {
      [self initEmptyCCFile];
      if (mNdefMsg_ != nil) {
        [((ComStSt25sdkTagCache *) nil_chk(mCache_)) removeWithId:mNdefMsg_];
      }
      [self writeCCFile];
    }
  }
  ccfileLength = [self getCCFileLength];
  if (ccfileLength != 0) {
    jint ndefLength;
    @try {
      ndefLength = [((ComStSt25sdkNdefNDEFMsg *) nil_chk(msg)) getLength];
    }
    @catch (JavaLangException *e) {
      [e printStackTrace];
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_NDEF_DATA));
    }
    if ((ccfileLength + tlSize + ndefLength + terminatorTlvLength) <= areaSize) {
      if (mNdefMsg_ != nil) {
        [((ComStSt25sdkTagCache *) nil_chk(mCache_)) removeWithId:mNdefMsg_];
      }
      [((ComStSt25sdkCommandNdefType5Command *) nil_chk(mNdefCmd_)) writeNdefMessageWithInt:(jbyte) ccfileLength / [self getBlockSizeInBytes] withComStSt25sdkNdefNDEFMsg:msg withByte:flag withByteArray:mUid_];
    }
    else {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NDEF_MESSAGE_TOO_BIG));
    }
  }
  else {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE));
  }
  mNdefMsg_ = [msg copy__];
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) addWithId:mNdefMsg_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x4, 2, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 3, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 11, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkNdefNDEFMsg;", 0x1, 14, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 17, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 18, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 19, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[1].selector = @selector(initAreaList);
  methods[2].selector = @selector(isAreaNumberValidWithInt:);
  methods[3].selector = @selector(getMaxNumberOfAreas);
  methods[4].selector = @selector(getNumberOfAreas);
  methods[5].selector = @selector(setNumberOfAreasWithInt:);
  methods[6].selector = @selector(getAreaSizeInBytesWithInt:);
  methods[7].selector = @selector(getAreaOffsetInBytesWithInt:);
  methods[8].selector = @selector(getAreaOffsetInBlocksWithInt:);
  methods[9].selector = @selector(getAreaFromBlockAddressWithInt:);
  methods[10].selector = @selector(getAreaFromByteAddressWithInt:);
  methods[11].selector = @selector(readBytesWithInt:withInt:withInt:);
  methods[12].selector = @selector(writeBytesWithInt:withInt:withByteArray:);
  methods[13].selector = @selector(readNdefMessageWithInt:);
  methods[14].selector = @selector(writeNdefMessageWithInt:withComStSt25sdkNdefNDEFMsg:);
  methods[15].selector = @selector(writeNdefMessageWithComStSt25sdkNdefNDEFMsg:withByte:);
  methods[16].selector = @selector(writeNdefMessageWithComStSt25sdkNdefNDEFMsg:withBoolean:);
  methods[17].selector = @selector(writeNdefMessageWithComStSt25sdkNdefNDEFMsg:withByte:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mAreaList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 20, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[B", "LComStSt25sdkSTException;", "isAreaNumberValid", "I", "setNumberOfAreas", "getAreaSizeInBytes", "getAreaOffsetInBytes", "getAreaOffsetInBlocks", "getAreaFromBlockAddress", "getAreaFromByteAddress", "readBytes", "III", "writeBytes", "II[B", "readNdefMessage", "writeNdefMessage", "ILComStSt25sdkNdefNDEFMsg;", "LComStSt25sdkNdefNDEFMsg;B", "LComStSt25sdkNdefNDEFMsg;Z", "LComStSt25sdkNdefNDEFMsg;BZ", "Ljava/util/List<Lcom/st/st25sdk/type5/STAreaContent;>;" };
  static const J2ObjcClassInfo _ComStSt25sdkType5STType5MultiAreaTag = { "STType5MultiAreaTag", "com.st.st25sdk.type5", ptrTable, methods, fields, 7, 0x401, 18, 1, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType5STType5MultiAreaTag;
}

@end

void ComStSt25sdkType5STType5MultiAreaTag_initWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkType5STType5MultiAreaTag *self, id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  ComStSt25sdkType5STType5Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  self->mName_ = @"ST Type 5 tag";
  self->mAreaList_ = new_JavaUtilArrayList_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType5STType5MultiAreaTag)
