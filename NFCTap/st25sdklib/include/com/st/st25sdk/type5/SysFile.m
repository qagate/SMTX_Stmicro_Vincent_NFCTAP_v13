//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type5/SysFile.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/NFCTag.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/type5/SysFile.h"
#include "java/nio/ByteBuffer.h"

@implementation ComStSt25sdkType5SysFile

+ (jbyte)DSFID_MASK {
  return ComStSt25sdkType5SysFile_DSFID_MASK;
}

+ (jbyte)AFI_MASK {
  return ComStSt25sdkType5SysFile_AFI_MASK;
}

+ (jbyte)VICC_MEM_SIZE_MASK {
  return ComStSt25sdkType5SysFile_VICC_MEM_SIZE_MASK;
}

+ (jbyte)ICREF_MASK {
  return ComStSt25sdkType5SysFile_ICREF_MASK;
}

- (IOSByteArray *)read {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComStSt25sdkType5SysFile_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)getUid {
  [self checkCache];
  return mUid_;
}

- (jbyte)getDSFID {
  [self checkCache];
  return mDSFID_;
}

- (void)setDSFIDWithByte:(jbyte)dsfid {
  mDSFID_ = dsfid;
}

- (jbyte)getAFI {
  [self checkCache];
  return mAFI_;
}

- (void)setAFIWithByte:(jbyte)afi {
  mAFI_ = afi;
}

- (jbyte)getICRef {
  [self checkCache];
  return mICRef_;
}

- (jint)getNumberOfBlocks {
  [self checkCache];
  return mNumberOfBlocks_;
}

- (jint)getBlockSizeInBytes {
  [self checkCache];
  return mBlockSize_;
}

- (jint)getSysLength {
  [self checkCache];
  return mLength_;
}

- (void)invalidateCache {
  mCacheInvalidated_ = true;
}

- (void)validateCache {
  mCacheInvalidated_ = false;
}

- (void)activateCache {
  mCacheActivated_ = true;
  mCacheInvalidated_ = true;
}

- (void)deactivateCache {
  mCacheActivated_ = false;
}

- (void)updateCache {
  if (mCacheActivated_) {
    [self invalidateCache];
    IOSByteArray *buffer = [self read];
    [self parseSysFileWithByteArray:buffer];
    mCacheInvalidated_ = false;
  }
}

- (jboolean)isCacheValid {
  return !mCacheInvalidated_;
}

- (jboolean)isCacheActivated {
  return mCacheActivated_;
}

- (void)checkCache {
  if (![self isCacheActivated]) {
    IOSByteArray *buffer = [self read];
    [self parseSysFileWithByteArray:buffer];
  }
  else if (![self isCacheValid]) [self updateCache];
}

- (void)parseSysFileWithByteArray:(IOSByteArray *)buffer {
  if (buffer == nil || buffer->size_ < 9) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
  }
  JavaNioByteBuffer *byteBuffer = JavaNioByteBuffer_wrapWithByteArray_(buffer);
  jbyte sysInfoByte = [((JavaNioByteBuffer *) nil_chk(byteBuffer)) get];
  (void) [byteBuffer getWithByteArray:mUid_ withInt:0 withInt:8];
  mUid_ = ComStSt25sdkHelper_reverseByteArrayWithByteArray_(mUid_);
  if ((sysInfoByte & ComStSt25sdkType5SysFile_DSFID_MASK) == ComStSt25sdkType5SysFile_DSFID_MASK) {
    mDSFIDSupported_ = true;
    mDSFID_ = [byteBuffer get];
  }
  else mDSFIDSupported_ = false;
  if ((sysInfoByte & ComStSt25sdkType5SysFile_AFI_MASK) == ComStSt25sdkType5SysFile_AFI_MASK) {
    mAFISupported_ = true;
    mAFI_ = [byteBuffer get];
  }
  else mAFISupported_ = false;
  if ((sysInfoByte & ComStSt25sdkType5SysFile_VICC_MEM_SIZE_MASK) == ComStSt25sdkType5SysFile_VICC_MEM_SIZE_MASK) {
    mVICCMemSizesupported_ = true;
    mNumberOfBlocks_ = ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_([byteBuffer get]);
    mBlockSize_ = ([byteBuffer get] & (jint) 0x1F) + 1;
  }
  else mVICCMemSizesupported_ = false;
  if ((sysInfoByte & ComStSt25sdkType5SysFile_ICREF_MASK) == ComStSt25sdkType5SysFile_ICREF_MASK) {
    mICRefSupported_ = true;
    mICRef_ = [byteBuffer get];
  }
  else mICRefSupported_ = false;
  mBuffer_ = [byteBuffer array];
  mLength_ = ((IOSByteArray *) nil_chk(mBuffer_))->size_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[B", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(read);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(getUid);
  methods[3].selector = @selector(getDSFID);
  methods[4].selector = @selector(setDSFIDWithByte:);
  methods[5].selector = @selector(getAFI);
  methods[6].selector = @selector(setAFIWithByte:);
  methods[7].selector = @selector(getICRef);
  methods[8].selector = @selector(getNumberOfBlocks);
  methods[9].selector = @selector(getBlockSizeInBytes);
  methods[10].selector = @selector(getSysLength);
  methods[11].selector = @selector(invalidateCache);
  methods[12].selector = @selector(validateCache);
  methods[13].selector = @selector(activateCache);
  methods[14].selector = @selector(deactivateCache);
  methods[15].selector = @selector(updateCache);
  methods[16].selector = @selector(isCacheValid);
  methods[17].selector = @selector(isCacheActivated);
  methods[18].selector = @selector(checkCache);
  methods[19].selector = @selector(parseSysFileWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mLength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mDSFIDSupported_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mAFISupported_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mVICCMemSizesupported_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mICRefSupported_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mDSFID_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mAFI_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mICRef_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mNumberOfBlocks_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mBlockSize_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mUid_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mAddressingMode_", "LComStSt25sdkNFCTag_TagAddressingMode;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mBuffer_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mCacheActivated_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mCacheInvalidated_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "DSFID_MASK", "B", .constantValue.asChar = ComStSt25sdkType5SysFile_DSFID_MASK, 0x1c, -1, -1, -1, -1 },
    { "AFI_MASK", "B", .constantValue.asChar = ComStSt25sdkType5SysFile_AFI_MASK, 0x1c, -1, -1, -1, -1 },
    { "VICC_MEM_SIZE_MASK", "B", .constantValue.asChar = ComStSt25sdkType5SysFile_VICC_MEM_SIZE_MASK, 0x1c, -1, -1, -1, -1 },
    { "ICREF_MASK", "B", .constantValue.asChar = ComStSt25sdkType5SysFile_ICREF_MASK, 0x1c, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkSTException;", "setDSFID", "B", "setAFI", "parseSysFile", "[B" };
  static const J2ObjcClassInfo _ComStSt25sdkType5SysFile = { "SysFile", "com.st.st25sdk.type5", ptrTable, methods, fields, 7, 0x401, 20, 19, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType5SysFile;
}

@end

void ComStSt25sdkType5SysFile_init(ComStSt25sdkType5SysFile *self) {
  NSObject_init(self);
  self->mUid_ = [IOSByteArray newArrayWithLength:8];
  self->mCacheActivated_ = true;
  self->mCacheInvalidated_ = true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType5SysFile)
