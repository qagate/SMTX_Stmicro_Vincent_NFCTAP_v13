//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type5/Type5Tag.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/NFCTag.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/TagCache.h"
#include "com/st/st25sdk/command/Iso15693Command.h"
#include "com/st/st25sdk/command/Iso15693Protocol.h"
#include "com/st/st25sdk/command/NdefType5Command.h"
#include "com/st/st25sdk/command/Type5Command.h"
#include "com/st/st25sdk/command/VicinityCommand.h"
#include "com/st/st25sdk/ndef/NDEFMsg.h"
#include "com/st/st25sdk/type5/CCFileType5.h"
#include "com/st/st25sdk/type5/ReadBlockResult.h"
#include "com/st/st25sdk/type5/Type5Tag.h"
#include "java/lang/Exception.h"
#include "java/util/Arrays.h"

@interface ComStSt25sdkType5Type5Tag () {
 @public
  jint mBlockSizeInBytes_;
}

- (void)determineBlockSizeWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)readerInterface
                                              withByteArray:(IOSByteArray *)uid;

@end

__attribute__((unused)) static void ComStSt25sdkType5Type5Tag_determineBlockSizeWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkType5Type5Tag *self, id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid);

@implementation ComStSt25sdkType5Type5Tag

+ (jint)DEFAULT_NBR_OF_BYTES_PER_BLOCK {
  return ComStSt25sdkType5Type5Tag_DEFAULT_NBR_OF_BYTES_PER_BLOCK;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)readerInterface
                                        withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkType5Type5Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  return self;
}

- (void)determineBlockSizeWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)readerInterface
                                              withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkType5Type5Tag_determineBlockSizeWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
}

- (void)writeNdefMessageWithComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg {
  [self writeNdefMessageWithComStSt25sdkNdefNDEFMsg:msg withByte:[((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getFlag] withBoolean:true];
}

- (void)writeNdefMessageWithComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg
                                           withByte:(jbyte)flag {
  [self writeNdefMessageWithComStSt25sdkNdefNDEFMsg:msg withByte:flag withBoolean:true];
}

- (void)writeNdefMessageWithComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg
                                        withBoolean:(jboolean)updateCCFile {
  [self writeNdefMessageWithComStSt25sdkNdefNDEFMsg:msg withByte:[((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getFlag] withBoolean:updateCCFile];
}

- (void)writeNdefMessageWithComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg
                                           withByte:(jbyte)flag
                                        withBoolean:(jboolean)updateCCFile {
  jint tlSize = 2;
  jint terminatorTlvLength = 1;
  jint ccfileLength;
  jint ccMemorySize;
  if (msg == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA_PARAM));
  }
  if (updateCCFile) {
    if (![self isCCFileValid]) {
      [self initEmptyCCFile];
      if (mNdefMsg_ != nil) {
        [((ComStSt25sdkTagCache *) nil_chk(mCache_)) removeWithId:mNdefMsg_];
      }
      [self writeCCFile];
    }
  }
  ccfileLength = [self getCCFileLength];
  ccMemorySize = [self getCCMemorySize];
  if (ccfileLength != 0) {
    jint ndefLength = 0;
    @try {
      ndefLength = [msg getLength];
    }
    @catch (JavaLangException *e) {
      [e printStackTrace];
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_NDEF_DATA));
    }
    if ((ccfileLength + tlSize + ndefLength + terminatorTlvLength) <= ccMemorySize) {
      if (mNdefMsg_ != nil) {
        [((ComStSt25sdkTagCache *) nil_chk(mCache_)) removeWithId:mNdefMsg_];
      }
      [((ComStSt25sdkCommandNdefType5Command *) nil_chk(mNdefCmd_)) writeNdefMessageWithInt:(jbyte) ccfileLength / [self getBlockSizeInBytes] withComStSt25sdkNdefNDEFMsg:msg withByte:flag withByteArray:mUid_];
    }
    else {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NDEF_MESSAGE_TOO_BIG));
    }
  }
  else {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE));
  }
  mNdefMsg_ = [msg copy__];
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) addWithId:mNdefMsg_];
}

- (jboolean)isCCFileValid {
  jboolean isCCFileValid;
  @try {
    IOSByteArray *ccFileData = [self readCCFile];
    IOSByteArray *expectedCCFileData = [self getExpectedCCFileData];
    isCCFileValid = JavaUtilArrays_equalsWithByteArray_withByteArray_(expectedCCFileData, ccFileData);
  }
  @catch (ComStSt25sdkSTException *e) {
    if ([((ComStSt25sdkSTException_STExceptionCode *) nil_chk([e getError])) isEqual:JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE)]) {
      isCCFileValid = false;
    }
    else {
      @throw e;
    }
  }
  return isCCFileValid;
}

- (ComStSt25sdkNdefNDEFMsg *)readNdefMessage {
  return [self readNdefMessageWithByte:[((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getFlag]];
}

- (ComStSt25sdkNdefNDEFMsg *)readNdefMessageWithByte:(jbyte)flag {
  if ([((ComStSt25sdkTagCache *) nil_chk(mCache_)) isCacheActivated] && [((ComStSt25sdkTagCache *) nil_chk(mCache_)) isCacheValidWithId:mNdefMsg_]) {
    return [((ComStSt25sdkNdefNDEFMsg *) nil_chk(mNdefMsg_)) copy__];
  }
  jint nbOfBlocks = [self getCCFileLength] / [self getBlockSizeInBytes];
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) removeWithId:mNdefMsg_];
  mNdefMsg_ = [((ComStSt25sdkCommandNdefType5Command *) nil_chk(mNdefCmd_)) readNdefMessageWithInt:nbOfBlocks withByte:flag withByteArray:mUid_];
  if (mNdefMsg_ != nil) {
    [((ComStSt25sdkTagCache *) nil_chk(mCache_)) addWithId:mNdefMsg_];
    return mNdefMsg_;
  }
  return nil;
}

- (IOSByteArray *)readBytesWithInt:(jint)byteAddress
                           withInt:(jint)sizeInBytes {
  return [self readBytesWithInt:byteAddress withInt:sizeInBytes withByte:[((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) getFlag]];
}

- (IOSByteArray *)readBytesWithInt:(jint)byteAddress
                           withInt:(jint)sizeInBytes
                          withByte:(jbyte)flag {
  jint memSizeInBytes = [self getMemSizeInBytes];
  if (byteAddress < 0 || byteAddress >= memSizeInBytes || sizeInBytes < 0) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ((byteAddress + sizeInBytes) > memSizeInBytes) {
    sizeInBytes = memSizeInBytes - byteAddress;
  }
  return [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) readBytesWithInt:byteAddress withInt:sizeInBytes withByte:flag withByteArray:[self getUid]];
}

- (void)writeBytesWithInt:(jint)byteAddress
            withByteArray:(IOSByteArray *)data {
  [self writeBytesWithInt:byteAddress withByteArray:data withByte:[((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Cmd_)) getFlag]];
}

- (void)writeBytesWithInt:(jint)byteAddress
            withByteArray:(IOSByteArray *)data
                 withByte:(jbyte)flag {
  if (byteAddress < 0 || data == nil || (byteAddress + data->size_) > [self getMemSizeInBytes]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) writeBytesWithInt:byteAddress withByteArray:data withByte:flag withByteArray:[self getUid]];
}

- (ComStSt25sdkType5ReadBlockResult *)readBlocksWithInt:(jint)firstBlockAddress
                                                withInt:(jint)sizeInBlocks {
  if (firstBlockAddress < 0 || sizeInBlocks < 0) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) readBlocksWithInt:firstBlockAddress withInt:sizeInBlocks];
}

- (ComStSt25sdkType5ReadBlockResult *)readBlocksWithInt:(jint)firstBlockAddress
                                                withInt:(jint)sizeInBlocks
                                               withByte:(jbyte)flag {
  if (firstBlockAddress < 0 || sizeInBlocks < 0) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) readBlocksWithInt:firstBlockAddress withInt:sizeInBlocks withByte:flag withByteArray:[self getUid]];
}

- (void)writeBlocksWithInt:(jint)firstBlockAddress
             withByteArray:(IOSByteArray *)data {
  if (firstBlockAddress < 0 || data == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) writeBlocksWithInt:firstBlockAddress withByteArray:data];
}

- (void)writeBlocksWithInt:(jint)firstBlockAddress
             withByteArray:(IOSByteArray *)data
                  withByte:(jbyte)flag {
  if (firstBlockAddress < 0 || data == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) writeBlocksWithInt:firstBlockAddress withByteArray:data withByte:flag withByteArray:[self getUid]];
}

- (IOSByteArray *)readSysFile {
  return [IOSByteArray newArrayWithLength:0];
}

- (jint)getExpectedCCFileLength {
  jint memSizeInBytes = [self getMemSizeInBytes];
  if (memSizeInBytes > 2040) {
    return 8;
  }
  else {
    return 4;
  }
}

- (jint)getCCFileLength {
  return [((ComStSt25sdkType5CCFileType5 *) nil_chk(mCCFile_)) getCCLength];
}

- (IOSByteArray *)readCCFile {
  return [((ComStSt25sdkType5CCFileType5 *) nil_chk(mCCFile_)) read];
}

- (void)writeCCFile {
  [((ComStSt25sdkType5CCFileType5 *) nil_chk(mCCFile_)) write];
}

- (void)writeCCFileWithByteArray:(IOSByteArray *)buffer {
  [((ComStSt25sdkType5CCFileType5 *) nil_chk(mCCFile_)) writeWithByteArray:buffer];
}

- (jbyte)getCCMagicNumber {
  return [((ComStSt25sdkType5CCFileType5 *) nil_chk(mCCFile_)) getMagicNumber];
}

- (void)initEmptyCCFile {
  IOSByteArray *expectedCCFileData = [self getExpectedCCFileData];
  [((ComStSt25sdkType5CCFileType5 *) nil_chk(mCCFile_)) parseCCFileWithByteArray:expectedCCFileData];
}

- (IOSByteArray *)getExpectedCCFileData {
  jint memSize = [self getMemSizeInBytes];
  ComStSt25sdkType5CCFileType5 *expectedCCFile = new_ComStSt25sdkType5CCFileType5_initWithComStSt25sdkCommandType5Command_(mType5Cmd_);
  [expectedCCFile initEmptyCCFileWithInt:memSize];
  IOSByteArray *expectedCCFileData = [expectedCCFile rebuildBuffer];
  return expectedCCFileData;
}

- (jbyte)getCCMappingVersion {
  return [((ComStSt25sdkType5CCFileType5 *) nil_chk(mCCFile_)) getCCMappingVersion];
}

- (jbyte)getCCReadAccess {
  return [((ComStSt25sdkType5CCFileType5 *) nil_chk(mCCFile_)) getCCReadAccess];
}

- (jbyte)getCCWriteAccess {
  return [((ComStSt25sdkType5CCFileType5 *) nil_chk(mCCFile_)) getCCWriteAccess];
}

- (jint)getCCMemorySize {
  return [((ComStSt25sdkType5CCFileType5 *) nil_chk(mCCFile_)) getDataAreaSize];
}

- (IOSByteArray *)readSingleBlockWithInt:(jint)blockAddress {
  return [self readSingleBlockWithInt:blockAddress withByte:[((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) getFlag]];
}

- (IOSByteArray *)readSingleBlockWithInt:(jint)blockAddress
                                withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) readSingleBlockWithByte:(jbyte) blockAddress withByte:flag withByteArray:[self getUid]];
}

- (jbyte)writeSingleBlockWithInt:(jint)blockAddress
                   withByteArray:(IOSByteArray *)buffer {
  return [self writeSingleBlockWithInt:blockAddress withByteArray:buffer withByte:[((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) getFlag]];
}

- (jbyte)writeSingleBlockWithInt:(jint)blockAddress
                   withByteArray:(IOSByteArray *)buffer
                        withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) writeSingleBlockWithByte:(jbyte) blockAddress withByteArray:buffer withByte:flag withByteArray:[self getUid]];
}

- (jbyte)lockSingleBlockWithInt:(jint)blockAddress {
  return [self lockSingleBlockWithInt:blockAddress withByte:[((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) getFlag]];
}

- (jbyte)lockSingleBlockWithInt:(jint)blockAddress
                       withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) lockSingleBlockWithByte:(jbyte) blockAddress withByte:flag withByteArray:[self getUid]];
}

- (IOSByteArray *)readMultipleBlockWithInt:(jint)blockAddress
                                   withInt:(jint)numberOfBlocks {
  return [self readMultipleBlockWithInt:blockAddress withInt:numberOfBlocks withByte:[((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) getFlag]];
}

- (IOSByteArray *)readMultipleBlockWithInt:(jint)blockAddress
                                   withInt:(jint)numberOfBlocks
                                  withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (numberOfBlocks < 0 || numberOfBlocks > (jint) 0xFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) readMultipleBlockWithByte:(jbyte) blockAddress withByte:(jbyte) numberOfBlocks withByte:flag withByteArray:[self getUid]];
}

- (IOSByteArray *)extendedReadSingleBlockWithInt:(jint)blockAddress {
  return [self extendedReadSingleBlockWithInt:blockAddress withByte:[((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) getFlag]];
}

- (IOSByteArray *)extendedReadSingleBlockWithInt:(jint)blockAddress
                                        withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFFFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) extendedReadSingleBlockWithByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(blockAddress) withByte:flag withByteArray:[self getUid]];
}

- (jbyte)extendedWriteSingleBlockWithInt:(jint)blockAddress
                           withByteArray:(IOSByteArray *)buffer {
  return [self extendedWriteSingleBlockWithInt:blockAddress withByteArray:buffer withByte:[((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) getFlag]];
}

- (jbyte)extendedWriteSingleBlockWithInt:(jint)blockAddress
                           withByteArray:(IOSByteArray *)buffer
                                withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFFFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) extendedWriteSingleBlockWithByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(blockAddress) withByteArray:buffer withByte:flag withByteArray:[self getUid]];
}

- (jbyte)extendedLockSingleBlockWithInt:(jint)blockAddress {
  return [self extendedLockSingleBlockWithInt:blockAddress withByte:[((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) getFlag]];
}

- (jbyte)extendedLockSingleBlockWithInt:(jint)blockAddress
                               withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFFFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) extendedLockSingleBlockWithByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(blockAddress) withByte:flag withByteArray:[self getUid]];
}

- (IOSByteArray *)extendedReadMultipleBlockWithInt:(jint)blockAddress
                                           withInt:(jint)numberOfBlocks {
  return [self extendedReadMultipleBlockWithInt:blockAddress withInt:numberOfBlocks withByte:[((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) getFlag]];
}

- (IOSByteArray *)extendedReadMultipleBlockWithInt:(jint)blockAddress
                                           withInt:(jint)numberOfBlocks
                                          withByte:(jbyte)flag {
  if (blockAddress < 0 || blockAddress > (jint) 0xFFFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (numberOfBlocks < 0 || numberOfBlocks > (jint) 0xFFFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) extendedReadMultipleBlockWithByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(blockAddress) withByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(numberOfBlocks) withByte:flag withByteArray:[self getUid]];
}

- (jbyte)select {
  return [self selectWithByte:[((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) getFlag]];
}

- (jbyte)selectWithByte:(jbyte)flag {
  return [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) selectWithByte:flag withByteArray:[self getUid]];
}

- (jbyte)stayQuiet {
  return [self stayQuietWithByte:[((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) getFlag]];
}

- (jbyte)stayQuietWithByte:(jbyte)flag {
  return [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) stayQuietWithByte:flag withByteArray:[self getUid]];
}

- (jint)getSysFileLength {
  return 0;
}

- (jbyte)getDSFID {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
}

- (jbyte)getAFI {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
}

- (jbyte)getICRef {
  return 0;
}

- (jint)getMemSizeInBytes {
  return 0;
}

- (jint)getBlockSizeInBytes {
  return mBlockSizeInBytes_;
}

- (jint)getNumberOfBlocks {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
}

- (void)selectSysFile {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jint)getMaxReadMultipleBlocksReturned {
  return mMaxReadMultipleBlocksReturned_;
}

- (void)setMaxReadMultipleBlocksReturnedWithInt:(jint)maxReadMultipleBlocksReturned {
  mMaxReadMultipleBlocksReturned_ = maxReadMultipleBlocksReturned;
  [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Cmd_)) setTagMaxReadMultipleBlockLengthWithInt:mMaxReadMultipleBlocksReturned_];
  [((ComStSt25sdkCommandNdefType5Command *) nil_chk(mNdefCmd_)) setTagMaxReadMultipleBlockLengthWithInt:mMaxReadMultipleBlocksReturned_];
}

- (void)invalidateCache {
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) invalidateCache];
}

- (void)validateCache {
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) validateCache];
}

- (void)activateCache {
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) activateCache];
}

- (void)deactivateCache {
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) deactivateCache];
}

- (jboolean)isCacheValid {
  return [((ComStSt25sdkTagCache *) nil_chk(mCache_)) isCacheValid];
}

- (jboolean)isCacheActivated {
  return [((ComStSt25sdkTagCache *) nil_chk(mCache_)) isCacheActivated];
}

- (void)updateCache {
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) updateCache];
}

- (void)invalidateCCFileCache {
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) removeWithId:mCCFile_];
}

- (void)invalidateNdefCache {
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) removeWithId:mNdefMsg_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 7, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "LComStSt25sdkNdefNDEFMsg;", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "LComStSt25sdkNdefNDEFMsg;", 0x1, 8, 9, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 11, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 15, 4, -1, -1, -1 },
    { NULL, "LComStSt25sdkType5ReadBlockResult;", 0x1, 16, 11, 4, -1, -1, -1 },
    { NULL, "LComStSt25sdkType5ReadBlockResult;", 0x1, 16, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 14, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 15, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, 4, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 20, 21, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 20, 22, 4, -1, -1, -1 },
    { NULL, "B", 0x1, 23, 14, 4, -1, -1, -1 },
    { NULL, "B", 0x1, 23, 15, 4, -1, -1, -1 },
    { NULL, "B", 0x1, 24, 21, 4, -1, -1, -1 },
    { NULL, "B", 0x1, 24, 22, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 25, 11, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 25, 12, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 26, 21, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 26, 22, 4, -1, -1, -1 },
    { NULL, "B", 0x1, 27, 14, 4, -1, -1, -1 },
    { NULL, "B", 0x1, 27, 15, 4, -1, -1, -1 },
    { NULL, "B", 0x1, 28, 21, 4, -1, -1, -1 },
    { NULL, "B", 0x1, 28, 22, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 29, 11, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 29, 12, 4, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "B", 0x1, 30, 9, 4, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "B", 0x1, 31, 9, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[1].selector = @selector(determineBlockSizeWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[2].selector = @selector(writeNdefMessageWithComStSt25sdkNdefNDEFMsg:);
  methods[3].selector = @selector(writeNdefMessageWithComStSt25sdkNdefNDEFMsg:withByte:);
  methods[4].selector = @selector(writeNdefMessageWithComStSt25sdkNdefNDEFMsg:withBoolean:);
  methods[5].selector = @selector(writeNdefMessageWithComStSt25sdkNdefNDEFMsg:withByte:withBoolean:);
  methods[6].selector = @selector(isCCFileValid);
  methods[7].selector = @selector(readNdefMessage);
  methods[8].selector = @selector(readNdefMessageWithByte:);
  methods[9].selector = @selector(readBytesWithInt:withInt:);
  methods[10].selector = @selector(readBytesWithInt:withInt:withByte:);
  methods[11].selector = @selector(writeBytesWithInt:withByteArray:);
  methods[12].selector = @selector(writeBytesWithInt:withByteArray:withByte:);
  methods[13].selector = @selector(readBlocksWithInt:withInt:);
  methods[14].selector = @selector(readBlocksWithInt:withInt:withByte:);
  methods[15].selector = @selector(writeBlocksWithInt:withByteArray:);
  methods[16].selector = @selector(writeBlocksWithInt:withByteArray:withByte:);
  methods[17].selector = @selector(readSysFile);
  methods[18].selector = @selector(getExpectedCCFileLength);
  methods[19].selector = @selector(getCCFileLength);
  methods[20].selector = @selector(readCCFile);
  methods[21].selector = @selector(writeCCFile);
  methods[22].selector = @selector(writeCCFileWithByteArray:);
  methods[23].selector = @selector(getCCMagicNumber);
  methods[24].selector = @selector(initEmptyCCFile);
  methods[25].selector = @selector(getExpectedCCFileData);
  methods[26].selector = @selector(getCCMappingVersion);
  methods[27].selector = @selector(getCCReadAccess);
  methods[28].selector = @selector(getCCWriteAccess);
  methods[29].selector = @selector(getCCMemorySize);
  methods[30].selector = @selector(readSingleBlockWithInt:);
  methods[31].selector = @selector(readSingleBlockWithInt:withByte:);
  methods[32].selector = @selector(writeSingleBlockWithInt:withByteArray:);
  methods[33].selector = @selector(writeSingleBlockWithInt:withByteArray:withByte:);
  methods[34].selector = @selector(lockSingleBlockWithInt:);
  methods[35].selector = @selector(lockSingleBlockWithInt:withByte:);
  methods[36].selector = @selector(readMultipleBlockWithInt:withInt:);
  methods[37].selector = @selector(readMultipleBlockWithInt:withInt:withByte:);
  methods[38].selector = @selector(extendedReadSingleBlockWithInt:);
  methods[39].selector = @selector(extendedReadSingleBlockWithInt:withByte:);
  methods[40].selector = @selector(extendedWriteSingleBlockWithInt:withByteArray:);
  methods[41].selector = @selector(extendedWriteSingleBlockWithInt:withByteArray:withByte:);
  methods[42].selector = @selector(extendedLockSingleBlockWithInt:);
  methods[43].selector = @selector(extendedLockSingleBlockWithInt:withByte:);
  methods[44].selector = @selector(extendedReadMultipleBlockWithInt:withInt:);
  methods[45].selector = @selector(extendedReadMultipleBlockWithInt:withInt:withByte:);
  methods[46].selector = @selector(select);
  methods[47].selector = @selector(selectWithByte:);
  methods[48].selector = @selector(stayQuiet);
  methods[49].selector = @selector(stayQuietWithByte:);
  methods[50].selector = @selector(getSysFileLength);
  methods[51].selector = @selector(getDSFID);
  methods[52].selector = @selector(getAFI);
  methods[53].selector = @selector(getICRef);
  methods[54].selector = @selector(getMemSizeInBytes);
  methods[55].selector = @selector(getBlockSizeInBytes);
  methods[56].selector = @selector(getNumberOfBlocks);
  methods[57].selector = @selector(selectSysFile);
  methods[58].selector = @selector(getMaxReadMultipleBlocksReturned);
  methods[59].selector = @selector(setMaxReadMultipleBlocksReturnedWithInt:);
  methods[60].selector = @selector(invalidateCache);
  methods[61].selector = @selector(validateCache);
  methods[62].selector = @selector(activateCache);
  methods[63].selector = @selector(deactivateCache);
  methods[64].selector = @selector(isCacheValid);
  methods[65].selector = @selector(isCacheActivated);
  methods[66].selector = @selector(updateCache);
  methods[67].selector = @selector(invalidateCCFileCache);
  methods[68].selector = @selector(invalidateNdefCache);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mCCFile_", "LComStSt25sdkType5CCFileType5;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mType5Cmd_", "LComStSt25sdkCommandType5Command;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mIso15693Cmd_", "LComStSt25sdkCommandIso15693Command;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mNdefCmd_", "LComStSt25sdkCommandNdefType5Command;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mCache_", "LComStSt25sdkTagCache;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mMaxReadMultipleBlocksReturned_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "DEFAULT_NBR_OF_BYTES_PER_BLOCK", "I", .constantValue.asInt = ComStSt25sdkType5Type5Tag_DEFAULT_NBR_OF_BYTES_PER_BLOCK, 0x19, -1, -1, -1, -1 },
    { "mBlockSizeInBytes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[B", "determineBlockSize", "writeNdefMessage", "LComStSt25sdkNdefNDEFMsg;", "LComStSt25sdkSTException;", "LComStSt25sdkNdefNDEFMsg;B", "LComStSt25sdkNdefNDEFMsg;Z", "LComStSt25sdkNdefNDEFMsg;BZ", "readNdefMessage", "B", "readBytes", "II", "IIB", "writeBytes", "I[B", "I[BB", "readBlocks", "writeBlocks", "writeCCFile", "[B", "readSingleBlock", "I", "IB", "writeSingleBlock", "lockSingleBlock", "readMultipleBlock", "extendedReadSingleBlock", "extendedWriteSingleBlock", "extendedLockSingleBlock", "extendedReadMultipleBlock", "select", "stayQuiet", "setMaxReadMultipleBlocksReturned" };
  static const J2ObjcClassInfo _ComStSt25sdkType5Type5Tag = { "Type5Tag", "com.st.st25sdk.type5", ptrTable, methods, fields, 7, 0x1, 69, 8, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType5Type5Tag;
}

@end

void ComStSt25sdkType5Type5Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkType5Type5Tag *self, id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  ComStSt25sdkNFCTag_initWithComStSt25sdkRFReaderInterface_(self, readerInterface);
  self->mBlockSizeInBytes_ = ComStSt25sdkType5Type5Tag_DEFAULT_NBR_OF_BYTES_PER_BLOCK;
  self->mName_ = @"NFC type5 tag";
  self->mDescription_ = @"NFC type5 - ISO/IEC 15693";
  self->mUid_ = JavaUtilArrays_copyOfWithByteArray_withInt_(uid, ((IOSByteArray *) nil_chk(uid))->size_);
  ComStSt25sdkType5Type5Tag_determineBlockSizeWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  self->mType5Cmd_ = new_ComStSt25sdkCommandType5Command_initWithComStSt25sdkRFReaderInterface_withByteArray_(readerInterface, uid);
  self->mIso15693Cmd_ = new_ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_(readerInterface, uid);
  self->mCCFile_ = new_ComStSt25sdkType5CCFileType5_initWithComStSt25sdkCommandType5Command_(self->mType5Cmd_);
  self->mNdefCmd_ = new_ComStSt25sdkCommandNdefType5Command_initWithComStSt25sdkRFReaderInterface_withByteArray_(readerInterface, uid);
  self->mMaxReadMultipleBlocksReturned_ = ComStSt25sdkCommandIso15693Protocol_DEFAULT_READ_MULTIPLE_MAX_NBR_OF_BLOCKS;
  self->mCache_ = new_ComStSt25sdkTagCache_init();
  [self->mCache_ addWithId:self->mCCFile_];
}

ComStSt25sdkType5Type5Tag *new_ComStSt25sdkType5Type5Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType5Type5Tag, initWithComStSt25sdkRFReaderInterface_withByteArray_, readerInterface, uid)
}

ComStSt25sdkType5Type5Tag *create_ComStSt25sdkType5Type5Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType5Type5Tag, initWithComStSt25sdkRFReaderInterface_withByteArray_, readerInterface, uid)
}

void ComStSt25sdkType5Type5Tag_determineBlockSizeWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkType5Type5Tag *self, id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  ComStSt25sdkCommandIso15693Command *iso15693Command = new_ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_(readerInterface, uid);
  @try {
    IOSByteArray *response = [iso15693Command readSingleBlockWithByte:(jbyte) 0];
    if ((response != nil) && (((IOSByteArray *) nil_chk(response))->size_ > 1)) {
      self->mBlockSizeInBytes_ = ((IOSByteArray *) nil_chk(response))->size_ - 1;
    }
    else {
      ComStSt25sdkSTLog_eWithNSString_(@"Failed to determine the number of bytes per block!");
    }
  }
  @catch (ComStSt25sdkSTException *e) {
    ComStSt25sdkCommandVicinityCommand *vicinityCommand = new_ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(readerInterface, uid);
    IOSByteArray *response;
    @try {
      response = [vicinityCommand readSingleBlockWithByteArray:[IOSByteArray newArrayWithBytes:(jbyte[]){ 0, 0 } count:2]];
      if ((response != nil) && (((IOSByteArray *) nil_chk(response))->size_ > 1)) {
        self->mBlockSizeInBytes_ = ((IOSByteArray *) nil_chk(response))->size_ - 1;
      }
      else {
        ComStSt25sdkSTLog_eWithNSString_(@"Failed to determine the number of bytes per block!");
      }
    }
    @catch (ComStSt25sdkSTException *ex) {
      ComStSt25sdkSTLog_eWithNSString_(@"Failed to determine the number of bytes per block!");
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType5Type5Tag)
