//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type5/CCFileType5.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/command/Type5Command.h"
#include "com/st/st25sdk/type5/CCFile.h"
#include "com/st/st25sdk/type5/CCFileType5.h"
#include "com/st/st25sdk/type5/ReadBlockResult.h"
#include "java/nio/ByteBuffer.h"

@implementation ComStSt25sdkType5CCFileType5

- (instancetype)initWithComStSt25sdkCommandType5Command:(ComStSt25sdkCommandType5Command *)type5Command {
  ComStSt25sdkType5CCFileType5_initWithComStSt25sdkCommandType5Command_(self, type5Command);
  return self;
}

- (IOSByteArray *)read {
  if (!mCacheActivated_ || mCacheInvalidated_) {
    ComStSt25sdkType5ReadBlockResult *readResponse;
    IOSByteArray *buffer;
    readResponse = [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Command_)) readBlocksWithInt:(jint) 0x00 withInt:(jint) 0x01];
    buffer = ((ComStSt25sdkType5ReadBlockResult *) nil_chk(readResponse))->data_;
    if (((IOSByteArray *) nil_chk(buffer))->size_ < 4) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
    }
    if (mBlockSize_ == 0) {
      mBlockSize_ = buffer->size_;
      ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I", @"mBlockSize = ", mBlockSize_));
    }
    if (IOSByteArray_Get(buffer, 0) == ComStSt25sdkType5CCFile_CCFILE_SHORT_IDENTIFIER || IOSByteArray_Get(buffer, 0) == ComStSt25sdkType5CCFile_CCFILE_LONG_IDENTIFIER) {
      if (IOSByteArray_Get(buffer, 2) == (jint) 0x00) {
        mCCLength_ = 8;
      }
      else {
        mCCLength_ = 4;
      }
    }
    else {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE), buffer);
    }
    JavaNioByteBuffer *ccFileContent = JavaNioByteBuffer_allocateWithInt_(mCCLength_);
    (void) [((JavaNioByteBuffer *) nil_chk(ccFileContent)) putWithByteArray:buffer withInt:0 withInt:mBlockSize_];
    if (mBlockSize_ < mCCLength_) {
      readResponse = [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Command_)) readBlocksWithInt:(jint) 0x01 withInt:1];
      buffer = ((ComStSt25sdkType5ReadBlockResult *) nil_chk(readResponse))->data_;
      (void) [ccFileContent putWithByteArray:buffer withInt:0 withInt:mBlockSize_];
    }
    [self parseCCFileWithByteArray:[ccFileContent array]];
    return [ccFileContent array];
  }
  return [self rebuildBuffer];
}

- (void)write {
  [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Command_)) writeBlocksWithInt:0 withByteArray:[self rebuildBuffer]];
}

- (void)writeWithByteArray:(IOSByteArray *)buffer {
  [self parseCCFileWithByteArray:buffer];
  [((ComStSt25sdkCommandType5Command *) nil_chk(mType5Command_)) writeBlocksWithInt:(jint) 0x00 withByteArray:[self rebuildBuffer]];
}

- (jboolean)isVicinityHighDensityOverflow {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (void)setSupportMultipleBlockReadCommandWithBoolean:(jboolean)supportMultipleBlockReadCommand {
  self->mSupportMultipleBlockReadCommand_ = supportMultipleBlockReadCommand;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkCommandType5Command:);
  methods[1].selector = @selector(read);
  methods[2].selector = @selector(write);
  methods[3].selector = @selector(writeWithByteArray:);
  methods[4].selector = @selector(isVicinityHighDensityOverflow);
  methods[5].selector = @selector(setSupportMultipleBlockReadCommandWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mType5Command_", "LComStSt25sdkCommandType5Command;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkCommandType5Command;", "LComStSt25sdkSTException;", "write", "[B", "setSupportMultipleBlockReadCommand", "Z" };
  static const J2ObjcClassInfo _ComStSt25sdkType5CCFileType5 = { "CCFileType5", "com.st.st25sdk.type5", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType5CCFileType5;
}

@end

void ComStSt25sdkType5CCFileType5_initWithComStSt25sdkCommandType5Command_(ComStSt25sdkType5CCFileType5 *self, ComStSt25sdkCommandType5Command *type5Command) {
  ComStSt25sdkType5CCFile_init(self);
  self->mType5Command_ = type5Command;
}

ComStSt25sdkType5CCFileType5 *new_ComStSt25sdkType5CCFileType5_initWithComStSt25sdkCommandType5Command_(ComStSt25sdkCommandType5Command *type5Command) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType5CCFileType5, initWithComStSt25sdkCommandType5Command_, type5Command)
}

ComStSt25sdkType5CCFileType5 *create_ComStSt25sdkType5CCFileType5_initWithComStSt25sdkCommandType5Command_(ComStSt25sdkCommandType5Command *type5Command) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType5CCFileType5, initWithComStSt25sdkCommandType5Command_, type5Command)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType5CCFileType5)
