//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type5/CCFileVicinity.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/command/VicinityMemoryCommand.h"
#include "com/st/st25sdk/type5/CCFile.h"
#include "com/st/st25sdk/type5/CCFileVicinity.h"
#include "com/st/st25sdk/type5/ReadBlockResult.h"
#include "java/nio/ByteBuffer.h"

@interface ComStSt25sdkType5CCFileVicinity () {
 @public
  jboolean mUseCCFileOn4Bytes_;
}

@end

@implementation ComStSt25sdkType5CCFileVicinity

- (instancetype)initWithComStSt25sdkCommandVicinityMemoryCommand:(ComStSt25sdkCommandVicinityMemoryCommand *)vicinityCommand {
  ComStSt25sdkType5CCFileVicinity_initWithComStSt25sdkCommandVicinityMemoryCommand_(self, vicinityCommand);
  return self;
}

- (IOSByteArray *)read {
  if (!mCacheActivated_ || mCacheInvalidated_) {
    ComStSt25sdkType5ReadBlockResult *readResponse;
    IOSByteArray *buffer;
    readResponse = [((ComStSt25sdkCommandVicinityMemoryCommand *) nil_chk(mVicinityCommand_)) readBlocksWithInt:(jint) 0x00 withInt:(jint) 0x01];
    buffer = ((ComStSt25sdkType5ReadBlockResult *) nil_chk(readResponse))->data_;
    if (((IOSByteArray *) nil_chk(buffer))->size_ < 4) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
    }
    if (mBlockSize_ == 0) {
      mBlockSize_ = buffer->size_;
      ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I", @"mBlockSize = ", mBlockSize_));
    }
    if (IOSByteArray_Get(buffer, 0) == ComStSt25sdkType5CCFile_CCFILE_SHORT_IDENTIFIER || IOSByteArray_Get(buffer, 0) == ComStSt25sdkType5CCFile_CCFILE_LONG_IDENTIFIER) {
      if (IOSByteArray_Get(buffer, 2) == (jint) 0x00) {
        mCCLength_ = 8;
      }
      else {
        mCCLength_ = 4;
      }
    }
    else {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE), buffer);
    }
    JavaNioByteBuffer *ccFileContent = JavaNioByteBuffer_allocateWithInt_(mCCLength_);
    (void) [((JavaNioByteBuffer *) nil_chk(ccFileContent)) putWithByteArray:buffer withInt:0 withInt:mBlockSize_];
    if (mBlockSize_ < mCCLength_) {
      readResponse = [((ComStSt25sdkCommandVicinityMemoryCommand *) nil_chk(mVicinityCommand_)) readBlocksWithInt:(jint) 0x01 withInt:1];
      buffer = ((ComStSt25sdkType5ReadBlockResult *) nil_chk(readResponse))->data_;
      (void) [ccFileContent putWithByteArray:buffer withInt:0 withInt:mBlockSize_];
    }
    [self parseCCFileWithByteArray:[ccFileContent array]];
    return [ccFileContent array];
  }
  return [self rebuildBuffer];
}

- (void)write {
  [((ComStSt25sdkCommandVicinityMemoryCommand *) nil_chk(mVicinityCommand_)) writeBlocksWithInt:(jint) 0x00 withByteArray:[self rebuildBuffer]];
}

- (void)writeWithByteArray:(IOSByteArray *)buffer {
  [self parseCCFileWithByteArray:buffer];
  [((ComStSt25sdkCommandVicinityMemoryCommand *) nil_chk(mVicinityCommand_)) writeBlocksWithInt:(jint) 0x00 withByteArray:[self rebuildBuffer]];
}

- (jboolean)isSpecialFrameCommandSupported {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (void)initEmptyCCFileWithInt:(jint)memSizeInBytes {
  if (mUseCCFileOn4Bytes_) {
    mCCLength_ = 4;
    mMagicNumber_ = ComStSt25sdkType5CCFile_CCFILE_SHORT_IDENTIFIER;
    mMappingVersion_ = (jbyte) (jint) 0x40;
    mReadAccess_ = (jint) 0x00;
    mWriteAccess_ = (jint) 0x00;
    mDataAreaSize_ = (jint) 0xFF * ComStSt25sdkType5CCFile_CCFILE_DATA_AREA_SIZE_MULTIPLIER;
    mSupport2ByteAddressMode_ = false;
    mSupportMultipleBlockReadCommand_ = true;
    mSupportLockBlockCommand_ = false;
    mSupportSpecialFrameCommand_ = false;
    mVicinityHighDensityOverflow_ = true;
  }
  else {
    mCCLength_ = 8;
    mMagicNumber_ = ComStSt25sdkType5CCFile_CCFILE_LONG_IDENTIFIER;
    mMappingVersion_ = (jbyte) (jint) 0x40;
    mReadAccess_ = (jint) 0x00;
    mWriteAccess_ = (jint) 0x00;
    mDataAreaSize_ = memSizeInBytes;
    mSupport2ByteAddressMode_ = true;
    mSupportMultipleBlockReadCommand_ = true;
    mSupportLockBlockCommand_ = false;
    mSupportSpecialFrameCommand_ = false;
    mVicinityHighDensityOverflow_ = true;
  }
}

- (jboolean)getUseCCFileOn4Bytes {
  return mUseCCFileOn4Bytes_;
}

- (void)setUseCCFileOn4BytesWithBoolean:(jboolean)useCCFileOn4Bytes {
  self->mUseCCFileOn4Bytes_ = useCCFileOn4Bytes;
}

- (void)setSupportMultipleBlockReadCommandWithBoolean:(jboolean)supportMultipleBlockReadCommand {
  self->mSupportMultipleBlockReadCommand_ = supportMultipleBlockReadCommand;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkCommandVicinityMemoryCommand:);
  methods[1].selector = @selector(read);
  methods[2].selector = @selector(write);
  methods[3].selector = @selector(writeWithByteArray:);
  methods[4].selector = @selector(isSpecialFrameCommandSupported);
  methods[5].selector = @selector(initEmptyCCFileWithInt:);
  methods[6].selector = @selector(getUseCCFileOn4Bytes);
  methods[7].selector = @selector(setUseCCFileOn4BytesWithBoolean:);
  methods[8].selector = @selector(setSupportMultipleBlockReadCommandWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mVicinityCommand_", "LComStSt25sdkCommandVicinityMemoryCommand;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mUseCCFileOn4Bytes_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkCommandVicinityMemoryCommand;", "LComStSt25sdkSTException;", "write", "[B", "initEmptyCCFile", "I", "setUseCCFileOn4Bytes", "Z", "setSupportMultipleBlockReadCommand" };
  static const J2ObjcClassInfo _ComStSt25sdkType5CCFileVicinity = { "CCFileVicinity", "com.st.st25sdk.type5", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType5CCFileVicinity;
}

@end

void ComStSt25sdkType5CCFileVicinity_initWithComStSt25sdkCommandVicinityMemoryCommand_(ComStSt25sdkType5CCFileVicinity *self, ComStSt25sdkCommandVicinityMemoryCommand *vicinityCommand) {
  ComStSt25sdkType5CCFile_init(self);
  self->mUseCCFileOn4Bytes_ = true;
  self->mVicinityCommand_ = vicinityCommand;
}

ComStSt25sdkType5CCFileVicinity *new_ComStSt25sdkType5CCFileVicinity_initWithComStSt25sdkCommandVicinityMemoryCommand_(ComStSt25sdkCommandVicinityMemoryCommand *vicinityCommand) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType5CCFileVicinity, initWithComStSt25sdkCommandVicinityMemoryCommand_, vicinityCommand)
}

ComStSt25sdkType5CCFileVicinity *create_ComStSt25sdkType5CCFileVicinity_initWithComStSt25sdkCommandVicinityMemoryCommand_(ComStSt25sdkCommandVicinityMemoryCommand *vicinityCommand) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType5CCFileVicinity, initWithComStSt25sdkCommandVicinityMemoryCommand_, vicinityCommand)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType5CCFileVicinity)
