//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/Crc.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Crc.h"
#include "com/st/st25sdk/CrcModel.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/STLog.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/Arrays.h"

@interface ComStSt25sdkCrc ()

+ (jlong)BITMASKWithInt:(jint)x;

+ (jlong)reflectWithLong:(jlong)v
                 withInt:(jint)b;

+ (jlong)widmaskWithComStSt25sdkCrcModel:(ComStSt25sdkCrcModel *)cm;

+ (void)cmInitWithComStSt25sdkCrcModel:(ComStSt25sdkCrcModel *)pCm;

+ (void)cmNextWithComStSt25sdkCrcModel:(ComStSt25sdkCrcModel *)cm
                               withInt:(jint)ch;

+ (jlong)cmCrcWithComStSt25sdkCrcModel:(ComStSt25sdkCrcModel *)cm;

+ (jint)uiReverseByteWithInt:(jint)value;

@end

__attribute__((unused)) static jlong ComStSt25sdkCrc_BITMASKWithInt_(jint x);

__attribute__((unused)) static jlong ComStSt25sdkCrc_reflectWithLong_withInt_(jlong v, jint b);

__attribute__((unused)) static jlong ComStSt25sdkCrc_widmaskWithComStSt25sdkCrcModel_(ComStSt25sdkCrcModel *cm);

__attribute__((unused)) static void ComStSt25sdkCrc_cmInitWithComStSt25sdkCrcModel_(ComStSt25sdkCrcModel *pCm);

__attribute__((unused)) static void ComStSt25sdkCrc_cmNextWithComStSt25sdkCrcModel_withInt_(ComStSt25sdkCrcModel *cm, jint ch);

__attribute__((unused)) static jlong ComStSt25sdkCrc_cmCrcWithComStSt25sdkCrcModel_(ComStSt25sdkCrcModel *cm);

__attribute__((unused)) static jint ComStSt25sdkCrc_uiReverseByteWithInt_(jint value);

@implementation ComStSt25sdkCrc

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComStSt25sdkCrc_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jlong)BITMASKWithInt:(jint)x {
  return ComStSt25sdkCrc_BITMASKWithInt_(x);
}

+ (IOSByteArray *)computeCrcWithByteArray:(IOSByteArray *)data {
  return ComStSt25sdkCrc_computeCrcWithByteArray_(data);
}

+ (jlong)reflectWithLong:(jlong)v
                 withInt:(jint)b {
  return ComStSt25sdkCrc_reflectWithLong_withInt_(v, b);
}

+ (jlong)widmaskWithComStSt25sdkCrcModel:(ComStSt25sdkCrcModel *)cm {
  return ComStSt25sdkCrc_widmaskWithComStSt25sdkCrcModel_(cm);
}

+ (void)cmInitWithComStSt25sdkCrcModel:(ComStSt25sdkCrcModel *)pCm {
  ComStSt25sdkCrc_cmInitWithComStSt25sdkCrcModel_(pCm);
}

+ (void)cmNextWithComStSt25sdkCrcModel:(ComStSt25sdkCrcModel *)cm
                               withInt:(jint)ch {
  ComStSt25sdkCrc_cmNextWithComStSt25sdkCrcModel_withInt_(cm, ch);
}

+ (jlong)cmCrcWithComStSt25sdkCrcModel:(ComStSt25sdkCrcModel *)cm {
  return ComStSt25sdkCrc_cmCrcWithComStSt25sdkCrcModel_(cm);
}

+ (jlong)cmTabWithComStSt25sdkCrcModel:(ComStSt25sdkCrcModel *)cm
                               withInt:(jint)index {
  return ComStSt25sdkCrc_cmTabWithComStSt25sdkCrcModel_withInt_(cm, index);
}

+ (jlong)CRCWithJavaIoFile:(JavaIoFile *)file {
  return ComStSt25sdkCrc_CRCWithJavaIoFile_(file);
}

+ (jlong)CRCWithByteArray:(IOSByteArray *)data {
  return ComStSt25sdkCrc_CRCWithByteArray_(data);
}

+ (jint)crc16LsbFirstWithByteArray:(IOSByteArray *)data
                           withInt:(jint)dataLengthToProceed {
  return ComStSt25sdkCrc_crc16LsbFirstWithByteArray_withInt_(data, dataLengthToProceed);
}

+ (jint)computeCrcIso15693WithByteArray:(IOSByteArray *)data {
  return ComStSt25sdkCrc_computeCrcIso15693WithByteArray_(data);
}

+ (jint)computeCrcIso14443BWithByteArray:(IOSByteArray *)data {
  return ComStSt25sdkCrc_computeCrcIso14443BWithByteArray_(data);
}

+ (jint)computeCrcIso14443AWithByteArray:(IOSByteArray *)data {
  return ComStSt25sdkCrc_computeCrcIso14443AWithByteArray_(data);
}

+ (jint)computeCrcPicopassWithByteArray:(IOSByteArray *)data {
  return ComStSt25sdkCrc_computeCrcPicopassWithByteArray_(data);
}

+ (jint)uiReverseByteWithInt:(jint)value {
  return ComStSt25sdkCrc_uiReverseByteWithInt_(value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 2, 3, 4, -1, -1, -1 },
    { NULL, "J", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 12, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x8, 13, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 14, 15, 16, -1, -1, -1 },
    { NULL, "J", 0x9, 14, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 19, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 20, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 21, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 22, 3, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 23, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(BITMASKWithInt:);
  methods[2].selector = @selector(computeCrcWithByteArray:);
  methods[3].selector = @selector(reflectWithLong:withInt:);
  methods[4].selector = @selector(widmaskWithComStSt25sdkCrcModel:);
  methods[5].selector = @selector(cmInitWithComStSt25sdkCrcModel:);
  methods[6].selector = @selector(cmNextWithComStSt25sdkCrcModel:withInt:);
  methods[7].selector = @selector(cmCrcWithComStSt25sdkCrcModel:);
  methods[8].selector = @selector(cmTabWithComStSt25sdkCrcModel:withInt:);
  methods[9].selector = @selector(CRCWithJavaIoFile:);
  methods[10].selector = @selector(CRCWithByteArray:);
  methods[11].selector = @selector(crc16LsbFirstWithByteArray:withInt:);
  methods[12].selector = @selector(computeCrcIso15693WithByteArray:);
  methods[13].selector = @selector(computeCrcIso14443BWithByteArray:);
  methods[14].selector = @selector(computeCrcIso14443AWithByteArray:);
  methods[15].selector = @selector(computeCrcPicopassWithByteArray:);
  methods[16].selector = @selector(uiReverseByteWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "BITMASK", "I", "computeCrc", "[B", "LJavaIoIOException;LComStSt25sdkSTException;", "reflect", "JI", "widmask", "LComStSt25sdkCrcModel;", "cmInit", "cmNext", "LComStSt25sdkCrcModel;I", "cmCrc", "cmTab", "CRC", "LJavaIoFile;", "LJavaIoIOException;", "crc16LsbFirst", "[BI", "computeCrcIso15693", "computeCrcIso14443B", "computeCrcIso14443A", "computeCrcPicopass", "uiReverseByte" };
  static const J2ObjcClassInfo _ComStSt25sdkCrc = { "Crc", "com.st.st25sdk", ptrTable, methods, NULL, 7, 0x1, 17, 0, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkCrc;
}

@end

void ComStSt25sdkCrc_init(ComStSt25sdkCrc *self) {
  NSObject_init(self);
}

ComStSt25sdkCrc *new_ComStSt25sdkCrc_init() {
  J2OBJC_NEW_IMPL(ComStSt25sdkCrc, init)
}

ComStSt25sdkCrc *create_ComStSt25sdkCrc_init() {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCrc, init)
}

jlong ComStSt25sdkCrc_BITMASKWithInt_(jint x) {
  ComStSt25sdkCrc_initialize();
  return JreLShift64(1LL, (x));
}

IOSByteArray *ComStSt25sdkCrc_computeCrcWithByteArray_(IOSByteArray *data) {
  ComStSt25sdkCrc_initialize();
  jlong crcValue;
  IOSByteArray *crc = [IOSByteArray newArrayWithLength:4];
  if ((((IOSByteArray *) nil_chk(data))->size_ % 4) != 0) {
    jint newDataLength = ComStSt25sdkHelper_divisionRoundedUpWithInt_withInt_(data->size_, 4) * 4;
    IOSByteArray *newData = [IOSByteArray newArrayWithLength:newDataLength];
    JavaUtilArrays_fillWithByteArray_withByte_(newData, (jbyte) 0);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, newData, 0, data->size_);
    crcValue = ComStSt25sdkCrc_CRCWithByteArray_(newData);
  }
  else {
    crcValue = ComStSt25sdkCrc_CRCWithByteArray_(data);
  }
  *IOSByteArray_GetRef(crc, 0) = (jbyte) (JreRShift64((crcValue & (jint) 0xFF000000), 24));
  *IOSByteArray_GetRef(crc, 1) = (jbyte) (JreRShift64((crcValue & (jint) 0x00FF0000), 16));
  *IOSByteArray_GetRef(crc, 2) = (jbyte) (JreRShift64((crcValue & (jint) 0x0000FF00), 8));
  *IOSByteArray_GetRef(crc, 3) = (jbyte) ((crcValue & (jint) 0x000000FF));
  return crc;
}

jlong ComStSt25sdkCrc_reflectWithLong_withInt_(jlong v, jint b) {
  ComStSt25sdkCrc_initialize();
  jint i;
  jlong t = v;
  for (i = 0; i < b; i++) {
    if ((t & 1LL) != 0) {
      v |= ComStSt25sdkCrc_BITMASKWithInt_((b - 1) - i);
    }
    else {
      v &= ~ComStSt25sdkCrc_BITMASKWithInt_((b - 1) - i);
    }
    JreRShiftAssignLong(&t, 1);
  }
  return v;
}

jlong ComStSt25sdkCrc_widmaskWithComStSt25sdkCrcModel_(ComStSt25sdkCrcModel *cm) {
  ComStSt25sdkCrc_initialize();
  return (JreLShift64(((JreLShift64(1LL, (((ComStSt25sdkCrcModel *) nil_chk(cm))->width_ - 1))) - 1LL), 1)) | 1LL;
}

void ComStSt25sdkCrc_cmInitWithComStSt25sdkCrcModel_(ComStSt25sdkCrcModel *pCm) {
  ComStSt25sdkCrc_initialize();
  ((ComStSt25sdkCrcModel *) nil_chk(pCm))->reg_ = pCm->init__;
}

void ComStSt25sdkCrc_cmNextWithComStSt25sdkCrcModel_withInt_(ComStSt25sdkCrcModel *cm, jint ch) {
  ComStSt25sdkCrc_initialize();
  jint i;
  jlong uch = ch;
  jlong topbit = ComStSt25sdkCrc_BITMASKWithInt_(((ComStSt25sdkCrcModel *) nil_chk(cm))->width_ - 1);
  if (cm->refin_) {
    uch = ComStSt25sdkCrc_reflectWithLong_withInt_(uch, 8);
  }
  cm->reg_ ^= (JreLShift64(uch, (cm->width_ - 8)));
  for (i = 0; i < 8; i++) {
    if ((cm->reg_ & topbit) != 0) {
      cm->reg_ = (JreLShift64(cm->reg_, 1)) ^ cm->poly_;
    }
    else {
      JreLShiftAssignLong(&cm->reg_, 1);
    }
    cm->reg_ &= ComStSt25sdkCrc_widmaskWithComStSt25sdkCrcModel_(cm);
  }
}

jlong ComStSt25sdkCrc_cmCrcWithComStSt25sdkCrcModel_(ComStSt25sdkCrcModel *cm) {
  ComStSt25sdkCrc_initialize();
  if (((ComStSt25sdkCrcModel *) nil_chk(cm))->refot_) {
    return cm->xorot_ ^ ComStSt25sdkCrc_reflectWithLong_withInt_(cm->reg_, cm->width_);
  }
  return cm->xorot_ ^ cm->reg_;
}

jlong ComStSt25sdkCrc_cmTabWithComStSt25sdkCrcModel_withInt_(ComStSt25sdkCrcModel *cm, jint index) {
  ComStSt25sdkCrc_initialize();
  jint i;
  jlong r;
  jlong topbit = ComStSt25sdkCrc_BITMASKWithInt_(((ComStSt25sdkCrcModel *) nil_chk(cm))->width_ - 1);
  jlong inbyte = index;
  if (cm->refin_) {
    inbyte = ComStSt25sdkCrc_reflectWithLong_withInt_(inbyte, 8);
  }
  r = JreLShift64(inbyte, (cm->width_ - 8));
  for (i = 0; i < 8; i++) {
    if ((r & topbit) != 0) {
      r = (JreLShift64(r, 1)) ^ cm->poly_;
    }
    else {
      JreLShiftAssignLong(&r, 1);
    }
  }
  if (cm->refin_) {
    r = ComStSt25sdkCrc_reflectWithLong_withInt_(r, cm->width_);
  }
  return r & ComStSt25sdkCrc_widmaskWithComStSt25sdkCrcModel_(cm);
}

jlong ComStSt25sdkCrc_CRCWithJavaIoFile_(JavaIoFile *file) {
  ComStSt25sdkCrc_initialize();
  ComStSt25sdkCrcModel *crcModel = new_ComStSt25sdkCrcModel_init();
  jint wordToDo = 0;
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:4];
  jchar byteToDo;
  jint i;
  jint nbread;
  crcModel->width_ = 32;
  crcModel->poly_ = (jint) 0x04C11DB7;
  crcModel->init__ = (jint) 0xFFFFFFFF;
  crcModel->refin_ = false;
  crcModel->refot_ = false;
  crcModel->xorot_ = (jint) 0x00000000;
  ComStSt25sdkCrc_cmInitWithComStSt25sdkCrcModel_(crcModel);
  {
    JavaIoInputStream *in = new_JavaIoFileInputStream_initWithJavaIoFile_(file);
    JavaLangThrowable *__primaryException1 = nil;
    @try {
      while ((nbread = [in readWithByteArray:buffer withInt:0 withInt:4]) != -1) {
        for (jint k = 0; k < buffer->size_; k++) {
          wordToDo += JreLShift64((IOSByteArray_Get(buffer, k) & (jlong) 0xffLL), (8 * k));
        }
        if (nbread > 0) {
          for (i = 0; i < 4; i++) {
            if (!crcModel->refin_) {
              byteToDo = (jchar) (JreURShift32((wordToDo & (jint) 0xFF000000), 24));
              JreLShiftAssignInt(&wordToDo, 8);
            }
            else {
              byteToDo = (jchar) (wordToDo & (jint) 0x000000FF);
              JreRShiftAssignInt(&wordToDo, 8);
            }
            ComStSt25sdkCrc_cmNextWithComStSt25sdkCrcModel_withInt_(crcModel, byteToDo);
          }
        }
      }
      return ComStSt25sdkCrc_cmCrcWithComStSt25sdkCrcModel_(crcModel);
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (in != nil) {
        if (__primaryException1 != nil) {
          @try {
            [in close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [in close];
        }
      }
    }
  }
}

jlong ComStSt25sdkCrc_CRCWithByteArray_(IOSByteArray *data) {
  ComStSt25sdkCrc_initialize();
  ComStSt25sdkCrcModel *crcModel = new_ComStSt25sdkCrcModel_init();
  jint wordToDo = 0;
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:4];
  jchar byteToDo;
  jint i;
  crcModel->width_ = 32;
  crcModel->poly_ = (jint) 0x04C11DB7;
  crcModel->init__ = (jint) 0xFFFFFFFF;
  crcModel->refin_ = false;
  crcModel->refot_ = false;
  crcModel->xorot_ = (jint) 0x00000000;
  ComStSt25sdkCrc_cmInitWithComStSt25sdkCrcModel_(crcModel);
  for (jint l = 0; l < ((IOSByteArray *) nil_chk(data))->size_; l += 4) {
    JavaUtilArrays_fillWithByteArray_withByte_(buffer, (jbyte) (jint) 0x00);
    for (i = l; ((i < (data->size_)) && (i < (l + 4))); i++) {
      *IOSByteArray_GetRef(buffer, i - l) = IOSByteArray_Get(data, i);
    }
    for (jint k = 0; k < buffer->size_; k++) {
      wordToDo += JreLShift64((IOSByteArray_Get(buffer, k) & (jlong) 0xffLL), (8 * k));
    }
    for (i = 0; ((i < 4) && ((i + l) < data->size_)); i++) {
      if (!crcModel->refin_) {
        byteToDo = (jchar) (JreURShift32((wordToDo & (jint) 0xFF000000), 24));
        JreLShiftAssignInt(&wordToDo, 8);
      }
      else {
        byteToDo = (jchar) (wordToDo & (jint) 0x000000FF);
        JreRShiftAssignInt(&wordToDo, 8);
      }
      ComStSt25sdkCrc_cmNextWithComStSt25sdkCrcModel_withInt_(crcModel, byteToDo);
    }
  }
  return ComStSt25sdkCrc_cmCrcWithComStSt25sdkCrcModel_(crcModel);
}

jint ComStSt25sdkCrc_crc16LsbFirstWithByteArray_withInt_(IOSByteArray *data, jint dataLengthToProceed) {
  ComStSt25sdkCrc_initialize();
  jint POLYNOMIAL = (jint) 0x8408;
  jint PRESET_VALUE = (jint) 0xFFFF;
  if (dataLengthToProceed > ((IOSByteArray *) nil_chk(data))->size_) {
    ComStSt25sdkSTLog_eWithNSString_(@"Error during CRC16 calculation!");
    return 0;
  }
  jint crc = PRESET_VALUE;
  for (jint i = 0; i < dataLengthToProceed; i++) {
    crc ^= (IOSByteArray_Get(data, i) & (jint) 0xFF);
    for (jint j = 0; j < 8; j++) {
      if ((crc & (jint) 0x0001) != 0) {
        crc = (JreURShift32(crc, 1)) ^ POLYNOMIAL;
      }
      else {
        crc = (JreURShift32(crc, 1));
      }
    }
  }
  crc = ~crc;
  return crc & (jint) 0xFFFF;
}

jint ComStSt25sdkCrc_computeCrcIso15693WithByteArray_(IOSByteArray *data) {
  ComStSt25sdkCrc_initialize();
  jbyte temp0 = (jbyte) (jint) 0xFF;
  jbyte temp1 = (jbyte) (jint) 0xFF;
  jint dum = 0;
  jbyte inv = 0;
  jbyte ch = 0;
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(data))->size_; i++) {
    dum = IOSByteArray_Get(data, i);
    inv = (jbyte) (ComStSt25sdkCrc_uiReverseByteWithInt_(dum) & (jint) 0xFF);
    ch = temp1;
    temp1 = (jbyte) (inv ^ temp0);
    temp0 = ch;
    temp1 = (jbyte) (temp1 ^ ((JreRShift32(temp1, 4)) & (jint) 0x0F));
    temp0 = (jbyte) (temp0 ^ ((JreLShift32(temp1, 4)) & (jint) 0xF0));
    temp0 = (jbyte) (temp0 ^ ((JreRShift32(temp1, 3)) & (jint) 0x1F));
    temp1 = (jbyte) (temp1 ^ ((JreLShift32(temp1, 5)) & (jint) 0xF8));
  }
  temp0 = (jbyte) (ComStSt25sdkCrc_uiReverseByteWithInt_(temp0) & (jint) 0xFF);
  temp1 = (jbyte) (ComStSt25sdkCrc_uiReverseByteWithInt_(temp1) & (jint) 0xFF);
  return ((JreLShift32(~temp0, 8)) & (jint) 0xFF00) | (~temp1 & (jint) 0xFF);
}

jint ComStSt25sdkCrc_computeCrcIso14443BWithByteArray_(IOSByteArray *data) {
  ComStSt25sdkCrc_initialize();
  return ComStSt25sdkCrc_computeCrcIso15693WithByteArray_(data);
}

jint ComStSt25sdkCrc_computeCrcIso14443AWithByteArray_(IOSByteArray *data) {
  ComStSt25sdkCrc_initialize();
  jbyte temp0 = (jbyte) (jint) 0xC6;
  jbyte temp1 = (jbyte) (jint) 0xC6;
  jint dum = 0;
  jbyte inv = 0;
  jbyte ch = 0;
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(data))->size_; i++) {
    dum = IOSByteArray_Get(data, i);
    inv = (jbyte) (ComStSt25sdkCrc_uiReverseByteWithInt_(dum) & (jint) 0xFF);
    ch = temp1;
    temp1 = (jbyte) (inv ^ temp0);
    temp0 = ch;
    temp1 = (jbyte) (temp1 ^ ((JreRShift32(temp1, 4)) & (jint) 0x0F));
    temp0 = (jbyte) (temp0 ^ ((JreLShift32(temp1, 4)) & (jint) 0xF0));
    temp0 = (jbyte) (temp0 ^ ((JreRShift32(temp1, 3)) & (jint) 0x1F));
    temp1 = (jbyte) (temp1 ^ ((JreLShift32(temp1, 5)) & (jint) 0xF8));
  }
  temp0 = (jbyte) (ComStSt25sdkCrc_uiReverseByteWithInt_(temp0) & (jint) 0xFF);
  temp1 = (jbyte) (ComStSt25sdkCrc_uiReverseByteWithInt_(temp1) & (jint) 0xFF);
  return ((JreLShift32(temp0, 8)) & (jint) 0xFF00) | (temp1 & (jint) 0xFF);
}

jint ComStSt25sdkCrc_computeCrcPicopassWithByteArray_(IOSByteArray *data) {
  ComStSt25sdkCrc_initialize();
  jbyte temp0 = (jbyte) (jint) 0x48;
  jbyte temp1 = (jbyte) (jint) 0x07;
  jint dum = 0;
  jbyte inv = 0;
  jbyte ch = 0;
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(data))->size_; i++) {
    dum = IOSByteArray_Get(data, i);
    inv = (jbyte) (ComStSt25sdkCrc_uiReverseByteWithInt_(dum) & (jint) 0xFF);
    ch = temp1;
    temp1 = (jbyte) (inv ^ temp0);
    temp0 = ch;
    temp1 = (jbyte) (temp1 ^ ((JreRShift32(temp1, 4)) & (jint) 0x0F));
    temp0 = (jbyte) (temp0 ^ ((JreLShift32(temp1, 4)) & (jint) 0xF0));
    temp0 = (jbyte) (temp0 ^ ((JreRShift32(temp1, 3)) & (jint) 0x1F));
    temp1 = (jbyte) (temp1 ^ ((JreLShift32(temp1, 5)) & (jint) 0xF8));
  }
  temp0 = (jbyte) (ComStSt25sdkCrc_uiReverseByteWithInt_(temp0) & (jint) 0xFF);
  temp1 = (jbyte) (ComStSt25sdkCrc_uiReverseByteWithInt_(temp1) & (jint) 0xFF);
  return ((JreLShift32(temp0, 8)) & (jint) 0xFF00) | (temp1 & (jint) 0xFF);
}

jint ComStSt25sdkCrc_uiReverseByteWithInt_(jint value) {
  ComStSt25sdkCrc_initialize();
  jint bBit = 0;
  jint iNew = (value & (jint) 0xFF);
  for (jint i = 0; i < 8; i++) {
    bBit = bBit * 2;
    bBit = bBit | (iNew & (jint) 0x01);
    iNew = JreRShift32(iNew, 1);
  }
  return bBit;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkCrc)
