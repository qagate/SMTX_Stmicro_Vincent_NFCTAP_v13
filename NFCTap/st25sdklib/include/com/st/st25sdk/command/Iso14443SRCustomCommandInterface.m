//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/command/Iso14443SRCustomCommandInterface.java
//

#include "J2ObjC_source.h"
#include "com/st/st25sdk/command/Iso14443SRCustomCommandInterface.h"

@interface ComStSt25sdkCommandIso14443SRCustomCommandInterface : NSObject

@end

@implementation ComStSt25sdkCommandIso14443SRCustomCommandInterface

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "B", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "B", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "B", 0x401, 1, 2, 0, -1, -1, -1 },
    { NULL, "B", 0x401, 3, 2, 0, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "[B", 0x401, 4, 2, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 6, 0, -1, -1, -1 },
    { NULL, "[B", 0x401, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initiate);
  methods[1].selector = @selector(pCall16);
  methods[2].selector = @selector(slotMarkerWithByte:);
  methods[3].selector = @selector(selectWithByte:);
  methods[4].selector = @selector(completion);
  methods[5].selector = @selector(resetToInventory);
  methods[6].selector = @selector(readBlockWithByte:);
  methods[7].selector = @selector(writeBlockWithByte:withByteArray:);
  methods[8].selector = @selector(getUid);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComStSt25sdkSTException;", "slotMarker", "B", "select", "readBlock", "writeBlock", "B[B" };
  static const J2ObjcClassInfo _ComStSt25sdkCommandIso14443SRCustomCommandInterface = { "Iso14443SRCustomCommandInterface", "com.st.st25sdk.command", ptrTable, methods, NULL, 7, 0x609, 9, 0, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkCommandIso14443SRCustomCommandInterface;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandIso14443SRCustomCommandInterface)
