//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/command/Type5MemoryCommand.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/command/Iso15693Command.h"
#include "com/st/st25sdk/command/Iso15693Protocol.h"
#include "com/st/st25sdk/command/Type5MemoryCommand.h"
#include "com/st/st25sdk/type5/ReadBlockResult.h"
#include "com/st/st25sdk/type5/Type5Tag.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"

@interface ComStSt25sdkCommandType5MemoryCommand () {
 @public
  ComStSt25sdkCommandIso15693Command *mIso15693Command_;
  jint mTagMaxReadMultipleBlockLength_;
  ComStSt25sdkCommandType5MemoryCommand_CommandSupport *isReadMultipleBlockSupported_;
  ComStSt25sdkCommandType5MemoryCommand_CommandSupport *isWriteMultipleBlockSupported_;
  jint mWriteMultipleBlocksMaxLength_;
  JavaIoByteArrayOutputStream *mByteArrayOutputStream_;
}

- (void)appendDataToByteArrayOutputStreamWithByteArray:(IOSByteArray *)data
                                               withInt:(jint)offset
                                               withInt:(jint)length;

- (void)raiseExceptionWithIncompleteDataWithComStSt25sdkSTException_STExceptionCode:(ComStSt25sdkSTException_STExceptionCode *)errorCode;

- (jint)getReadMultipleBlockMaxLengthInBlocksWithInt:(jint)blockSize;

- (void)readSingleBlocksWithInt:(jint)blockOffset
                        withInt:(jint)nbrOfBlocks
                       withByte:(jbyte)flag
                  withByteArray:(IOSByteArray *)uid;

- (void)writeSingleBlocksWithInt:(jint)blockOffset
                         withInt:(jint)nbrOfBlocks
                   withByteArray:(IOSByteArray *)buffer
                        withByte:(jbyte)flag
                   withByteArray:(IOSByteArray *)uid;

- (IOSByteArray *)readMultipleBlockWithInt:(jint)blockOffset
                                   withInt:(jint)nbrOfBlocks
                                  withByte:(jbyte)flag
                             withByteArray:(IOSByteArray *)uid;

- (jbyte)writeMultipleBlockWithInt:(jint)blockOffset
                           withInt:(jint)nbrOfBlocks
                     withByteArray:(IOSByteArray *)buffer
                          withByte:(jbyte)flag
                     withByteArray:(IOSByteArray *)uid;

- (jboolean)isReadMultipleBlockSupported;

- (jboolean)isWriteMultipleBlockSupported;

@end

J2OBJC_FIELD_SETTER(ComStSt25sdkCommandType5MemoryCommand, mIso15693Command_, ComStSt25sdkCommandIso15693Command *)
J2OBJC_FIELD_SETTER(ComStSt25sdkCommandType5MemoryCommand, isReadMultipleBlockSupported_, ComStSt25sdkCommandType5MemoryCommand_CommandSupport *)
J2OBJC_FIELD_SETTER(ComStSt25sdkCommandType5MemoryCommand, isWriteMultipleBlockSupported_, ComStSt25sdkCommandType5MemoryCommand_CommandSupport *)
J2OBJC_FIELD_SETTER(ComStSt25sdkCommandType5MemoryCommand, mByteArrayOutputStream_, JavaIoByteArrayOutputStream *)

__attribute__((unused)) static void ComStSt25sdkCommandType5MemoryCommand_appendDataToByteArrayOutputStreamWithByteArray_withInt_withInt_(ComStSt25sdkCommandType5MemoryCommand *self, IOSByteArray *data, jint offset, jint length);

__attribute__((unused)) static void ComStSt25sdkCommandType5MemoryCommand_raiseExceptionWithIncompleteDataWithComStSt25sdkSTException_STExceptionCode_(ComStSt25sdkCommandType5MemoryCommand *self, ComStSt25sdkSTException_STExceptionCode *errorCode);

__attribute__((unused)) static jint ComStSt25sdkCommandType5MemoryCommand_getReadMultipleBlockMaxLengthInBlocksWithInt_(ComStSt25sdkCommandType5MemoryCommand *self, jint blockSize);

__attribute__((unused)) static void ComStSt25sdkCommandType5MemoryCommand_readSingleBlocksWithInt_withInt_withByte_withByteArray_(ComStSt25sdkCommandType5MemoryCommand *self, jint blockOffset, jint nbrOfBlocks, jbyte flag, IOSByteArray *uid);

__attribute__((unused)) static void ComStSt25sdkCommandType5MemoryCommand_writeSingleBlocksWithInt_withInt_withByteArray_withByte_withByteArray_(ComStSt25sdkCommandType5MemoryCommand *self, jint blockOffset, jint nbrOfBlocks, IOSByteArray *buffer, jbyte flag, IOSByteArray *uid);

__attribute__((unused)) static IOSByteArray *ComStSt25sdkCommandType5MemoryCommand_readMultipleBlockWithInt_withInt_withByte_withByteArray_(ComStSt25sdkCommandType5MemoryCommand *self, jint blockOffset, jint nbrOfBlocks, jbyte flag, IOSByteArray *uid);

__attribute__((unused)) static jbyte ComStSt25sdkCommandType5MemoryCommand_writeMultipleBlockWithInt_withInt_withByteArray_withByte_withByteArray_(ComStSt25sdkCommandType5MemoryCommand *self, jint blockOffset, jint nbrOfBlocks, IOSByteArray *buffer, jbyte flag, IOSByteArray *uid);

__attribute__((unused)) static jboolean ComStSt25sdkCommandType5MemoryCommand_isReadMultipleBlockSupported(ComStSt25sdkCommandType5MemoryCommand *self);

__attribute__((unused)) static jboolean ComStSt25sdkCommandType5MemoryCommand_isWriteMultipleBlockSupported(ComStSt25sdkCommandType5MemoryCommand *self);

__attribute__((unused)) static void ComStSt25sdkCommandType5MemoryCommand_CommandSupport_initWithNSString_withInt_(ComStSt25sdkCommandType5MemoryCommand_CommandSupport *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComStSt25sdkCommandType5MemoryCommand_CommandSupport *new_ComStSt25sdkCommandType5MemoryCommand_CommandSupport_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation ComStSt25sdkCommandType5MemoryCommand

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, reader, uid);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                             withByte:(jbyte)flag {
  ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(self, reader, uid, flag);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                              withInt:(jint)nbrOfBytesPerBlock {
  ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(self, reader, uid, nbrOfBytesPerBlock);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                             withByte:(jbyte)flag
                                              withInt:(jint)nbrOfBytesPerBlock {
  ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, flag, nbrOfBytesPerBlock);
  return self;
}

- (void)setFlagWithByte:(jbyte)flag {
  mFlag_ = flag;
  [((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Command_)) setFlagWithByte:flag];
}

- (void)setTagMaxReadMultipleBlockLengthWithInt:(jint)tagMaxReadMultipleBlockLength {
  mTagMaxReadMultipleBlockLength_ = tagMaxReadMultipleBlockLength;
}

- (ComStSt25sdkType5ReadBlockResult *)readBlocksWithInt:(jint)firstBlockAddress
                                                withInt:(jint)sizeInBlocks {
  return [self readBlocksWithInt:firstBlockAddress withInt:sizeInBlocks withByte:mFlag_ withByteArray:mUid_];
}

- (ComStSt25sdkType5ReadBlockResult *)readBlocksWithInt:(jint)firstBlockAddress
                                                withInt:(jint)sizeInBlocks
                                               withByte:(jbyte)flag
                                          withByteArray:(IOSByteArray *)uid {
  jint nbrOfBlocksRead = 0;
  jint blockSize = mNbrOfBytesPerBlock_;
  if ((flag & ComStSt25sdkCommandIso15693Protocol_OPTION_FLAG) == ComStSt25sdkCommandIso15693Protocol_OPTION_FLAG) {
    blockSize++;
  }
  jint readMultipleBlockMaxLengthInBlocks = ComStSt25sdkCommandType5MemoryCommand_getReadMultipleBlockMaxLengthInBlocksWithInt_(self, blockSize);
  [((JavaIoByteArrayOutputStream *) nil_chk(mByteArrayOutputStream_)) reset];
  while (nbrOfBlocksRead < sizeInBlocks) {
    jboolean isReadMultipleSuccessful = false;
    jint blockAddress = firstBlockAddress + nbrOfBlocksRead;
    jint nbrOfRemainingBlocks = sizeInBlocks - nbrOfBlocksRead;
    jint nbrOfBlocksToRead = 1;
    if (ComStSt25sdkCommandType5MemoryCommand_isReadMultipleBlockSupported(self) && (nbrOfRemainingBlocks > 1)) {
      @try {
        nbrOfBlocksToRead = JavaLangMath_minWithInt_withInt_(readMultipleBlockMaxLengthInBlocks, nbrOfRemainingBlocks);
        IOSByteArray *tmpBuf = ComStSt25sdkCommandType5MemoryCommand_readMultipleBlockWithInt_withInt_withByte_withByteArray_(self, blockAddress, nbrOfBlocksToRead, flag, uid);
        if (tmpBuf != nil) {
          ComStSt25sdkCommandType5MemoryCommand_appendDataToByteArrayOutputStreamWithByteArray_withInt_withInt_(self, tmpBuf, 1, tmpBuf->size_ - 1);
        }
        nbrOfBlocksRead += nbrOfBlocksToRead;
        isReadMultipleSuccessful = true;
        if (isReadMultipleBlockSupported_ == JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, INFORMATION_NOT_AVAILABLE_YET)) {
          isReadMultipleBlockSupported_ = JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_SUPPORTED);
        }
      }
      @catch (ComStSt25sdkSTException *e) {
        isReadMultipleSuccessful = false;
        if (([e getError] == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_CMD_NOT_SUPPORTED)) || ([e getError] == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED))) {
          if (isReadMultipleBlockSupported_ == JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, INFORMATION_NOT_AVAILABLE_YET)) {
            isReadMultipleBlockSupported_ = JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_NOT_SUPPORTED);
          }
        }
      }
    }
    if (!isReadMultipleSuccessful) {
      ComStSt25sdkCommandType5MemoryCommand_readSingleBlocksWithInt_withInt_withByte_withByteArray_(self, blockAddress, nbrOfBlocksToRead, flag, uid);
    }
    jint nbrOfBytesRead = [((JavaIoByteArrayOutputStream *) nil_chk(mByteArrayOutputStream_)) size];
    nbrOfBlocksRead = nbrOfBytesRead / blockSize;
  }
  if (nbrOfBlocksRead == 0) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
  ComStSt25sdkType5ReadBlockResult *response = new_ComStSt25sdkType5ReadBlockResult_initWithInt_withInt_(nbrOfBlocksRead, mNbrOfBytesPerBlock_);
  IOSByteArray *buffer = [((JavaIoByteArrayOutputStream *) nil_chk(mByteArrayOutputStream_)) toByteArray];
  if ((flag & ComStSt25sdkCommandIso15693Protocol_OPTION_FLAG) == ComStSt25sdkCommandIso15693Protocol_OPTION_FLAG) {
    for (jint blockIndex = 0; blockIndex < nbrOfBlocksRead; blockIndex++) {
      *IOSByteArray_GetRef(nil_chk(response->blockSecurityStatus_), blockIndex) = IOSByteArray_Get(nil_chk(buffer), blockIndex * blockSize);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, blockIndex * blockSize + 1, response->data_, blockIndex * mNbrOfBytesPerBlock_, mNbrOfBytesPerBlock_);
    }
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, response->data_, 0, ((IOSByteArray *) nil_chk(response->data_))->size_);
  }
  return response;
}

- (void)appendDataToByteArrayOutputStreamWithByteArray:(IOSByteArray *)data
                                               withInt:(jint)offset
                                               withInt:(jint)length {
  ComStSt25sdkCommandType5MemoryCommand_appendDataToByteArrayOutputStreamWithByteArray_withInt_withInt_(self, data, offset, length);
}

- (void)raiseExceptionWithIncompleteDataWithComStSt25sdkSTException_STExceptionCode:(ComStSt25sdkSTException_STExceptionCode *)errorCode {
  ComStSt25sdkCommandType5MemoryCommand_raiseExceptionWithIncompleteDataWithComStSt25sdkSTException_STExceptionCode_(self, errorCode);
}

- (jint)getReadMultipleBlockMaxLengthInBlocksWithInt:(jint)blockSize {
  return ComStSt25sdkCommandType5MemoryCommand_getReadMultipleBlockMaxLengthInBlocksWithInt_(self, blockSize);
}

- (void)writeBlocksWithInt:(jint)firstBlockAddress
             withByteArray:(IOSByteArray *)data {
  [self writeBlocksWithInt:firstBlockAddress withByteArray:data withByte:mFlag_ withByteArray:mUid_];
}

- (void)writeBlocksWithInt:(jint)firstBlockAddress
             withByteArray:(IOSByteArray *)data
                  withByte:(jbyte)flag
             withByteArray:(IOSByteArray *)uid {
  jint nbrOfBlocksWritten = 0;
  jint nbrOfBlocks = ComStSt25sdkHelper_divisionRoundedUpWithInt_withInt_(((IOSByteArray *) nil_chk(data))->size_, mNbrOfBytesPerBlock_);
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:nbrOfBlocks * mNbrOfBytesPerBlock_];
  JavaUtilArrays_fillWithByteArray_withByte_(buffer, (jbyte) (jint) 0xFF);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, buffer, 0, data->size_);
  while (nbrOfBlocksWritten < nbrOfBlocks) {
    jboolean isWriteMultipleSuccessful = false;
    jint blockAddress = firstBlockAddress + nbrOfBlocksWritten;
    jint nbrOfRemainingBlocks = nbrOfBlocks - nbrOfBlocksWritten;
    jint nbrOfBlocksToWrite = 1;
    if (ComStSt25sdkCommandType5MemoryCommand_isWriteMultipleBlockSupported(self) && (nbrOfRemainingBlocks > 1)) {
      @try {
        nbrOfBlocksToWrite = [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) getMaxTransmitLengthInBytes] / mNbrOfBytesPerBlock_;
        if ((flag & ComStSt25sdkCommandIso15693Protocol_ADDRESSED_MODE) == ComStSt25sdkCommandIso15693Protocol_ADDRESSED_MODE) {
          nbrOfBlocksToWrite -= (8 / mNbrOfBytesPerBlock_);
          if (nbrOfBlocksToWrite <= 0) {
            @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_FAILURE));
          }
        }
        nbrOfBlocksToWrite = JavaLangMath_minWithInt_withInt_(nbrOfBlocksToWrite, nbrOfRemainingBlocks);
        nbrOfBlocksToWrite = JavaLangMath_minWithInt_withInt_(nbrOfBlocksToWrite, mWriteMultipleBlocksMaxLength_);
        IOSByteArray *tmpBuf = [IOSByteArray newArrayWithLength:nbrOfBlocksToWrite * mNbrOfBytesPerBlock_];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, nbrOfBlocksWritten * mNbrOfBytesPerBlock_, tmpBuf, 0, nbrOfBlocksToWrite * mNbrOfBytesPerBlock_);
        ComStSt25sdkCommandType5MemoryCommand_writeMultipleBlockWithInt_withInt_withByteArray_withByte_withByteArray_(self, blockAddress, nbrOfBlocksToWrite, tmpBuf, flag, uid);
        nbrOfBlocksWritten += nbrOfBlocksToWrite;
        isWriteMultipleSuccessful = true;
        if (isWriteMultipleBlockSupported_ == JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, INFORMATION_NOT_AVAILABLE_YET)) {
          isWriteMultipleBlockSupported_ = JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_SUPPORTED);
        }
      }
      @catch (ComStSt25sdkSTException *e) {
        isWriteMultipleSuccessful = false;
        if (mWriteMultipleBlocksMaxLength_ > 2) {
          mWriteMultipleBlocksMaxLength_--;
          ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$I", @"Retrying with mWriteMultipleBlocksMaxLength = ", mWriteMultipleBlocksMaxLength_));
          continue;
        }
        if (([e getError] == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_CMD_NOT_SUPPORTED)) || ([e getError] == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED))) {
          if (isWriteMultipleBlockSupported_ == JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, INFORMATION_NOT_AVAILABLE_YET)) {
            isWriteMultipleBlockSupported_ = JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_NOT_SUPPORTED);
          }
        }
      }
    }
    if (!isWriteMultipleSuccessful) {
      IOSByteArray *tmpBuf = [IOSByteArray newArrayWithLength:nbrOfBlocksToWrite * mNbrOfBytesPerBlock_];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, nbrOfBlocksWritten * mNbrOfBytesPerBlock_, tmpBuf, 0, nbrOfBlocksToWrite * mNbrOfBytesPerBlock_);
      ComStSt25sdkCommandType5MemoryCommand_writeSingleBlocksWithInt_withInt_withByteArray_withByte_withByteArray_(self, blockAddress, nbrOfBlocksToWrite, tmpBuf, flag, uid);
      nbrOfBlocksWritten += nbrOfBlocksToWrite;
    }
  }
}

- (IOSByteArray *)readBytesWithInt:(jint)byteAddress
                           withInt:(jint)sizeInBytes {
  return [self readBytesWithInt:byteAddress withInt:sizeInBytes withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)readBytesWithInt:(jint)byteAddress
                           withInt:(jint)sizeInBytes
                          withByte:(jbyte)flag
                     withByteArray:(IOSByteArray *)uid {
  jint nbrOfBlocks;
  jint blockSize = mNbrOfBytesPerBlock_;
  IOSByteArray *result;
  if ((byteAddress < 0) || (sizeInBytes <= 0)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jint firstBlockAddress = byteAddress / mNbrOfBytesPerBlock_;
  jint nbrOfBytesToSkipInFirstBlock = byteAddress % mNbrOfBytesPerBlock_;
  jint lastByteAddress = byteAddress + sizeInBytes - 1;
  jint lastBlockAddress = lastByteAddress / mNbrOfBytesPerBlock_;
  nbrOfBlocks = lastBlockAddress - firstBlockAddress + 1;
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:nbrOfBlocks * blockSize];
  JavaUtilArrays_fillWithByteArray_withByte_(buffer, (jbyte) (jint) 0xFF);
  ComStSt25sdkType5ReadBlockResult *tmpBuf = [self readBlocksWithInt:firstBlockAddress withInt:nbrOfBlocks withByte:flag withByteArray:uid];
  if (tmpBuf != nil && tmpBuf->data_ != nil) {
    if (tmpBuf->data_->size_ == nbrOfBlocks * blockSize) {
      result = [IOSByteArray newArrayWithLength:sizeInBytes];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tmpBuf->data_, nbrOfBytesToSkipInFirstBlock, result, 0, result->size_);
    }
    else {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED), tmpBuf->data_);
    }
  }
  else {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
  return result;
}

- (void)writeBytesWithInt:(jint)byteAddress
            withByteArray:(IOSByteArray *)data {
  [self writeBytesWithInt:byteAddress withByteArray:data withByte:mFlag_ withByteArray:mUid_];
}

- (void)writeBytesWithInt:(jint)byteAddress
            withByteArray:(IOSByteArray *)data
                 withByte:(jbyte)flag
            withByteArray:(IOSByteArray *)uid {
  jint nbrOfBlocks;
  jint sizeInBytes = ((IOSByteArray *) nil_chk(data))->size_;
  if (byteAddress < 0) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jint firstBlockAddress = byteAddress / mNbrOfBytesPerBlock_;
  jint nbrOfBytesToSkipInFirstBlock = byteAddress % mNbrOfBytesPerBlock_;
  jint lastByteAddress = byteAddress + sizeInBytes - 1;
  jint lastBlockAddress = lastByteAddress / mNbrOfBytesPerBlock_;
  jint nbrOfBytesInLastBlock = 1 + (lastByteAddress % mNbrOfBytesPerBlock_);
  nbrOfBlocks = lastBlockAddress - firstBlockAddress + 1;
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:nbrOfBlocks * mNbrOfBytesPerBlock_];
  JavaUtilArrays_fillWithByteArray_withByte_(buffer, (jbyte) (jint) 0xFF);
  if (nbrOfBytesToSkipInFirstBlock != 0) {
    ComStSt25sdkType5ReadBlockResult *blockContent = [self readBlocksWithInt:firstBlockAddress withInt:1 withByte:flag withByteArray:uid];
    IOSByteArray *firstBlock = ((ComStSt25sdkType5ReadBlockResult *) nil_chk(blockContent))->data_;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(firstBlock, 0, buffer, 0, mNbrOfBytesPerBlock_);
  }
  if (nbrOfBytesInLastBlock != mNbrOfBytesPerBlock_) {
    ComStSt25sdkType5ReadBlockResult *blockContent = [self readBlocksWithInt:lastBlockAddress withInt:1 withByte:flag withByteArray:uid];
    IOSByteArray *lastBlock = ((ComStSt25sdkType5ReadBlockResult *) nil_chk(blockContent))->data_;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastBlock, 0, buffer, buffer->size_ - mNbrOfBytesPerBlock_, mNbrOfBytesPerBlock_);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, buffer, nbrOfBytesToSkipInFirstBlock, data->size_);
  [self writeBlocksWithInt:firstBlockAddress withByteArray:buffer withByte:flag withByteArray:uid];
}

- (void)readSingleBlocksWithInt:(jint)blockOffset
                        withInt:(jint)nbrOfBlocks
                       withByte:(jbyte)flag
                  withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkCommandType5MemoryCommand_readSingleBlocksWithInt_withInt_withByte_withByteArray_(self, blockOffset, nbrOfBlocks, flag, uid);
}

- (void)writeSingleBlocksWithInt:(jint)blockOffset
                         withInt:(jint)nbrOfBlocks
                   withByteArray:(IOSByteArray *)buffer
                        withByte:(jbyte)flag
                   withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkCommandType5MemoryCommand_writeSingleBlocksWithInt_withInt_withByteArray_withByte_withByteArray_(self, blockOffset, nbrOfBlocks, buffer, flag, uid);
}

- (IOSByteArray *)readSingleBlockWithInt:(jint)blockOffset
                                withByte:(jbyte)flag
                           withByteArray:(IOSByteArray *)uid {
  IOSByteArray *result;
  if ((blockOffset < 0) || (blockOffset > (jint) 0xFFFF)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (blockOffset > (jint) 0xFF) {
    result = [((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Command_)) extendedReadSingleBlockWithByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(blockOffset) withByte:flag withByteArray:uid];
  }
  else {
    jbyte blockAddress;
    blockAddress = (jbyte) blockOffset;
    result = [((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Command_)) readSingleBlockWithByte:blockAddress withByte:flag withByteArray:uid];
  }
  return result;
}

- (IOSByteArray *)readMultipleBlockWithInt:(jint)blockOffset
                                   withInt:(jint)nbrOfBlocks
                                  withByte:(jbyte)flag
                             withByteArray:(IOSByteArray *)uid {
  return ComStSt25sdkCommandType5MemoryCommand_readMultipleBlockWithInt_withInt_withByte_withByteArray_(self, blockOffset, nbrOfBlocks, flag, uid);
}

- (jbyte)writeSingleBlockWithInt:(jint)blockOffset
                   withByteArray:(IOSByteArray *)buffer
                        withByte:(jbyte)flag
                   withByteArray:(IOSByteArray *)uid {
  jbyte result;
  if ((blockOffset < 0) || (blockOffset > (jint) 0xFFFF)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (blockOffset > (jint) 0xFF) {
    if (blockOffset > (jint) 0xFFFF) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
    }
    result = [((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Command_)) extendedWriteSingleBlockWithByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(blockOffset) withByteArray:buffer withByte:flag withByteArray:uid];
  }
  else {
    jbyte blockAddress;
    if (blockOffset > (jint) 0xFF) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
    }
    blockAddress = (jbyte) blockOffset;
    result = [((ComStSt25sdkCommandIso15693Command *) nil_chk(mIso15693Command_)) writeSingleBlockWithByte:blockAddress withByteArray:buffer withByte:flag withByteArray:uid];
  }
  return result;
}

- (jbyte)writeMultipleBlockWithInt:(jint)blockOffset
                           withInt:(jint)nbrOfBlocks
                     withByteArray:(IOSByteArray *)buffer
                          withByte:(jbyte)flag
                     withByteArray:(IOSByteArray *)uid {
  return ComStSt25sdkCommandType5MemoryCommand_writeMultipleBlockWithInt_withInt_withByteArray_withByte_withByteArray_(self, blockOffset, nbrOfBlocks, buffer, flag, uid);
}

- (jboolean)isReadMultipleBlockSupported {
  return ComStSt25sdkCommandType5MemoryCommand_isReadMultipleBlockSupported(self);
}

- (void)setIsReadMultipleBlockSupportedWithBoolean:(jboolean)isReadMultipleBlockSupported {
  if (isReadMultipleBlockSupported) {
    self->isReadMultipleBlockSupported_ = JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_SUPPORTED);
  }
  else {
    self->isReadMultipleBlockSupported_ = JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_NOT_SUPPORTED);
  }
}

- (jboolean)isWriteMultipleBlockSupported {
  return ComStSt25sdkCommandType5MemoryCommand_isWriteMultipleBlockSupported(self);
}

- (void)setIsWriteMultipleBlockSupportedWithBoolean:(jboolean)isWriteMultipleBlockSupported {
  if (isWriteMultipleBlockSupported) {
    self->isWriteMultipleBlockSupported_ = JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_SUPPORTED);
  }
  else {
    self->isWriteMultipleBlockSupported_ = JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_NOT_SUPPORTED);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkType5ReadBlockResult;", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "LComStSt25sdkType5ReadBlockResult;", 0x1, 8, 11, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, 10, -1, -1, -1 },
    { NULL, "I", 0x2, 16, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 19, 10, -1, -1, -1 },
    { NULL, "[B", 0x1, 20, 9, 10, -1, -1, -1 },
    { NULL, "[B", 0x1, 20, 11, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 18, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 19, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 11, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 24, 10, -1, -1, -1 },
    { NULL, "[B", 0x1, 25, 26, 10, -1, -1, -1 },
    { NULL, "[B", 0x2, 27, 11, 10, -1, -1, -1 },
    { NULL, "B", 0x1, 28, 19, 10, -1, -1, -1 },
    { NULL, "B", 0x2, 29, 24, 10, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 31, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[1].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withByte:);
  methods[2].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withInt:);
  methods[3].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withByte:withInt:);
  methods[4].selector = @selector(setFlagWithByte:);
  methods[5].selector = @selector(setTagMaxReadMultipleBlockLengthWithInt:);
  methods[6].selector = @selector(readBlocksWithInt:withInt:);
  methods[7].selector = @selector(readBlocksWithInt:withInt:withByte:withByteArray:);
  methods[8].selector = @selector(appendDataToByteArrayOutputStreamWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(raiseExceptionWithIncompleteDataWithComStSt25sdkSTException_STExceptionCode:);
  methods[10].selector = @selector(getReadMultipleBlockMaxLengthInBlocksWithInt:);
  methods[11].selector = @selector(writeBlocksWithInt:withByteArray:);
  methods[12].selector = @selector(writeBlocksWithInt:withByteArray:withByte:withByteArray:);
  methods[13].selector = @selector(readBytesWithInt:withInt:);
  methods[14].selector = @selector(readBytesWithInt:withInt:withByte:withByteArray:);
  methods[15].selector = @selector(writeBytesWithInt:withByteArray:);
  methods[16].selector = @selector(writeBytesWithInt:withByteArray:withByte:withByteArray:);
  methods[17].selector = @selector(readSingleBlocksWithInt:withInt:withByte:withByteArray:);
  methods[18].selector = @selector(writeSingleBlocksWithInt:withInt:withByteArray:withByte:withByteArray:);
  methods[19].selector = @selector(readSingleBlockWithInt:withByte:withByteArray:);
  methods[20].selector = @selector(readMultipleBlockWithInt:withInt:withByte:withByteArray:);
  methods[21].selector = @selector(writeSingleBlockWithInt:withByteArray:withByte:withByteArray:);
  methods[22].selector = @selector(writeMultipleBlockWithInt:withInt:withByteArray:withByte:withByteArray:);
  methods[23].selector = @selector(isReadMultipleBlockSupported);
  methods[24].selector = @selector(setIsReadMultipleBlockSupportedWithBoolean:);
  methods[25].selector = @selector(isWriteMultipleBlockSupported);
  methods[26].selector = @selector(setIsWriteMultipleBlockSupportedWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mIso15693Command_", "LComStSt25sdkCommandIso15693Command;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTagMaxReadMultipleBlockLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isReadMultipleBlockSupported_", "LComStSt25sdkCommandType5MemoryCommand_CommandSupport;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isWriteMultipleBlockSupported_", "LComStSt25sdkCommandType5MemoryCommand_CommandSupport;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWriteMultipleBlocksMaxLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mByteArrayOutputStream_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[B", "LComStSt25sdkRFReaderInterface;[BB", "LComStSt25sdkRFReaderInterface;[BI", "LComStSt25sdkRFReaderInterface;[BBI", "setFlag", "B", "setTagMaxReadMultipleBlockLength", "I", "readBlocks", "II", "LComStSt25sdkSTException;", "IIB[B", "appendDataToByteArrayOutputStream", "[BII", "raiseExceptionWithIncompleteData", "LComStSt25sdkSTException_STExceptionCode;", "getReadMultipleBlockMaxLengthInBlocks", "writeBlocks", "I[B", "I[BB[B", "readBytes", "writeBytes", "readSingleBlocks", "writeSingleBlocks", "II[BB[B", "readSingleBlock", "IB[B", "readMultipleBlock", "writeSingleBlock", "writeMultipleBlock", "setIsReadMultipleBlockSupported", "Z", "setIsWriteMultipleBlockSupported", "LComStSt25sdkCommandType5MemoryCommand_CommandSupport;" };
  static const J2ObjcClassInfo _ComStSt25sdkCommandType5MemoryCommand = { "Type5MemoryCommand", "com.st.st25sdk.command", ptrTable, methods, fields, 7, 0x1, 27, 6, -1, 33, -1, -1, -1 };
  return &_ComStSt25sdkCommandType5MemoryCommand;
}

@end

void ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkCommandType5MemoryCommand *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, ComStSt25sdkCommandIso15693Protocol_DEFAULT_FLAG, ComStSt25sdkType5Type5Tag_DEFAULT_NBR_OF_BYTES_PER_BLOCK);
}

ComStSt25sdkCommandType5MemoryCommand *new_ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandType5MemoryCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_, reader, uid)
}

ComStSt25sdkCommandType5MemoryCommand *create_ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandType5MemoryCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_, reader, uid)
}

void ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(ComStSt25sdkCommandType5MemoryCommand *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, flag, ComStSt25sdkType5Type5Tag_DEFAULT_NBR_OF_BYTES_PER_BLOCK);
}

ComStSt25sdkCommandType5MemoryCommand *new_ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandType5MemoryCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_, reader, uid, flag)
}

ComStSt25sdkCommandType5MemoryCommand *create_ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandType5MemoryCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_, reader, uid, flag)
}

void ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(ComStSt25sdkCommandType5MemoryCommand *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, ComStSt25sdkCommandIso15693Protocol_DEFAULT_FLAG, nbrOfBytesPerBlock);
}

ComStSt25sdkCommandType5MemoryCommand *new_ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandType5MemoryCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_, reader, uid, nbrOfBytesPerBlock)
}

ComStSt25sdkCommandType5MemoryCommand *create_ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandType5MemoryCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_, reader, uid, nbrOfBytesPerBlock)
}

void ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(ComStSt25sdkCommandType5MemoryCommand *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, flag, nbrOfBytesPerBlock);
  self->mTagMaxReadMultipleBlockLength_ = ComStSt25sdkCommandIso15693Protocol_DEFAULT_READ_MULTIPLE_MAX_NBR_OF_BLOCKS;
  self->isReadMultipleBlockSupported_ = JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, INFORMATION_NOT_AVAILABLE_YET);
  self->isWriteMultipleBlockSupported_ = JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, INFORMATION_NOT_AVAILABLE_YET);
  self->mWriteMultipleBlocksMaxLength_ = 4;
  self->mIso15693Command_ = new_ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(reader, uid, flag, nbrOfBytesPerBlock);
  self->mByteArrayOutputStream_ = new_JavaIoByteArrayOutputStream_init();
}

ComStSt25sdkCommandType5MemoryCommand *new_ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandType5MemoryCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_, reader, uid, flag, nbrOfBytesPerBlock)
}

ComStSt25sdkCommandType5MemoryCommand *create_ComStSt25sdkCommandType5MemoryCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandType5MemoryCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_, reader, uid, flag, nbrOfBytesPerBlock)
}

void ComStSt25sdkCommandType5MemoryCommand_appendDataToByteArrayOutputStreamWithByteArray_withInt_withInt_(ComStSt25sdkCommandType5MemoryCommand *self, IOSByteArray *data, jint offset, jint length) {
  if ((self->mByteArrayOutputStream_ != nil) && (data != nil)) {
    [((JavaIoByteArrayOutputStream *) nil_chk(self->mByteArrayOutputStream_)) writeWithByteArray:data withInt:offset withInt:length];
  }
}

void ComStSt25sdkCommandType5MemoryCommand_raiseExceptionWithIncompleteDataWithComStSt25sdkSTException_STExceptionCode_(ComStSt25sdkCommandType5MemoryCommand *self, ComStSt25sdkSTException_STExceptionCode *errorCode) {
  IOSByteArray *data = nil;
  if (self->mByteArrayOutputStream_ != nil) {
    data = [self->mByteArrayOutputStream_ toByteArray];
  }
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(errorCode, data);
}

jint ComStSt25sdkCommandType5MemoryCommand_getReadMultipleBlockMaxLengthInBlocksWithInt_(ComStSt25sdkCommandType5MemoryCommand *self, jint blockSize) {
  jint maxReceiveLengthInBytes = [((id<ComStSt25sdkRFReaderInterface>) nil_chk(self->mReaderInterface_)) getMaxReceiveLengthInBytes];
  jint maxDataLengthInBytes = maxReceiveLengthInBytes - 3;
  jint readerMaxReadMultipleBlockLength = maxDataLengthInBytes / blockSize;
  jint maxNbrOfBlocks = JavaLangMath_minWithInt_withInt_(readerMaxReadMultipleBlockLength, self->mTagMaxReadMultipleBlockLength_);
  return maxNbrOfBlocks;
}

void ComStSt25sdkCommandType5MemoryCommand_readSingleBlocksWithInt_withInt_withByte_withByteArray_(ComStSt25sdkCommandType5MemoryCommand *self, jint blockOffset, jint nbrOfBlocks, jbyte flag, IOSByteArray *uid) {
  for (jint block = 0; block < nbrOfBlocks; block++) {
    jint blockAddress = blockOffset + block;
    @try {
      IOSByteArray *tmpBuf = [self readSingleBlockWithInt:blockAddress withByte:flag withByteArray:uid];
      if (tmpBuf != nil) {
        ComStSt25sdkCommandType5MemoryCommand_appendDataToByteArrayOutputStreamWithByteArray_withInt_withInt_(self, tmpBuf, 1, tmpBuf->size_ - 1);
      }
    }
    @catch (ComStSt25sdkSTException *e) {
      ComStSt25sdkCommandType5MemoryCommand_raiseExceptionWithIncompleteDataWithComStSt25sdkSTException_STExceptionCode_(self, [e getError]);
    }
  }
}

void ComStSt25sdkCommandType5MemoryCommand_writeSingleBlocksWithInt_withInt_withByteArray_withByte_withByteArray_(ComStSt25sdkCommandType5MemoryCommand *self, jint blockOffset, jint nbrOfBlocks, IOSByteArray *buffer, jbyte flag, IOSByteArray *uid) {
  for (jint block = 0; block < nbrOfBlocks; block++) {
    jint blockAddress = blockOffset + block;
    IOSByteArray *tmpBuf = [IOSByteArray newArrayWithLength:self->mNbrOfBytesPerBlock_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, block * self->mNbrOfBytesPerBlock_, tmpBuf, 0, self->mNbrOfBytesPerBlock_);
    [self writeSingleBlockWithInt:blockAddress withByteArray:tmpBuf withByte:flag withByteArray:uid];
  }
}

IOSByteArray *ComStSt25sdkCommandType5MemoryCommand_readMultipleBlockWithInt_withInt_withByte_withByteArray_(ComStSt25sdkCommandType5MemoryCommand *self, jint blockOffset, jint nbrOfBlocks, jbyte flag, IOSByteArray *uid) {
  IOSByteArray *result;
  jint expectedResponseLengthInBytes;
  if ((nbrOfBlocks <= 0) || (blockOffset < 0)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ((flag & ComStSt25sdkCommandIso15693Protocol_OPTION_FLAG) == ComStSt25sdkCommandIso15693Protocol_OPTION_FLAG) {
    expectedResponseLengthInBytes = nbrOfBlocks * (self->mNbrOfBytesPerBlock_ + 1) + 1;
  }
  else {
    expectedResponseLengthInBytes = nbrOfBlocks * self->mNbrOfBytesPerBlock_ + 1;
  }
  if ((blockOffset + nbrOfBlocks) > (jint) 0xFF) {
    if (blockOffset + nbrOfBlocks > (jint) 0xFFFF) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
    }
    result = [((ComStSt25sdkCommandIso15693Command *) nil_chk(self->mIso15693Command_)) extendedReadMultipleBlockWithByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(blockOffset) withByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(nbrOfBlocks - 1) withByte:flag withByteArray:uid];
  }
  else {
    jbyte blockAddress;
    jbyte nbrOfBlocksToRead;
    if (blockOffset + nbrOfBlocks > (jint) 0xFF) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
    }
    blockAddress = (jbyte) blockOffset;
    nbrOfBlocksToRead = (jbyte) (nbrOfBlocks - 1);
    result = [((ComStSt25sdkCommandIso15693Command *) nil_chk(self->mIso15693Command_)) readMultipleBlockWithByte:blockAddress withByte:nbrOfBlocksToRead withByte:flag withByteArray:uid];
  }
  if ((result == nil) || (((IOSByteArray *) nil_chk(result))->size_ != expectedResponseLengthInBytes)) {
    ComStSt25sdkSTLog_eWithNSString_(@"Incorrect response length!");
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED), result);
  }
  return result;
}

jbyte ComStSt25sdkCommandType5MemoryCommand_writeMultipleBlockWithInt_withInt_withByteArray_withByte_withByteArray_(ComStSt25sdkCommandType5MemoryCommand *self, jint blockOffset, jint nbrOfBlocks, IOSByteArray *buffer, jbyte flag, IOSByteArray *uid) {
  jbyte result;
  if ((nbrOfBlocks <= 0) || (blockOffset < 0)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ((blockOffset + nbrOfBlocks) > (jint) 0xFF) {
    if (blockOffset + nbrOfBlocks > (jint) 0xFFFF) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
    }
    result = [((ComStSt25sdkCommandIso15693Command *) nil_chk(self->mIso15693Command_)) extendedWriteMultipleBlockWithByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(blockOffset) withByteArray:ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(nbrOfBlocks - 1) withByteArray:buffer withByte:flag withByteArray:uid];
  }
  else {
    jbyte blockAddress;
    jbyte nbrOfBlocksToWrite;
    if (blockOffset + nbrOfBlocks > (jint) 0xFF) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
    }
    blockAddress = (jbyte) blockOffset;
    nbrOfBlocksToWrite = (jbyte) (nbrOfBlocks - 1);
    result = [((ComStSt25sdkCommandIso15693Command *) nil_chk(self->mIso15693Command_)) writeMultipleBlockWithByte:blockAddress withByte:nbrOfBlocksToWrite withByteArray:buffer withByte:flag withByteArray:uid];
  }
  return result;
}

jboolean ComStSt25sdkCommandType5MemoryCommand_isReadMultipleBlockSupported(ComStSt25sdkCommandType5MemoryCommand *self) {
  return self->isReadMultipleBlockSupported_ != JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_NOT_SUPPORTED);
}

jboolean ComStSt25sdkCommandType5MemoryCommand_isWriteMultipleBlockSupported(ComStSt25sdkCommandType5MemoryCommand *self) {
  return self->isWriteMultipleBlockSupported_ != JreLoadEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_NOT_SUPPORTED);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandType5MemoryCommand)

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkCommandType5MemoryCommand_CommandSupport)

ComStSt25sdkCommandType5MemoryCommand_CommandSupport *ComStSt25sdkCommandType5MemoryCommand_CommandSupport_values_[3];

@implementation ComStSt25sdkCommandType5MemoryCommand_CommandSupport

+ (ComStSt25sdkCommandType5MemoryCommand_CommandSupport *)INFORMATION_NOT_AVAILABLE_YET {
  return JreEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, INFORMATION_NOT_AVAILABLE_YET);
}

+ (ComStSt25sdkCommandType5MemoryCommand_CommandSupport *)COMMAND_SUPPORTED {
  return JreEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_SUPPORTED);
}

+ (ComStSt25sdkCommandType5MemoryCommand_CommandSupport *)COMMAND_NOT_SUPPORTED {
  return JreEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_NOT_SUPPORTED);
}

+ (IOSObjectArray *)values {
  return ComStSt25sdkCommandType5MemoryCommand_CommandSupport_values();
}

+ (ComStSt25sdkCommandType5MemoryCommand_CommandSupport *)valueOfWithNSString:(NSString *)name {
  return ComStSt25sdkCommandType5MemoryCommand_CommandSupport_valueOfWithNSString_(name);
}

- (ComStSt25sdkCommandType5MemoryCommand_CommandSupport_Enum)toNSEnum {
  return (ComStSt25sdkCommandType5MemoryCommand_CommandSupport_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComStSt25sdkCommandType5MemoryCommand_CommandSupport;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkCommandType5MemoryCommand_CommandSupport;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INFORMATION_NOT_AVAILABLE_YET", "LComStSt25sdkCommandType5MemoryCommand_CommandSupport;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "COMMAND_SUPPORTED", "LComStSt25sdkCommandType5MemoryCommand_CommandSupport;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "COMMAND_NOT_SUPPORTED", "LComStSt25sdkCommandType5MemoryCommand_CommandSupport;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, INFORMATION_NOT_AVAILABLE_YET), &JreEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_SUPPORTED), &JreEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_NOT_SUPPORTED), "LComStSt25sdkCommandType5MemoryCommand;", "Ljava/lang/Enum<Lcom/st/st25sdk/command/Type5MemoryCommand$CommandSupport;>;" };
  static const J2ObjcClassInfo _ComStSt25sdkCommandType5MemoryCommand_CommandSupport = { "CommandSupport", "com.st.st25sdk.command", ptrTable, methods, fields, 7, 0x401c, 2, 3, 5, -1, -1, 6, -1 };
  return &_ComStSt25sdkCommandType5MemoryCommand_CommandSupport;
}

+ (void)initialize {
  if (self == [ComStSt25sdkCommandType5MemoryCommand_CommandSupport class]) {
    JreEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, INFORMATION_NOT_AVAILABLE_YET) = new_ComStSt25sdkCommandType5MemoryCommand_CommandSupport_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkCommandType5MemoryCommand_CommandSupport_class_(), 0), 0);
    JreEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_SUPPORTED) = new_ComStSt25sdkCommandType5MemoryCommand_CommandSupport_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkCommandType5MemoryCommand_CommandSupport_class_(), 1), 1);
    JreEnum(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, COMMAND_NOT_SUPPORTED) = new_ComStSt25sdkCommandType5MemoryCommand_CommandSupport_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkCommandType5MemoryCommand_CommandSupport_class_(), 2), 2);
    J2OBJC_SET_INITIALIZED(ComStSt25sdkCommandType5MemoryCommand_CommandSupport)
  }
}

@end

void ComStSt25sdkCommandType5MemoryCommand_CommandSupport_initWithNSString_withInt_(ComStSt25sdkCommandType5MemoryCommand_CommandSupport *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComStSt25sdkCommandType5MemoryCommand_CommandSupport *new_ComStSt25sdkCommandType5MemoryCommand_CommandSupport_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandType5MemoryCommand_CommandSupport, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComStSt25sdkCommandType5MemoryCommand_CommandSupport_values() {
  ComStSt25sdkCommandType5MemoryCommand_CommandSupport_initialize();
  return [IOSObjectArray arrayWithObjects:ComStSt25sdkCommandType5MemoryCommand_CommandSupport_values_ count:3 type:ComStSt25sdkCommandType5MemoryCommand_CommandSupport_class_()];
}

ComStSt25sdkCommandType5MemoryCommand_CommandSupport *ComStSt25sdkCommandType5MemoryCommand_CommandSupport_valueOfWithNSString_(NSString *name) {
  ComStSt25sdkCommandType5MemoryCommand_CommandSupport_initialize();
  for (int i = 0; i < 3; i++) {
    ComStSt25sdkCommandType5MemoryCommand_CommandSupport *e = ComStSt25sdkCommandType5MemoryCommand_CommandSupport_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComStSt25sdkCommandType5MemoryCommand_CommandSupport *ComStSt25sdkCommandType5MemoryCommand_CommandSupport_fromOrdinal(NSUInteger ordinal) {
  ComStSt25sdkCommandType5MemoryCommand_CommandSupport_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return ComStSt25sdkCommandType5MemoryCommand_CommandSupport_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandType5MemoryCommand_CommandSupport)
