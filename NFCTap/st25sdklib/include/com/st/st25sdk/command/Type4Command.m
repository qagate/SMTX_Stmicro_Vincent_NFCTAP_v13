//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/command/Type4Command.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/command/Iso7816Type4RApduStatus.h"
#include "com/st/st25sdk/command/Type4Command.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/concurrent/locks/Lock.h"
#include "java/util/concurrent/locks/ReentrantLock.h"

@interface ComStSt25sdkCommandType4Command () {
 @public
  id<ComStSt25sdkRFReaderInterface> mReaderInterface_;
}

@end

J2OBJC_FIELD_SETTER(ComStSt25sdkCommandType4Command, mReaderInterface_, id<ComStSt25sdkRFReaderInterface>)

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkCommandType4Command)

id<JavaUtilConcurrentLocksLock> ComStSt25sdkCommandType4Command_mLock;

@implementation ComStSt25sdkCommandType4Command

+ (jboolean)DBG {
  return ComStSt25sdkCommandType4Command_DBG;
}

+ (jbyte)TYPE4_CMD_SELECT {
  return ComStSt25sdkCommandType4Command_TYPE4_CMD_SELECT;
}

+ (jbyte)TYPE4_CMD_READ_BINARY {
  return ComStSt25sdkCommandType4Command_TYPE4_CMD_READ_BINARY;
}

+ (jbyte)TYPE4_CMD_UPDATE_BINARY {
  return ComStSt25sdkCommandType4Command_TYPE4_CMD_UPDATE_BINARY;
}

+ (jbyte)TYPE4_CMD_SELECT_BY_FILE_ID {
  return ComStSt25sdkCommandType4Command_TYPE4_CMD_SELECT_BY_FILE_ID;
}

+ (jbyte)TYPE4_CMD_SELECT_BY_NAME {
  return ComStSt25sdkCommandType4Command_TYPE4_CMD_SELECT_BY_NAME;
}

+ (jbyte)TYPE4_CMD_FIRST_OR_ONLY_OCCURENCE {
  return ComStSt25sdkCommandType4Command_TYPE4_CMD_FIRST_OR_ONLY_OCCURENCE;
}

+ (id<JavaUtilConcurrentLocksLock>)mLock {
  return ComStSt25sdkCommandType4Command_mLock;
}

+ (jint)TYPE4_HEADER_SIZE {
  return ComStSt25sdkCommandType4Command_TYPE4_HEADER_SIZE;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                              withInt:(jint)maxRApduSize
                                              withInt:(jint)maxCApduSize {
  ComStSt25sdkCommandType4Command_initWithComStSt25sdkRFReaderInterface_withInt_withInt_(self, reader, maxRApduSize, maxCApduSize);
  return self;
}

- (void)setMaxRApduDataSizeWithInt:(jint)sizeInBytes {
  mMaxReadSizeInBytes_ = JavaLangMath_minWithInt_withInt_(sizeInBytes, mMaxReadSizeInBytes_);
}

- (void)setMaxCApduDataSizeWithInt:(jint)sizeInBytes {
  mMaxWriteSizeInBytes_ = JavaLangMath_minWithInt_withInt_(sizeInBytes, mMaxWriteSizeInBytes_);
}

- (jint)getMaxRApduDataSize {
  return mMaxReadSizeInBytes_;
}

- (jint)getMaxCApduDataSize {
  return mMaxWriteSizeInBytes_;
}

- (IOSByteArray *)selectWithByte:(jbyte)p1
                        withByte:(jbyte)p2
                   withByteArray:(IOSByteArray *)data {
  IOSByteArray *response;
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(data))->size_ + ComStSt25sdkCommandType4Command_TYPE4_HEADER_SIZE + 1];
  *IOSByteArray_GetRef(frame, 0) = (jbyte) (jint) 0x00;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandType4Command_TYPE4_CMD_SELECT;
  *IOSByteArray_GetRef(frame, 2) = p1;
  *IOSByteArray_GetRef(frame, 3) = p2;
  *IOSByteArray_GetRef(frame, 4) = (jbyte) data->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, frame, 5, data->size_);
  @try {
    response = [self transceiveWithNSString:@"select" withByteArray:frame];
    return response;
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

- (IOSByteArray *)selectNdefTagApplication {
  return [self selectNdefTagApplicationMappingVersion2];
}

- (IOSByteArray *)selectNdefTagApplicationMappingVersion2 {
  IOSByteArray *response;
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:7 + ComStSt25sdkCommandType4Command_TYPE4_HEADER_SIZE + 2];
  *IOSByteArray_GetRef(frame, 0) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandType4Command_TYPE4_CMD_SELECT;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandType4Command_TYPE4_CMD_SELECT_BY_NAME;
  *IOSByteArray_GetRef(frame, 3) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 4) = (jbyte) (jint) 0x07;
  *IOSByteArray_GetRef(frame, 5) = (jbyte) (jint) 0xD2;
  *IOSByteArray_GetRef(frame, 6) = (jbyte) (jint) 0x76;
  *IOSByteArray_GetRef(frame, 7) = (jbyte) (jint) 0x00;
  *IOSByteArray_GetRef(frame, 8) = (jbyte) (jint) 0x00;
  *IOSByteArray_GetRef(frame, 9) = (jbyte) (jint) 0x85;
  *IOSByteArray_GetRef(frame, 10) = (jbyte) (jint) 0x01;
  *IOSByteArray_GetRef(frame, 11) = (jbyte) (jint) 0x01;
  *IOSByteArray_GetRef(frame, 12) = (jbyte) (jint) 0x00;
  @try {
    response = [self transceiveWithNSString:@"Activate application MappingVersion2" withByteArray:frame];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
  return response;
}

- (IOSByteArray *)selectNdefTagApplicationMappingVersion1 {
  IOSByteArray *response;
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:7 + ComStSt25sdkCommandType4Command_TYPE4_HEADER_SIZE + 1];
  *IOSByteArray_GetRef(frame, 0) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandType4Command_TYPE4_CMD_SELECT;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandType4Command_TYPE4_CMD_SELECT_BY_NAME;
  *IOSByteArray_GetRef(frame, 3) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 4) = (jbyte) (jint) 0x07;
  *IOSByteArray_GetRef(frame, 5) = (jbyte) (jint) 0xD2;
  *IOSByteArray_GetRef(frame, 6) = (jbyte) (jint) 0x76;
  *IOSByteArray_GetRef(frame, 7) = (jbyte) (jint) 0x00;
  *IOSByteArray_GetRef(frame, 8) = (jbyte) (jint) 0x00;
  *IOSByteArray_GetRef(frame, 9) = (jbyte) (jint) 0x85;
  *IOSByteArray_GetRef(frame, 10) = (jbyte) (jint) 0x01;
  *IOSByteArray_GetRef(frame, 11) = (jbyte) (jint) 0x00;
  @try {
    response = [self transceiveWithNSString:@"Activate application MappingVersion1" withByteArray:frame];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
  return response;
}

- (IOSByteArray *)selectNdefTagApplicationSequence {
  @try {
    return [self selectNdefTagApplicationMappingVersion2];
  }
  @catch (ComStSt25sdkSTException *e) {
    return [self selectNdefTagApplicationMappingVersion1];
  }
}

- (IOSByteArray *)selectFileWithInt:(jint)fileId {
  IOSByteArray *response;
  IOSByteArray *data = ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(fileId);
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(data))->size_ + ComStSt25sdkCommandType4Command_TYPE4_HEADER_SIZE + 1];
  *IOSByteArray_GetRef(frame, 0) = (jbyte) (jint) 0x00;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandType4Command_TYPE4_CMD_SELECT;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandType4Command_TYPE4_CMD_SELECT_BY_FILE_ID;
  *IOSByteArray_GetRef(frame, 3) = ComStSt25sdkCommandType4Command_TYPE4_CMD_FIRST_OR_ONLY_OCCURENCE;
  *IOSByteArray_GetRef(frame, 4) = (jbyte) data->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, frame, 5, data->size_);
  @try {
    response = [self transceiveWithNSString:JreStrcat("$$", @"SelectFile 0x", ComStSt25sdkHelper_convertIntToHexFormatStringWithInt_(fileId)) withByteArray:frame];
    return response;
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

- (IOSByteArray *)updateBinaryWithByte:(jbyte)p1
                              withByte:(jbyte)p2
                         withByteArray:(IOSByteArray *)data {
  if (((IOSByteArray *) nil_chk(data))->size_ > mMaxWriteSizeInBytes_) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *response;
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:data->size_ + ComStSt25sdkCommandType4Command_TYPE4_HEADER_SIZE + 1];
  *IOSByteArray_GetRef(frame, 0) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandType4Command_TYPE4_CMD_UPDATE_BINARY;
  *IOSByteArray_GetRef(frame, 2) = p1;
  *IOSByteArray_GetRef(frame, 3) = p2;
  *IOSByteArray_GetRef(frame, 4) = (jbyte) data->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, frame, 5, data->size_);
  @try {
    response = [self transceiveWithNSString:@"updateBinary" withByteArray:frame];
    return response;
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

- (IOSByteArray *)readBinaryWithByte:(jbyte)p1
                            withByte:(jbyte)p2
                            withByte:(jbyte)length {
  if (ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(length) > mMaxReadSizeInBytes_) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *response;
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:1 + ComStSt25sdkCommandType4Command_TYPE4_HEADER_SIZE];
  *IOSByteArray_GetRef(frame, 0) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandType4Command_TYPE4_CMD_READ_BINARY;
  *IOSByteArray_GetRef(frame, 2) = p1;
  *IOSByteArray_GetRef(frame, 3) = p2;
  *IOSByteArray_GetRef(frame, 4) = length;
  @try {
    response = [self transceiveWithNSString:@"readBinary" withByteArray:frame];
    return response;
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

- (IOSByteArray *)readDataWithInt:(jint)fileOffset
                          withInt:(jint)sizeInBytes {
  IOSByteArray *response = nil;
  IOSByteArray *buffer;
  jint currentFileOffset = fileOffset;
  jint remainingDataToRead = sizeInBytes;
  jint dataChunktoRead;
  while (remainingDataToRead > 0) {
    dataChunktoRead = (remainingDataToRead > mMaxReadSizeInBytes_) ? mMaxReadSizeInBytes_ : remainingDataToRead;
    jbyte p1 = (jbyte) (JreRShift32((currentFileOffset & (jint) 0xFF00), 8));
    jbyte p2 = (jbyte) (currentFileOffset & (jint) 0xFF);
    jbyte length = (jbyte) (dataChunktoRead & (jint) 0xFF);
    buffer = [self readBinaryWithByte:p1 withByte:p2 withByte:length];
    if (response == nil) response = [IOSByteArray newArrayWithLength:sizeInBytes];
    if ((currentFileOffset - fileOffset) + (((IOSByteArray *) nil_chk(buffer))->size_ - 2) > sizeInBytes) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, response, (currentFileOffset - fileOffset), buffer->size_ - 2);
    currentFileOffset += dataChunktoRead;
    remainingDataToRead -= dataChunktoRead;
  }
  return response;
}

- (void)writeDataWithInt:(jint)fileOffset
           withByteArray:(IOSByteArray *)data {
  jint currentFileOffset = fileOffset;
  jint remainingDataToWrite = ((IOSByteArray *) nil_chk(data))->size_;
  jint dataChunktoWrite;
  jint offsetInSrcDataFile = 0;
  while (remainingDataToWrite > 0) {
    dataChunktoWrite = (remainingDataToWrite > mMaxWriteSizeInBytes_) ? mMaxWriteSizeInBytes_ : remainingDataToWrite;
    remainingDataToWrite -= dataChunktoWrite;
    IOSByteArray *buffer = [IOSByteArray newArrayWithLength:dataChunktoWrite];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, offsetInSrcDataFile, buffer, 0, buffer->size_);
    jbyte p1 = (jbyte) (JreRShift32((currentFileOffset & (jint) 0xFF00), 8));
    jbyte p2 = (jbyte) (currentFileOffset & (jint) 0xFF);
    (void) [self updateBinaryWithByte:p1 withByte:p2 withByteArray:buffer];
    offsetInSrcDataFile += dataChunktoWrite;
    currentFileOffset += dataChunktoWrite;
  }
}

- (IOSByteArray *)transceiveWithNSString:(NSString *)commandName
                           withByteArray:(IOSByteArray *)data {
  IOSByteArray *response = [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:[[self java_getClass] getSimpleName] withNSString:commandName withByteArray:data];
  if ([((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) getTransceiveMode] != JreLoadEnum(ComStSt25sdkRFReaderInterface_TransceiveMode, ISO14443A_TRANSPARENT) && [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) getTransceiveMode] != JreLoadEnum(ComStSt25sdkRFReaderInterface_TransceiveMode, ISO14443B_TRANSPARENT)) {
    ComStSt25sdkCommandIso7816Type4RApduStatus_checkErrorWithByteArray_(response);
  }
  return response;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 7, 2, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 5, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 9, 10, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 12, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 15, 16, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withInt:withInt:);
  methods[1].selector = @selector(setMaxRApduDataSizeWithInt:);
  methods[2].selector = @selector(setMaxCApduDataSizeWithInt:);
  methods[3].selector = @selector(getMaxRApduDataSize);
  methods[4].selector = @selector(getMaxCApduDataSize);
  methods[5].selector = @selector(selectWithByte:withByte:withByteArray:);
  methods[6].selector = @selector(selectNdefTagApplication);
  methods[7].selector = @selector(selectNdefTagApplicationMappingVersion2);
  methods[8].selector = @selector(selectNdefTagApplicationMappingVersion1);
  methods[9].selector = @selector(selectNdefTagApplicationSequence);
  methods[10].selector = @selector(selectFileWithInt:);
  methods[11].selector = @selector(updateBinaryWithByte:withByte:withByteArray:);
  methods[12].selector = @selector(readBinaryWithByte:withByte:withByte:);
  methods[13].selector = @selector(readDataWithInt:withInt:);
  methods[14].selector = @selector(writeDataWithInt:withByteArray:);
  methods[15].selector = @selector(transceiveWithNSString:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mReaderInterface_", "LComStSt25sdkRFReaderInterface;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transceiveMode_", "LComStSt25sdkRFReaderInterface_TransceiveMode;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "DBG", "Z", .constantValue.asBOOL = ComStSt25sdkCommandType4Command_DBG, 0x18, -1, -1, -1, -1 },
    { "TYPE4_CMD_SELECT", "B", .constantValue.asChar = ComStSt25sdkCommandType4Command_TYPE4_CMD_SELECT, 0x19, -1, -1, -1, -1 },
    { "TYPE4_CMD_READ_BINARY", "B", .constantValue.asChar = ComStSt25sdkCommandType4Command_TYPE4_CMD_READ_BINARY, 0x19, -1, -1, -1, -1 },
    { "TYPE4_CMD_UPDATE_BINARY", "B", .constantValue.asChar = ComStSt25sdkCommandType4Command_TYPE4_CMD_UPDATE_BINARY, 0x19, -1, -1, -1, -1 },
    { "TYPE4_CMD_SELECT_BY_FILE_ID", "B", .constantValue.asChar = ComStSt25sdkCommandType4Command_TYPE4_CMD_SELECT_BY_FILE_ID, 0x19, -1, -1, -1, -1 },
    { "TYPE4_CMD_SELECT_BY_NAME", "B", .constantValue.asChar = ComStSt25sdkCommandType4Command_TYPE4_CMD_SELECT_BY_NAME, 0x19, -1, -1, -1, -1 },
    { "TYPE4_CMD_FIRST_OR_ONLY_OCCURENCE", "B", .constantValue.asChar = ComStSt25sdkCommandType4Command_TYPE4_CMD_FIRST_OR_ONLY_OCCURENCE, 0x19, -1, -1, -1, -1 },
    { "mLock", "LJavaUtilConcurrentLocksLock;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "mMaxReadSizeInBytes_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mMaxWriteSizeInBytes_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "TYPE4_HEADER_SIZE", "I", .constantValue.asInt = ComStSt25sdkCommandType4Command_TYPE4_HEADER_SIZE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;II", "setMaxRApduDataSize", "I", "setMaxCApduDataSize", "select", "BB[B", "LComStSt25sdkSTException;", "selectFile", "updateBinary", "readBinary", "BBB", "readData", "II", "writeData", "I[B", "transceive", "LNSString;[B", &ComStSt25sdkCommandType4Command_mLock };
  static const J2ObjcClassInfo _ComStSt25sdkCommandType4Command = { "Type4Command", "com.st.st25sdk.command", ptrTable, methods, fields, 7, 0x1, 16, 13, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkCommandType4Command;
}

+ (void)initialize {
  if (self == [ComStSt25sdkCommandType4Command class]) {
    ComStSt25sdkCommandType4Command_mLock = new_JavaUtilConcurrentLocksReentrantLock_init();
    J2OBJC_SET_INITIALIZED(ComStSt25sdkCommandType4Command)
  }
}

@end

void ComStSt25sdkCommandType4Command_initWithComStSt25sdkRFReaderInterface_withInt_withInt_(ComStSt25sdkCommandType4Command *self, id<ComStSt25sdkRFReaderInterface> reader, jint maxRApduSize, jint maxCApduSize) {
  NSObject_init(self);
  self->mReaderInterface_ = reader;
  self->mMaxReadSizeInBytes_ = maxRApduSize;
  self->mMaxWriteSizeInBytes_ = maxCApduSize;
}

ComStSt25sdkCommandType4Command *new_ComStSt25sdkCommandType4Command_initWithComStSt25sdkRFReaderInterface_withInt_withInt_(id<ComStSt25sdkRFReaderInterface> reader, jint maxRApduSize, jint maxCApduSize) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandType4Command, initWithComStSt25sdkRFReaderInterface_withInt_withInt_, reader, maxRApduSize, maxCApduSize)
}

ComStSt25sdkCommandType4Command *create_ComStSt25sdkCommandType4Command_initWithComStSt25sdkRFReaderInterface_withInt_withInt_(id<ComStSt25sdkRFReaderInterface> reader, jint maxRApduSize, jint maxCApduSize) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandType4Command, initWithComStSt25sdkRFReaderInterface_withInt_withInt_, reader, maxRApduSize, maxCApduSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandType4Command)
