//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/command/Iso15693CustomCommandInterface.java
//

#include "J2ObjC_source.h"
#include "com/st/st25sdk/command/Iso15693CustomCommandInterface.h"

@interface ComStSt25sdkCommandIso15693CustomCommandInterface : NSObject

@end

@implementation ComStSt25sdkCommandIso15693CustomCommandInterface

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "B", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 3, 1, 2, -1, -1, -1 },
    { NULL, "B", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 4, 5, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 4, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 7, 6, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 7, 8, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 7, 9, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 7, 10, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 11, 5, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 12, 5, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 13, 6, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 14, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 15, 8, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 16, 8, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 17, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 18, 5, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 19, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 20, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 21, 22, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 23, 10, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 24, 10, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 25, 10, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 26, 8, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 27, 8, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 28, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 29, 8, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 30, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 31, 10, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 32, 1, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 33, 34, 2, -1, -1, -1 },
    { NULL, "B", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "B", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "B", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 35, 1, 2, -1, -1, -1 },
    { NULL, "B", 0x401, 36, 5, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 37, 8, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 38, 5, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 39, 5, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 39, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 39, 10, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 39, 40, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 41, 5, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 42, 5, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 42, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 42, 10, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 42, 40, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 43, 9, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 43, 44, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 43, 45, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 43, 46, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 47, 9, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 47, 44, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 47, 45, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 47, 46, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(killWithByteArray:);
  methods[1].selector = @selector(writeKillWithByteArray:);
  methods[2].selector = @selector(lockKill);
  methods[3].selector = @selector(readConfigWithByte:);
  methods[4].selector = @selector(readConfigWithByte:withByte:);
  methods[5].selector = @selector(readCfg);
  methods[6].selector = @selector(writeConfigWithByte:withByte:);
  methods[7].selector = @selector(writeConfigWithByte:withByteArray:);
  methods[8].selector = @selector(writeConfigWithByte:withByte:withByte:);
  methods[9].selector = @selector(writeConfigWithByte:withByte:withByteArray:);
  methods[10].selector = @selector(readDynConfigWithByte:);
  methods[11].selector = @selector(fastReadDynConfigWithByte:);
  methods[12].selector = @selector(writeDynConfigWithByte:withByte:);
  methods[13].selector = @selector(fastWriteDynConfigWithByte:withByte:);
  methods[14].selector = @selector(getRandomNumber);
  methods[15].selector = @selector(writePwdWithByte:withByteArray:);
  methods[16].selector = @selector(presentPwdWithByte:withByteArray:);
  methods[17].selector = @selector(lockSectorWithByte:withByte:);
  methods[18].selector = @selector(fastReadSingleBlockWithByte:);
  methods[19].selector = @selector(fastReadMultipleBlockWithByte:withByte:);
  methods[20].selector = @selector(fastExtendedReadSingleBlockWithByteArray:);
  methods[21].selector = @selector(fastExtendedReadMultipleBlockWithByteArray:withByteArray:);
  methods[22].selector = @selector(writeEHCfgWithByte:withByte:withByteArray:);
  methods[23].selector = @selector(writeDOCfgWithByte:withByte:withByteArray:);
  methods[24].selector = @selector(setRstEHEnWithByte:withByte:withByteArray:);
  methods[25].selector = @selector(checkEHEnWithByte:withByteArray:);
  methods[26].selector = @selector(writeMsgWithByte:withByteArray:);
  methods[27].selector = @selector(readMsgWithByte:withByte:);
  methods[28].selector = @selector(readMsgLength);
  methods[29].selector = @selector(fastWriteMsgWithByte:withByteArray:);
  methods[30].selector = @selector(fastReadMsgWithByte:withByte:);
  methods[31].selector = @selector(fastReadMsgLength);
  methods[32].selector = @selector(manageGpoWithByte:withByte:withByteArray:);
  methods[33].selector = @selector(enableUntraceableModeWithByteArray:);
  methods[34].selector = @selector(toggleUntraceableModeWithByteArray:withInt:);
  methods[35].selector = @selector(setEas);
  methods[36].selector = @selector(resetEas);
  methods[37].selector = @selector(lockEas);
  methods[38].selector = @selector(enableEAS);
  methods[39].selector = @selector(writeEasIdWithByteArray:);
  methods[40].selector = @selector(writeEasConfigWithByte:);
  methods[41].selector = @selector(readSignature);
  methods[42].selector = @selector(readSignatureWithByte:withByteArray:);
  methods[43].selector = @selector(initiateWithByte:);
  methods[44].selector = @selector(inventoryInitiatedWithByte:);
  methods[45].selector = @selector(inventoryInitiatedWithByte:withByte:);
  methods[46].selector = @selector(inventoryInitiatedWithByte:withByte:withByteArray:);
  methods[47].selector = @selector(inventoryInitiatedWithByte:withByte:withByteArray:withByte:);
  methods[48].selector = @selector(fastInitiateWithByte:);
  methods[49].selector = @selector(fastInventoryInitiatedWithByte:);
  methods[50].selector = @selector(fastInventoryInitiatedWithByte:withByte:);
  methods[51].selector = @selector(fastInventoryInitiatedWithByte:withByte:withByteArray:);
  methods[52].selector = @selector(fastInventoryInitiatedWithByte:withByte:withByteArray:withByte:);
  methods[53].selector = @selector(inventoryReadWithByte:withByte:withByte:);
  methods[54].selector = @selector(inventoryReadWithByte:withByte:withByte:withByte:);
  methods[55].selector = @selector(inventoryReadWithByte:withByte:withByteArray:withByte:withByte:);
  methods[56].selector = @selector(inventoryReadWithByte:withByte:withByteArray:withByte:withByte:withByte:);
  methods[57].selector = @selector(fastInventoryReadWithByte:withByte:withByte:);
  methods[58].selector = @selector(fastInventoryReadWithByte:withByte:withByte:withByte:);
  methods[59].selector = @selector(fastInventoryReadWithByte:withByte:withByteArray:withByte:withByte:);
  methods[60].selector = @selector(fastInventoryReadWithByte:withByte:withByteArray:withByte:withByte:withByte:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "kill", "[B", "LComStSt25sdkSTException;", "writeKill", "readConfig", "B", "BB", "writeConfig", "B[B", "BBB", "BB[B", "readDynConfig", "fastReadDynConfig", "writeDynConfig", "fastWriteDynConfig", "writePwd", "presentPwd", "lockSector", "fastReadSingleBlock", "fastReadMultipleBlock", "fastExtendedReadSingleBlock", "fastExtendedReadMultipleBlock", "[B[B", "writeEHCfg", "writeDOCfg", "setRstEHEn", "checkEHEn", "writeMsg", "readMsg", "fastWriteMsg", "fastReadMsg", "manageGpo", "enableUntraceableMode", "toggleUntraceableMode", "[BI", "writeEasId", "writeEasConfig", "readSignature", "initiate", "inventoryInitiated", "BB[BB", "fastInitiate", "fastInventoryInitiated", "inventoryRead", "BBBB", "BB[BBB", "BB[BBBB", "fastInventoryRead" };
  static const J2ObjcClassInfo _ComStSt25sdkCommandIso15693CustomCommandInterface = { "Iso15693CustomCommandInterface", "com.st.st25sdk.command", ptrTable, methods, NULL, 7, 0x609, 61, 0, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkCommandIso15693CustomCommandInterface;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandIso15693CustomCommandInterface)
