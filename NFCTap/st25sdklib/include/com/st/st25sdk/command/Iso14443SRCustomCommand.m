//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/command/Iso14443SRCustomCommand.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/command/Iso14443SRCustomCommand.h"
#include "com/st/st25sdk/iso14443sr/STIso14443SRTag.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"

@interface ComStSt25sdkCommandIso14443SRCustomCommand () {
 @public
  jint mNbrOfBytesPerBlock_;
}

@end

@implementation ComStSt25sdkCommandIso14443SRCustomCommand

+ (jint)ISO14443SR_CUSTOM_CMD_INITIATE {
  return ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_INITIATE;
}

+ (jint)ISO14443SR_CUSTOM_CMD_PCALL16 {
  return ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_PCALL16;
}

+ (jint)ISO14443SR_CUSTOM_CMD_SLOT_MARKER {
  return ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_SLOT_MARKER;
}

+ (jint)ISO14443SR_CUSTOM_CMD_SELECT {
  return ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_SELECT;
}

+ (jint)ISO14443SR_CUSTOM_CMD_COMPLETION {
  return ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_COMPLETION;
}

+ (jint)ISO14443SR_CUSTOM_CMD_RESET_TO_INVENTORY {
  return ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_RESET_TO_INVENTORY;
}

+ (jint)ISO14443SR_CUSTOM_CMD_READ_BLOCK {
  return ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_READ_BLOCK;
}

+ (jint)ISO14443SR_CUSTOM_CMD_WRITE_BLOCK {
  return ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_WRITE_BLOCK;
}

+ (jint)ISO14443SR_CUSTOM_CMD_GET_UID {
  return ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_GET_UID;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader {
  ComStSt25sdkCommandIso14443SRCustomCommand_initWithComStSt25sdkRFReaderInterface_(self, reader);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                              withInt:(jint)nbrOfBytesPerBlock {
  ComStSt25sdkCommandIso14443SRCustomCommand_initWithComStSt25sdkRFReaderInterface_withInt_(self, reader, nbrOfBytesPerBlock);
  return self;
}

- (jbyte)initiate {
  IOSByteArray *frame;
  IOSByteArray *response;
  frame = [IOSByteArray newArrayWithLength:2];
  *IOSByteArray_GetRef(frame, 0) = JreRShift32((ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_INITIATE & (jint) 0xFF00), 8);
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_INITIATE & (jint) 0x00FF;
  response = [self transceiveWithNSString:@"sr_Initiate" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)pCall16 {
  IOSByteArray *frame;
  IOSByteArray *response;
  frame = [IOSByteArray newArrayWithLength:2];
  *IOSByteArray_GetRef(frame, 0) = JreRShift32((ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_PCALL16 & (jint) 0xFF00), 8);
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_PCALL16 & (jint) 0x00FF;
  response = [self transceiveWithNSString:@"sr_Pcall16" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)slotMarkerWithByte:(jbyte)slotNumber {
  IOSByteArray *frame;
  IOSByteArray *response;
  frame = [IOSByteArray newArrayWithLength:1];
  jbyte slotNumberValue = (jbyte) (slotNumber & (jint) 0x0F);
  *IOSByteArray_GetRef(frame, 0) = (jbyte) (ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_SLOT_MARKER | (JreLShift32(slotNumberValue, 4)));
  response = [self transceiveWithNSString:JreStrcat("$$", @"sr_slotMarker", JavaLangInteger_toStringWithInt_(slotNumberValue)) withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)selectWithByte:(jbyte)chipID {
  IOSByteArray *frame;
  IOSByteArray *response;
  frame = [IOSByteArray newArrayWithLength:2];
  *IOSByteArray_GetRef(frame, 0) = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_SELECT;
  *IOSByteArray_GetRef(frame, 1) = chipID;
  response = [self transceiveWithNSString:@"sr_Select" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (void)completion {
  IOSByteArray *frame;
  frame = [IOSByteArray newArrayWithLength:1];
  *IOSByteArray_GetRef(frame, 0) = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_COMPLETION;
  @try {
    (void) [self transceiveWithNSString:@"sr_Completion" withByteArray:frame];
  }
  @catch (ComStSt25sdkSTException *e) {
    if (([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_NO_RESPONSE)) && ([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, TAG_NOT_IN_THE_FIELD))) {
      @throw (e);
    }
  }
}

- (void)resetToInventory {
  IOSByteArray *frame;
  frame = [IOSByteArray newArrayWithLength:1];
  *IOSByteArray_GetRef(frame, 0) = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_RESET_TO_INVENTORY;
  @try {
    (void) [self transceiveWithNSString:@"sr_Reset_to_inventory" withByteArray:frame];
  }
  @catch (ComStSt25sdkSTException *e) {
    if (([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_NO_RESPONSE)) && ([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, TAG_NOT_IN_THE_FIELD))) {
      @throw (e);
    }
  }
}

- (IOSByteArray *)getUid {
  IOSByteArray *frame;
  frame = [IOSByteArray newArrayWithLength:1];
  *IOSByteArray_GetRef(frame, 0) = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_GET_UID;
  return [self transceiveWithNSString:@"sr_getUID" withByteArray:frame];
}

- (IOSByteArray *)readBlockWithByte:(jbyte)blockAddress {
  IOSByteArray *frame;
  frame = [IOSByteArray newArrayWithLength:2];
  *IOSByteArray_GetRef(frame, 0) = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_READ_BLOCK;
  *IOSByteArray_GetRef(frame, 1) = blockAddress;
  return [self transceiveWithNSString:@"sr_Read_block" withByteArray:frame];
}

- (void)writeBlockWithByte:(jbyte)blockAddress
             withByteArray:(IOSByteArray *)buffer {
  IOSByteArray *frame;
  frame = [IOSByteArray newArrayWithLength:2 + ((IOSByteArray *) nil_chk(buffer))->size_];
  *IOSByteArray_GetRef(frame, 0) = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_WRITE_BLOCK;
  *IOSByteArray_GetRef(frame, 1) = blockAddress;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, frame, 2, buffer->size_);
  @try {
    (void) [self transceiveWithNSString:@"sr_Write_block" withByteArray:frame];
  }
  @catch (ComStSt25sdkSTException *e) {
    if (([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_NO_RESPONSE)) && ([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, TAG_NOT_IN_THE_FIELD))) {
      @throw (e);
    }
  }
}

- (IOSByteArray *)readBlocksWithByte:(jbyte)firstBlockAddress
                            withByte:(jbyte)sizeInBlocks {
  JavaIoByteArrayOutputStream *responseByteArray = new_JavaIoByteArrayOutputStream_init();
  @try {
    for (jbyte blockIndex = firstBlockAddress; blockIndex < firstBlockAddress + sizeInBlocks; blockIndex++) {
      IOSByteArray *tmp = [self readBlockWithByte:blockIndex];
      [responseByteArray writeWithByteArray:tmp];
    }
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
  return [responseByteArray toByteArray];
}

- (void)writeBlocksWithByte:(jbyte)firstBlockAddress
              withByteArray:(IOSByteArray *)data {
  if (((IOSByteArray *) nil_chk(data))->size_ % mNbrOfBytesPerBlock_ != 0) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  for (jbyte writtenDataIndex = 0, blockIndex = firstBlockAddress; blockIndex < firstBlockAddress + data->size_ / mNbrOfBytesPerBlock_; blockIndex++) {
    IOSByteArray *tmp = JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(data, writtenDataIndex, writtenDataIndex + mNbrOfBytesPerBlock_);
    [self writeBlockWithByte:blockIndex withByteArray:tmp];
    writtenDataIndex += mNbrOfBytesPerBlock_;
  }
}

- (IOSByteArray *)anticollisionIso14443SR {
  JavaIoByteArrayOutputStream *chipIdArray = new_JavaIoByteArrayOutputStream_init();
  [self resetToInventory];
  [self initiate];
  @try {
    [chipIdArray writeWithInt:[self pCall16]];
  }
  @catch (ComStSt25sdkSTException *e) {
    if (([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_NO_RESPONSE)) && ([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, TAG_NOT_IN_THE_FIELD))) {
      @throw (e);
    }
  }
  for (jbyte slotNumber = 1; slotNumber < 16; slotNumber++) {
    @try {
      [chipIdArray writeWithInt:[self slotMarkerWithByte:slotNumber]];
    }
    @catch (ComStSt25sdkSTException *e) {
      if (([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_NO_RESPONSE)) && ([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, TAG_NOT_IN_THE_FIELD))) {
        @throw (e);
      }
    }
  }
  return [chipIdArray toByteArray];
}

- (IOSByteArray *)decrementCounterWithByte:(jbyte)counterAddress
                                   withInt:(jint)decrementValue {
  IOSByteArray *counterData;
  counterData = [IOSByteArray newArrayWithLength:4];
  counterData = [self readBlocksWithByte:counterAddress withByte:(jbyte) (jint) 0x01];
  if (((IOSByteArray *) nil_chk(counterData))->size_ == 4) {
    jint counterValue = JreLShift32((IOSByteArray_Get(counterData, 3) & (jint) 0xFF), 24);
    counterValue += JreLShift32((IOSByteArray_Get(counterData, 2) & (jint) 0xFF), 16);
    counterValue += JreLShift32((IOSByteArray_Get(counterData, 1) & (jint) 0xFF), 8);
    counterValue += (IOSByteArray_Get(counterData, 0) & (jint) 0xFF);
    counterValue -= decrementValue;
    *IOSByteArray_GetRef(counterData, 3) = (jbyte) ((JreRShift32(counterValue, 24)) & (jint) 0xFF);
    *IOSByteArray_GetRef(counterData, 2) = (jbyte) ((JreRShift32(counterValue, 16)) & (jint) 0xFF);
    *IOSByteArray_GetRef(counterData, 1) = (jbyte) ((JreRShift32(counterValue, 8)) & (jint) 0xFF);
    *IOSByteArray_GetRef(counterData, 0) = (jbyte) (counterValue & (jint) 0xFF);
    [self writeBlocksWithByte:counterAddress withByteArray:counterData];
    IOSByteArray *decrementedCounterData;
    decrementedCounterData = [IOSByteArray newArrayWithLength:4];
    decrementedCounterData = [self readBlocksWithByte:counterAddress withByte:(jbyte) (jint) 0x01];
    if (((IOSByteArray *) nil_chk(decrementedCounterData))->size_ == 4) {
      return decrementedCounterData;
    }
    else {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
    }
  }
  else {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
  }
}

- (IOSByteArray *)decrementReloadCounterWithInt:(jint)decrementValue {
  IOSByteArray *counterData;
  counterData = [IOSByteArray newArrayWithLength:4];
  counterData = [self readBlocksWithByte:(jbyte) (jint) 0x06 withByte:(jbyte) (jint) 0x01];
  if (((IOSByteArray *) nil_chk(counterData))->size_ == 4) {
    jint reloadCounterValue = JreLShift32((IOSByteArray_Get(counterData, 3) & (jint) 0xFF), 3);
    reloadCounterValue += (JreRShift32(IOSByteArray_Get(counterData, 2), 5)) & (jint) 0x07;
    reloadCounterValue -= decrementValue;
    *IOSByteArray_GetRef(counterData, 3) = (jbyte) ((JreRShift32(reloadCounterValue, 3)) & (jint) 0xFF);
    *IOSByteArray_GetRef(counterData, 2) = (jbyte) (((JreLShift32(reloadCounterValue, 5)) & (jint) 0xE0) + (IOSByteArray_Get(counterData, 2) & (jint) 0x1F));
    [self writeBlocksWithByte:(jbyte) (jint) 0x06 withByteArray:counterData];
    IOSByteArray *decrementedReloadCounterData;
    decrementedReloadCounterData = [IOSByteArray newArrayWithLength:4];
    decrementedReloadCounterData = [self readBlocksWithByte:(jbyte) (jint) 0x06 withByte:(jbyte) (jint) 0x01];
    if (((IOSByteArray *) nil_chk(decrementedReloadCounterData))->size_ == 4) {
      return decrementedReloadCounterData;
    }
    else {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
    }
  }
  else {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
  }
}

- (IOSByteArray *)transceiveWithNSString:(NSString *)commandName
                           withByteArray:(IOSByteArray *)data {
  @try {
    return [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:[[self java_getClass] getSimpleName] withNSString:commandName withByteArray:data];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "B", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "B", 0x1, 5, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 6, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 9, 10, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 8, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 13, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 14, 15, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 16, 17, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:);
  methods[1].selector = @selector(initWithComStSt25sdkRFReaderInterface:withInt:);
  methods[2].selector = @selector(initiate);
  methods[3].selector = @selector(pCall16);
  methods[4].selector = @selector(slotMarkerWithByte:);
  methods[5].selector = @selector(selectWithByte:);
  methods[6].selector = @selector(completion);
  methods[7].selector = @selector(resetToInventory);
  methods[8].selector = @selector(getUid);
  methods[9].selector = @selector(readBlockWithByte:);
  methods[10].selector = @selector(writeBlockWithByte:withByteArray:);
  methods[11].selector = @selector(readBlocksWithByte:withByte:);
  methods[12].selector = @selector(writeBlocksWithByte:withByteArray:);
  methods[13].selector = @selector(anticollisionIso14443SR);
  methods[14].selector = @selector(decrementCounterWithByte:withInt:);
  methods[15].selector = @selector(decrementReloadCounterWithInt:);
  methods[16].selector = @selector(transceiveWithNSString:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mReaderInterface_", "LComStSt25sdkRFReaderInterface;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ISO14443SR_CUSTOM_CMD_INITIATE", "I", .constantValue.asInt = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_INITIATE, 0x1c, -1, -1, -1, -1 },
    { "ISO14443SR_CUSTOM_CMD_PCALL16", "I", .constantValue.asInt = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_PCALL16, 0x1c, -1, -1, -1, -1 },
    { "ISO14443SR_CUSTOM_CMD_SLOT_MARKER", "I", .constantValue.asInt = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_SLOT_MARKER, 0x1c, -1, -1, -1, -1 },
    { "ISO14443SR_CUSTOM_CMD_SELECT", "I", .constantValue.asInt = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_SELECT, 0x1c, -1, -1, -1, -1 },
    { "ISO14443SR_CUSTOM_CMD_COMPLETION", "I", .constantValue.asInt = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_COMPLETION, 0x1c, -1, -1, -1, -1 },
    { "ISO14443SR_CUSTOM_CMD_RESET_TO_INVENTORY", "I", .constantValue.asInt = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_RESET_TO_INVENTORY, 0x1c, -1, -1, -1, -1 },
    { "ISO14443SR_CUSTOM_CMD_READ_BLOCK", "I", .constantValue.asInt = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_READ_BLOCK, 0x1c, -1, -1, -1, -1 },
    { "ISO14443SR_CUSTOM_CMD_WRITE_BLOCK", "I", .constantValue.asInt = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_WRITE_BLOCK, 0x1c, -1, -1, -1, -1 },
    { "ISO14443SR_CUSTOM_CMD_GET_UID", "I", .constantValue.asInt = ComStSt25sdkCommandIso14443SRCustomCommand_ISO14443SR_CUSTOM_CMD_GET_UID, 0x1c, -1, -1, -1, -1 },
    { "mNbrOfBytesPerBlock_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;", "LComStSt25sdkRFReaderInterface;I", "LComStSt25sdkSTException;", "slotMarker", "B", "select", "readBlock", "writeBlock", "B[B", "readBlocks", "BB", "writeBlocks", "decrementCounter", "BI", "decrementReloadCounter", "I", "transceive", "LNSString;[B" };
  static const J2ObjcClassInfo _ComStSt25sdkCommandIso14443SRCustomCommand = { "Iso14443SRCustomCommand", "com.st.st25sdk.command", ptrTable, methods, fields, 7, 0x1, 17, 11, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkCommandIso14443SRCustomCommand;
}

@end

void ComStSt25sdkCommandIso14443SRCustomCommand_initWithComStSt25sdkRFReaderInterface_(ComStSt25sdkCommandIso14443SRCustomCommand *self, id<ComStSt25sdkRFReaderInterface> reader) {
  ComStSt25sdkCommandIso14443SRCustomCommand_initWithComStSt25sdkRFReaderInterface_withInt_(self, reader, ComStSt25sdkIso14443srSTIso14443SRTag_DEFAULT_NBR_OF_BYTES_PER_BLOCK);
}

ComStSt25sdkCommandIso14443SRCustomCommand *new_ComStSt25sdkCommandIso14443SRCustomCommand_initWithComStSt25sdkRFReaderInterface_(id<ComStSt25sdkRFReaderInterface> reader) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandIso14443SRCustomCommand, initWithComStSt25sdkRFReaderInterface_, reader)
}

ComStSt25sdkCommandIso14443SRCustomCommand *create_ComStSt25sdkCommandIso14443SRCustomCommand_initWithComStSt25sdkRFReaderInterface_(id<ComStSt25sdkRFReaderInterface> reader) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandIso14443SRCustomCommand, initWithComStSt25sdkRFReaderInterface_, reader)
}

void ComStSt25sdkCommandIso14443SRCustomCommand_initWithComStSt25sdkRFReaderInterface_withInt_(ComStSt25sdkCommandIso14443SRCustomCommand *self, id<ComStSt25sdkRFReaderInterface> reader, jint nbrOfBytesPerBlock) {
  NSObject_init(self);
  self->mReaderInterface_ = reader;
  self->mNbrOfBytesPerBlock_ = nbrOfBytesPerBlock;
}

ComStSt25sdkCommandIso14443SRCustomCommand *new_ComStSt25sdkCommandIso14443SRCustomCommand_initWithComStSt25sdkRFReaderInterface_withInt_(id<ComStSt25sdkRFReaderInterface> reader, jint nbrOfBytesPerBlock) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandIso14443SRCustomCommand, initWithComStSt25sdkRFReaderInterface_withInt_, reader, nbrOfBytesPerBlock)
}

ComStSt25sdkCommandIso14443SRCustomCommand *create_ComStSt25sdkCommandIso14443SRCustomCommand_initWithComStSt25sdkRFReaderInterface_withInt_(id<ComStSt25sdkRFReaderInterface> reader, jint nbrOfBytesPerBlock) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandIso14443SRCustomCommand, initWithComStSt25sdkRFReaderInterface_withInt_, reader, nbrOfBytesPerBlock)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandIso14443SRCustomCommand)
