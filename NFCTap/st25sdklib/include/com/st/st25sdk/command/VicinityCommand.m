//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/command/VicinityCommand.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/command/Iso15693Command.h"
#include "com/st/st25sdk/command/Iso15693CustomCommand.h"
#include "com/st/st25sdk/command/Iso15693Protocol.h"
#include "com/st/st25sdk/command/VicinityCommand.h"
#include "com/st/st25sdk/type5/Type5Tag.h"
#include "java/lang/System.h"

@implementation ComStSt25sdkCommandVicinityCommand

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, reader, uid);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                             withByte:(jbyte)flag {
  ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(self, reader, uid, flag);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                              withInt:(jint)nbrOfBytesPerBlock {
  ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(self, reader, uid, nbrOfBytesPerBlock);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                             withByte:(jbyte)flag
                                              withInt:(jint)nbrOfBytesPerBlock {
  ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, flag, nbrOfBytesPerBlock);
  return self;
}

- (IOSByteArray *)readSingleBlockWithByteArray:(IOSByteArray *)blockAddress {
  return [self readSingleBlockWithByteArray:blockAddress withByte:[self getFlag] withByteArray:[self getUid]];
}

- (IOSByteArray *)readSingleBlockWithByteArray:(IOSByteArray *)blockAddress
                                      withByte:(jbyte)flag
                                 withByteArray:(IOSByteArray *)uid {
  IOSByteArray *request;
  jint header_size;
  if ((blockAddress == nil) || (((IOSByteArray *) nil_chk(blockAddress))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  header_size = [self getIso15693HeaderSizeWithByte:flag];
  request = [IOSByteArray newArrayWithLength:header_size + 2];
  *IOSByteArray_GetRef(request, 0) = flag;
  *IOSByteArray_GetRef(request, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_READ_SINGLE_BLOCK;
  *IOSByteArray_GetRef(request, header_size) = IOSByteArray_Get(nil_chk(blockAddress), 1);
  *IOSByteArray_GetRef(request, header_size + 1) = IOSByteArray_Get(blockAddress, 0);
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:request withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  return [self transceiveWithNSString:@"readSingleBlockVicinity" withByteArray:request];
}

- (jbyte)writeSingleBlockWithByteArray:(IOSByteArray *)blockAddress
                         withByteArray:(IOSByteArray *)buffer {
  return [self writeSingleBlockWithByteArray:blockAddress withByteArray:buffer withByte:[self getFlag] withByteArray:[self getUid]];
}

- (jbyte)writeSingleBlockWithByteArray:(IOSByteArray *)blockAddress
                         withByteArray:(IOSByteArray *)buffer
                              withByte:(jbyte)flag
                         withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *request;
  jint header_size;
  if ((buffer == nil) || (blockAddress == nil) || (((IOSByteArray *) nil_chk(blockAddress))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  header_size = [self getIso15693HeaderSizeWithByte:flag];
  request = [IOSByteArray newArrayWithLength:header_size + 2 + ((IOSByteArray *) nil_chk(buffer))->size_];
  *IOSByteArray_GetRef(request, 0) = flag;
  *IOSByteArray_GetRef(request, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_WRITE_SINGLE_BLOCK;
  *IOSByteArray_GetRef(request, header_size) = IOSByteArray_Get(nil_chk(blockAddress), 1);
  *IOSByteArray_GetRef(request, header_size + 1) = IOSByteArray_Get(blockAddress, 0);
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:request withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, request, header_size + 2, buffer->size_);
  response = [self transceiveWithNSString:@"writeSingleBlockVicinity" withByteArray:request];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (IOSByteArray *)readMultipleBlockWithByteArray:(IOSByteArray *)blockAddress
                                        withByte:(jbyte)nbrOfBlocks {
  return [self readMultipleBlockWithByteArray:blockAddress withByte:nbrOfBlocks withByte:[self getFlag] withByteArray:[self getUid]];
}

- (IOSByteArray *)readMultipleBlockWithByteArray:(IOSByteArray *)blockAddress
                                        withByte:(jbyte)nbrOfBlocks
                                        withByte:(jbyte)flag
                                   withByteArray:(IOSByteArray *)uid {
  IOSByteArray *request;
  jint header_size;
  if ((blockAddress == nil) || (((IOSByteArray *) nil_chk(blockAddress))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  header_size = [self getIso15693HeaderSizeWithByte:flag];
  request = [IOSByteArray newArrayWithLength:header_size + 2 + 1];
  *IOSByteArray_GetRef(request, 0) = flag;
  *IOSByteArray_GetRef(request, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_READ_MULTIPLE_BLOCK;
  *IOSByteArray_GetRef(request, header_size) = IOSByteArray_Get(nil_chk(blockAddress), 1);
  *IOSByteArray_GetRef(request, header_size + 1) = IOSByteArray_Get(blockAddress, 0);
  *IOSByteArray_GetRef(request, header_size + 2) = nbrOfBlocks;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:request withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  return [self transceiveWithNSString:@"readMultipleBlockVicinity" withByteArray:request];
}

- (IOSByteArray *)getSystemInfo {
  return [self getSystemInfoWithByte:[self getFlag] withByteArray:[self getUid]];
}

- (IOSByteArray *)getSystemInfoWithByte:(jbyte)flag
                          withByteArray:(IOSByteArray *)uid {
  IOSByteArray *request;
  jint header_size;
  header_size = [self getIso15693HeaderSizeWithByte:flag];
  request = [IOSByteArray newArrayWithLength:header_size];
  *IOSByteArray_GetRef(request, 0) = flag;
  *IOSByteArray_GetRef(request, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_GET_SYSTEM_INFO;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:request withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  return [self transceiveWithNSString:@"getSystemInfoVicinity" withByteArray:request];
}

- (jbyte)lockSectorWithByteArray:(IOSByteArray *)blockAddress
                        withByte:(jbyte)securityStatus {
  return [self lockSectorWithByteArray:blockAddress withByte:securityStatus withByte:[self getFlag] withByteArray:[self getUid]];
}

- (jbyte)lockSectorWithByteArray:(IOSByteArray *)blockAddress
                        withByte:(jbyte)securityStatus
                        withByte:(jbyte)flag
                   withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *request;
  jint header_size;
  if ((blockAddress == nil) || (((IOSByteArray *) nil_chk(blockAddress))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  header_size = [self getIso15693CustomHeaderSizeWithByte:flag];
  request = [IOSByteArray newArrayWithLength:header_size + 2 + 1];
  *IOSByteArray_GetRef(request, 0) = flag;
  *IOSByteArray_GetRef(request, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_LOCK_SECTOR;
  *IOSByteArray_GetRef(request, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:request withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(request, header_size) = IOSByteArray_Get(nil_chk(blockAddress), 1);
  *IOSByteArray_GetRef(request, header_size + 1) = IOSByteArray_Get(blockAddress, 0);
  *IOSByteArray_GetRef(request, header_size + 2) = securityStatus;
  response = [self transceiveWithNSString:@"lockSectorVicinity" withByteArray:request];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (IOSByteArray *)getMultipleBlockSecStatusWithByteArray:(IOSByteArray *)firstBlock
                                           withByteArray:(IOSByteArray *)nbOfBlocks {
  return [self getMultipleBlockSecStatusWithByteArray:firstBlock withByteArray:nbOfBlocks withByte:[self getFlag] withByteArray:[self getUid]];
}

- (IOSByteArray *)getMultipleBlockSecStatusWithByteArray:(IOSByteArray *)firstBlock
                                           withByteArray:(IOSByteArray *)nbrOfBlocks
                                                withByte:(jbyte)flag
                                           withByteArray:(IOSByteArray *)uid {
  IOSByteArray *request;
  jint header_size;
  if ((firstBlock == nil) || (((IOSByteArray *) nil_chk(firstBlock))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ((nbrOfBlocks == nil) || (((IOSByteArray *) nil_chk(nbrOfBlocks))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  header_size = [self getIso15693HeaderSizeWithByte:flag];
  request = [IOSByteArray newArrayWithLength:header_size + 2 + 2];
  *IOSByteArray_GetRef(request, 0) = flag;
  *IOSByteArray_GetRef(request, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_GET_MULTIPLE_BLOCK_SEC_STATUS;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:request withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(request, header_size) = IOSByteArray_Get(nil_chk(firstBlock), 1);
  *IOSByteArray_GetRef(request, header_size + 1) = IOSByteArray_Get(firstBlock, 0);
  *IOSByteArray_GetRef(request, header_size + 2) = IOSByteArray_Get(nil_chk(nbrOfBlocks), 1);
  *IOSByteArray_GetRef(request, header_size + 3) = IOSByteArray_Get(nbrOfBlocks, 0);
  return [self transceiveWithNSString:@"getMultipleBlockSecStatusVicinity" withByteArray:request];
}

- (IOSByteArray *)fastReadSingleBlockWithByte:(jbyte)blockOffset {
  IOSByteArray *blockAddress = [IOSByteArray newArrayWithLength:2];
  *IOSByteArray_GetRef(blockAddress, 0) = blockOffset;
  *IOSByteArray_GetRef(blockAddress, 1) = (jint) 0x00;
  return [self fastReadSingleBlockWithByteArray:blockAddress];
}

- (IOSByteArray *)fastReadSingleBlockWithByteArray:(IOSByteArray *)blockAddress {
  return [self fastReadSingleBlockWithByteArray:blockAddress withByte:[self getFlag] withByteArray:[self getUid]];
}

- (IOSByteArray *)fastReadSingleBlockWithByteArray:(IOSByteArray *)blockAddress
                                          withByte:(jbyte)flag
                                     withByteArray:(IOSByteArray *)uid {
  IOSByteArray *request;
  jint header_size;
  if ((blockAddress == nil) || (((IOSByteArray *) nil_chk(blockAddress))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  header_size = [self getIso15693CustomHeaderSizeWithByte:flag];
  request = [IOSByteArray newArrayWithLength:header_size + 2];
  *IOSByteArray_GetRef(request, 0) = flag;
  *IOSByteArray_GetRef(request, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_READ_SINGLE_BLOCK;
  *IOSByteArray_GetRef(request, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  *IOSByteArray_GetRef(request, header_size) = IOSByteArray_Get(nil_chk(blockAddress), 1);
  *IOSByteArray_GetRef(request, header_size + 1) = IOSByteArray_Get(blockAddress, 0);
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:request withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_UID_OFFSET withByteArray:uid];
  return [self transceiveWithNSString:@"fastReadSingleBlockVicinity" withByteArray:request];
}

- (IOSByteArray *)fastReadMultipleBlockWithByte:(jbyte)blockOffset
                                       withByte:(jbyte)nbrOfBlocks {
  IOSByteArray *blockAddress = [IOSByteArray newArrayWithLength:2];
  *IOSByteArray_GetRef(blockAddress, 0) = blockOffset;
  *IOSByteArray_GetRef(blockAddress, 1) = (jint) 0x00;
  return [self fastReadMultipleBlockWithByteArray:blockAddress withByte:nbrOfBlocks];
}

- (IOSByteArray *)fastReadMultipleBlockWithByteArray:(IOSByteArray *)blockAddress
                                            withByte:(jbyte)nbrOfBlocks {
  return [self fastReadMultipleBlockWithByteArray:blockAddress withByte:nbrOfBlocks withByte:[self getFlag] withByteArray:[self getUid]];
}

- (IOSByteArray *)fastReadMultipleBlockWithByteArray:(IOSByteArray *)blockAddress
                                            withByte:(jbyte)nbrOfBlocks
                                            withByte:(jbyte)flag
                                       withByteArray:(IOSByteArray *)uid {
  IOSByteArray *request;
  jint header_size;
  if ((blockAddress == nil) || (((IOSByteArray *) nil_chk(blockAddress))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  header_size = [self getIso15693CustomHeaderSizeWithByte:flag];
  request = [IOSByteArray newArrayWithLength:header_size + 2 + 1];
  *IOSByteArray_GetRef(request, 0) = flag;
  *IOSByteArray_GetRef(request, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_READ_MULTIPLE_BLOCK;
  *IOSByteArray_GetRef(request, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  *IOSByteArray_GetRef(request, header_size) = IOSByteArray_Get(nil_chk(blockAddress), 1);
  *IOSByteArray_GetRef(request, header_size + 1) = IOSByteArray_Get(blockAddress, 0);
  *IOSByteArray_GetRef(request, header_size + 2) = nbrOfBlocks;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:request withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_UID_OFFSET withByteArray:uid];
  return [self transceiveWithNSString:@"fastReadMultipleBlockVicinity" withByteArray:request];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 7, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 8, 9, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 8, 10, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 12, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 13, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 14, 15, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 16, 12, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 16, 13, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 17, 9, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 17, 10, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 18, 19, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 18, 5, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 18, 7, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 20, 21, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 20, 12, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 20, 13, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[1].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withByte:);
  methods[2].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withInt:);
  methods[3].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withByte:withInt:);
  methods[4].selector = @selector(readSingleBlockWithByteArray:);
  methods[5].selector = @selector(readSingleBlockWithByteArray:withByte:withByteArray:);
  methods[6].selector = @selector(writeSingleBlockWithByteArray:withByteArray:);
  methods[7].selector = @selector(writeSingleBlockWithByteArray:withByteArray:withByte:withByteArray:);
  methods[8].selector = @selector(readMultipleBlockWithByteArray:withByte:);
  methods[9].selector = @selector(readMultipleBlockWithByteArray:withByte:withByte:withByteArray:);
  methods[10].selector = @selector(getSystemInfo);
  methods[11].selector = @selector(getSystemInfoWithByte:withByteArray:);
  methods[12].selector = @selector(lockSectorWithByteArray:withByte:);
  methods[13].selector = @selector(lockSectorWithByteArray:withByte:withByte:withByteArray:);
  methods[14].selector = @selector(getMultipleBlockSecStatusWithByteArray:withByteArray:);
  methods[15].selector = @selector(getMultipleBlockSecStatusWithByteArray:withByteArray:withByte:withByteArray:);
  methods[16].selector = @selector(fastReadSingleBlockWithByte:);
  methods[17].selector = @selector(fastReadSingleBlockWithByteArray:);
  methods[18].selector = @selector(fastReadSingleBlockWithByteArray:withByte:withByteArray:);
  methods[19].selector = @selector(fastReadMultipleBlockWithByte:withByte:);
  methods[20].selector = @selector(fastReadMultipleBlockWithByteArray:withByte:);
  methods[21].selector = @selector(fastReadMultipleBlockWithByteArray:withByte:withByte:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[B", "LComStSt25sdkRFReaderInterface;[BB", "LComStSt25sdkRFReaderInterface;[BI", "LComStSt25sdkRFReaderInterface;[BBI", "readSingleBlock", "[B", "LComStSt25sdkSTException;", "[BB[B", "writeSingleBlock", "[B[B", "[B[BB[B", "readMultipleBlock", "[BB", "[BBB[B", "getSystemInfo", "B[B", "lockSector", "getMultipleBlockSecStatus", "fastReadSingleBlock", "B", "fastReadMultipleBlock", "BB" };
  static const J2ObjcClassInfo _ComStSt25sdkCommandVicinityCommand = { "VicinityCommand", "com.st.st25sdk.command", ptrTable, methods, NULL, 7, 0x1, 22, 0, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkCommandVicinityCommand;
}

@end

void ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkCommandVicinityCommand *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, ComStSt25sdkCommandIso15693Protocol_DEFAULT_VICINITY_FLAG, ComStSt25sdkType5Type5Tag_DEFAULT_NBR_OF_BYTES_PER_BLOCK);
}

ComStSt25sdkCommandVicinityCommand *new_ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandVicinityCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_, reader, uid)
}

ComStSt25sdkCommandVicinityCommand *create_ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandVicinityCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_, reader, uid)
}

void ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(ComStSt25sdkCommandVicinityCommand *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, flag, ComStSt25sdkType5Type5Tag_DEFAULT_NBR_OF_BYTES_PER_BLOCK);
}

ComStSt25sdkCommandVicinityCommand *new_ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandVicinityCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_, reader, uid, flag)
}

ComStSt25sdkCommandVicinityCommand *create_ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandVicinityCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_, reader, uid, flag)
}

void ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(ComStSt25sdkCommandVicinityCommand *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, ComStSt25sdkCommandIso15693Protocol_DEFAULT_VICINITY_FLAG, nbrOfBytesPerBlock);
}

ComStSt25sdkCommandVicinityCommand *new_ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandVicinityCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_, reader, uid, nbrOfBytesPerBlock)
}

ComStSt25sdkCommandVicinityCommand *create_ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandVicinityCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_, reader, uid, nbrOfBytesPerBlock)
}

void ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(ComStSt25sdkCommandVicinityCommand *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, flag, nbrOfBytesPerBlock);
  if ((flag & ComStSt25sdkCommandIso15693Protocol_PROTOCOL_FORMAT_EXTENSION) == 0) {
    ComStSt25sdkSTLog_eWithNSString_(@"Error! Flag PROTOCOL_FORMAT_EXTENSION is mandatory for this class");
  }
}

ComStSt25sdkCommandVicinityCommand *new_ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandVicinityCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_, reader, uid, flag, nbrOfBytesPerBlock)
}

ComStSt25sdkCommandVicinityCommand *create_ComStSt25sdkCommandVicinityCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandVicinityCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_, reader, uid, flag, nbrOfBytesPerBlock)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandVicinityCommand)
