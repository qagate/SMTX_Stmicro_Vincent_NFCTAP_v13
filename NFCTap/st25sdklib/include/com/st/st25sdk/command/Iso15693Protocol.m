//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/command/Iso15693Protocol.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/command/Iso15693Protocol.h"
#include "com/st/st25sdk/type5/Type5Tag.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"

@implementation ComStSt25sdkCommandIso15693Protocol

+ (jbyte)STM_MANUFACTURER_CODE {
  return ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
}

+ (jbyte)SUB_CARRIER_MODE {
  return ComStSt25sdkCommandIso15693Protocol_SUB_CARRIER_MODE;
}

+ (jbyte)HIGH_DATA_RATE_MODE {
  return ComStSt25sdkCommandIso15693Protocol_HIGH_DATA_RATE_MODE;
}

+ (jbyte)INVENTORY_MODE {
  return ComStSt25sdkCommandIso15693Protocol_INVENTORY_MODE;
}

+ (jbyte)PROTOCOL_FORMAT_EXTENSION {
  return ComStSt25sdkCommandIso15693Protocol_PROTOCOL_FORMAT_EXTENSION;
}

+ (jbyte)SELECTED_MODE {
  return ComStSt25sdkCommandIso15693Protocol_SELECTED_MODE;
}

+ (jbyte)ADDRESSED_MODE {
  return ComStSt25sdkCommandIso15693Protocol_ADDRESSED_MODE;
}

+ (jbyte)OPTION_FLAG {
  return ComStSt25sdkCommandIso15693Protocol_OPTION_FLAG;
}

+ (jbyte)INVENTORY_AFI_FLAG {
  return ComStSt25sdkCommandIso15693Protocol_INVENTORY_AFI_FLAG;
}

+ (jbyte)INVENTORY_AFI_FIELD {
  return ComStSt25sdkCommandIso15693Protocol_INVENTORY_AFI_FIELD;
}

+ (jbyte)INVENTORY_ONE_SLOT {
  return ComStSt25sdkCommandIso15693Protocol_INVENTORY_ONE_SLOT;
}

+ (jint)DEFAULT_READ_MULTIPLE_MAX_NBR_OF_BLOCKS {
  return ComStSt25sdkCommandIso15693Protocol_DEFAULT_READ_MULTIPLE_MAX_NBR_OF_BLOCKS;
}

+ (jint)DEFAULT_WRITE_MULTIPLE_MAX_NBR_OF_BLOCKS {
  return ComStSt25sdkCommandIso15693Protocol_DEFAULT_WRITE_MULTIPLE_MAX_NBR_OF_BLOCKS;
}

+ (jbyte)ISO_RESPONSE_FLAG_NOERROR {
  return ComStSt25sdkCommandIso15693Protocol_ISO_RESPONSE_FLAG_NOERROR;
}

+ (jbyte)ISO_RESPONSE_FLAG_ERROR {
  return ComStSt25sdkCommandIso15693Protocol_ISO_RESPONSE_FLAG_ERROR;
}

+ (jbyte)ISO_ERRORCODE_CMD_NOT_SUPPORTED {
  return ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_CMD_NOT_SUPPORTED;
}

+ (jbyte)ISO_ERRORCODE_CMD_NOT_RECOGNIZED {
  return ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_CMD_NOT_RECOGNIZED;
}

+ (jbyte)ISO_ERRORCODE_CMD_OPTION_NOT_SUPPORTED {
  return ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_CMD_OPTION_NOT_SUPPORTED;
}

+ (jbyte)ISO_ERRORCODE_CMD_FAILED {
  return ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_CMD_FAILED;
}

+ (jbyte)ISO_ERRORCODE_BLOCK_NOT_AVAILABLE {
  return ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_BLOCK_NOT_AVAILABLE;
}

+ (jbyte)ISO_ERRORCODE_BLOCK_ALREADY_LOCKED {
  return ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_BLOCK_ALREADY_LOCKED;
}

+ (jbyte)ISO_ERRORCODE_BLOCK_READ_ONLY {
  return ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_BLOCK_READ_ONLY;
}

+ (jbyte)ISO_ERRORCODE_BLOCK_WRITE_FAILED {
  return ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_BLOCK_WRITE_FAILED;
}

+ (jbyte)ISO_ERRORCODE_BLOCK_NOT_SUCCESSFULLY_LOCKED {
  return ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_BLOCK_NOT_SUCCESSFULLY_LOCKED;
}

+ (jbyte)ISO_ERRORCODE_BLOCK_IS_PROTECTED {
  return ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_BLOCK_IS_PROTECTED;
}

+ (jbyte)ISO_ERRORCODE_GENERIC_CRYPTOGRAPHIC_ERROR {
  return ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_GENERIC_CRYPTOGRAPHIC_ERROR;
}

+ (jbyte)DEFAULT_FLAG {
  return ComStSt25sdkCommandIso15693Protocol_DEFAULT_FLAG;
}

+ (jbyte)DEFAULT_VICINITY_FLAG {
  return ComStSt25sdkCommandIso15693Protocol_DEFAULT_VICINITY_FLAG;
}

+ (jint)ISO15693_HEADER_SIZE_UID {
  return ComStSt25sdkCommandIso15693Protocol_ISO15693_HEADER_SIZE_UID;
}

+ (jint)ISO15693_UID_OFFSET {
  return ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET;
}

+ (jint)ISO15693_HEADER_SIZE {
  return ComStSt25sdkCommandIso15693Protocol_ISO15693_HEADER_SIZE;
}

+ (jint)ISO15693_CUSTOM_ST_HEADER_SIZE_UID {
  return ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE_UID;
}

+ (jint)ISO15693_CUSTOM_ST_UID_OFFSET {
  return ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_UID_OFFSET;
}

+ (jint)ISO15693_CUSTOM_ST_HEADER_SIZE {
  return ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, reader, uid);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                             withByte:(jbyte)flag {
  ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(self, reader, uid, flag);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                              withInt:(jint)nbrOfBytesPerBlock {
  ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(self, reader, uid, nbrOfBytesPerBlock);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                             withByte:(jbyte)flag
                                              withInt:(jint)nbrOfBytesPerBlock {
  ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, flag, nbrOfBytesPerBlock);
  return self;
}

- (id<ComStSt25sdkRFReaderInterface>)getReaderInterface {
  return mReaderInterface_;
}

- (jint)getIso15693HeaderSizeWithByte:(jbyte)flag {
  if ([self uidNeededWithByte:flag]) {
    return ComStSt25sdkCommandIso15693Protocol_ISO15693_HEADER_SIZE_UID;
  }
  else {
    return ComStSt25sdkCommandIso15693Protocol_ISO15693_HEADER_SIZE;
  }
}

- (jint)getIso15693CustomHeaderSizeWithByte:(jbyte)flag {
  if ([self uidNeededWithByte:flag]) {
    return ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE_UID;
  }
  else {
    return ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE;
  }
}

- (jboolean)uidNeededWithByte:(jbyte)flag {
  return (flag & ComStSt25sdkCommandIso15693Protocol_ADDRESSED_MODE) == ComStSt25sdkCommandIso15693Protocol_ADDRESSED_MODE;
}

- (void)addUidToFrameWithByteArray:(IOSByteArray *)frame
                           withInt:(jint)offset {
  [self addUidToFrameWithByteArray:frame withInt:offset withByteArray:mUid_];
}

- (void)addUidToFrameWithByteArray:(IOSByteArray *)frame
                           withInt:(jint)offset
                     withByteArray:(IOSByteArray *)uid {
  IOSByteArray *reversedUID;
  if (uid != nil && uid->size_ == 8) {
    reversedUID = ComStSt25sdkHelper_reverseByteArrayWithByteArray_(uid);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(reversedUID, 0, frame, offset, 8);
  }
  else {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
}

- (void)checkIso15693ResponseWithByteArray:(IOSByteArray *)response {
  if ((response != nil) && (IOSByteArray_Get(nil_chk(response), 0) != (jint) 0x00)) {
    if (((IOSByteArray *) nil_chk(response))->size_ >= 2) {
      [self generateCmdExceptionWithByteArray:response];
    }
    else {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED), response);
    }
  }
}

- (void)generateCmdExceptionWithByteArray:(IOSByteArray *)response {
  switch (IOSByteArray_Get(nil_chk(response), 1)) {
    case (jint) 0x01:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_CMD_NOT_SUPPORTED), response);
    case (jint) 0x02:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_CMD_NOT_RECOGNIZED), response);
    case (jint) 0x03:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_CMD_OPTION_NOT_SUPPORTED), response);
    case (jint) 0x0F:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED), response);
    case (jint) 0x10:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_NOT_AVAILABLE), response);
    case (jint) 0x11:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_ALREADY_LOCKED), response);
    case (jint) 0x12:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_IS_LOCKED), response);
    case (jint) 0x13:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_PROGRAMMING_FAILED), response);
    case (jint) 0x14:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_LOCKING_FAILED), response);
    case (jint) 0x15:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_PROTECTED), response);
    default:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_ERROR_CODE), response);
  }
}

- (IOSByteArray *)transceiveWithNSString:(NSString *)commandName
                           withByteArray:(IOSByteArray *)data {
  @try {
    IOSByteArray *response = [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:[[self java_getClass] getSimpleName] withNSString:commandName withByteArray:data];
    [self checkIso15693ResponseWithByteArray:response];
    return response;
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

- (void)setUidWithByteArray:(IOSByteArray *)uid {
  if (uid != nil) {
    mUid_ = [uid java_clone];
  }
}

- (IOSByteArray *)getUid {
  return mUid_;
}

- (void)setFlagWithByte:(jbyte)flag {
  mFlag_ = flag;
}

- (jbyte)getFlag {
  return mFlag_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkRFReaderInterface;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 6, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 7, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 11, 10, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, 10, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 13, 10, -1, -1, -1 },
    { NULL, "[B", 0x1, 15, 16, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 13, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 5, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[1].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withByte:);
  methods[2].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withInt:);
  methods[3].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withByte:withInt:);
  methods[4].selector = @selector(getReaderInterface);
  methods[5].selector = @selector(getIso15693HeaderSizeWithByte:);
  methods[6].selector = @selector(getIso15693CustomHeaderSizeWithByte:);
  methods[7].selector = @selector(uidNeededWithByte:);
  methods[8].selector = @selector(addUidToFrameWithByteArray:withInt:);
  methods[9].selector = @selector(addUidToFrameWithByteArray:withInt:withByteArray:);
  methods[10].selector = @selector(checkIso15693ResponseWithByteArray:);
  methods[11].selector = @selector(generateCmdExceptionWithByteArray:);
  methods[12].selector = @selector(transceiveWithNSString:withByteArray:);
  methods[13].selector = @selector(setUidWithByteArray:);
  methods[14].selector = @selector(getUid);
  methods[15].selector = @selector(setFlagWithByte:);
  methods[16].selector = @selector(getFlag);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STM_MANUFACTURER_CODE", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE, 0x19, -1, -1, -1, -1 },
    { "SUB_CARRIER_MODE", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_SUB_CARRIER_MODE, 0x19, -1, -1, -1, -1 },
    { "HIGH_DATA_RATE_MODE", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_HIGH_DATA_RATE_MODE, 0x19, -1, -1, -1, -1 },
    { "INVENTORY_MODE", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_INVENTORY_MODE, 0x19, -1, -1, -1, -1 },
    { "PROTOCOL_FORMAT_EXTENSION", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_PROTOCOL_FORMAT_EXTENSION, 0x19, -1, -1, -1, -1 },
    { "SELECTED_MODE", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_SELECTED_MODE, 0x19, -1, -1, -1, -1 },
    { "ADDRESSED_MODE", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_ADDRESSED_MODE, 0x19, -1, -1, -1, -1 },
    { "OPTION_FLAG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_OPTION_FLAG, 0x19, -1, -1, -1, -1 },
    { "INVENTORY_AFI_FLAG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_INVENTORY_AFI_FLAG, 0x19, -1, -1, -1, -1 },
    { "INVENTORY_AFI_FIELD", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_INVENTORY_AFI_FIELD, 0x19, -1, -1, -1, -1 },
    { "INVENTORY_ONE_SLOT", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_INVENTORY_ONE_SLOT, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_READ_MULTIPLE_MAX_NBR_OF_BLOCKS", "I", .constantValue.asInt = ComStSt25sdkCommandIso15693Protocol_DEFAULT_READ_MULTIPLE_MAX_NBR_OF_BLOCKS, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_WRITE_MULTIPLE_MAX_NBR_OF_BLOCKS", "I", .constantValue.asInt = ComStSt25sdkCommandIso15693Protocol_DEFAULT_WRITE_MULTIPLE_MAX_NBR_OF_BLOCKS, 0x19, -1, -1, -1, -1 },
    { "ISO_RESPONSE_FLAG_NOERROR", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_ISO_RESPONSE_FLAG_NOERROR, 0x19, -1, -1, -1, -1 },
    { "ISO_RESPONSE_FLAG_ERROR", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_ISO_RESPONSE_FLAG_ERROR, 0x19, -1, -1, -1, -1 },
    { "ISO_ERRORCODE_CMD_NOT_SUPPORTED", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_CMD_NOT_SUPPORTED, 0x19, -1, -1, -1, -1 },
    { "ISO_ERRORCODE_CMD_NOT_RECOGNIZED", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_CMD_NOT_RECOGNIZED, 0x19, -1, -1, -1, -1 },
    { "ISO_ERRORCODE_CMD_OPTION_NOT_SUPPORTED", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_CMD_OPTION_NOT_SUPPORTED, 0x19, -1, -1, -1, -1 },
    { "ISO_ERRORCODE_CMD_FAILED", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_CMD_FAILED, 0x19, -1, -1, -1, -1 },
    { "ISO_ERRORCODE_BLOCK_NOT_AVAILABLE", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_BLOCK_NOT_AVAILABLE, 0x19, -1, -1, -1, -1 },
    { "ISO_ERRORCODE_BLOCK_ALREADY_LOCKED", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_BLOCK_ALREADY_LOCKED, 0x19, -1, -1, -1, -1 },
    { "ISO_ERRORCODE_BLOCK_READ_ONLY", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_BLOCK_READ_ONLY, 0x19, -1, -1, -1, -1 },
    { "ISO_ERRORCODE_BLOCK_WRITE_FAILED", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_BLOCK_WRITE_FAILED, 0x19, -1, -1, -1, -1 },
    { "ISO_ERRORCODE_BLOCK_NOT_SUCCESSFULLY_LOCKED", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_BLOCK_NOT_SUCCESSFULLY_LOCKED, 0x19, -1, -1, -1, -1 },
    { "ISO_ERRORCODE_BLOCK_IS_PROTECTED", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_BLOCK_IS_PROTECTED, 0x19, -1, -1, -1, -1 },
    { "ISO_ERRORCODE_GENERIC_CRYPTOGRAPHIC_ERROR", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_ISO_ERRORCODE_GENERIC_CRYPTOGRAPHIC_ERROR, 0x19, -1, -1, -1, -1 },
    { "mReaderInterface_", "LComStSt25sdkRFReaderInterface;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "DEFAULT_FLAG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_DEFAULT_FLAG, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_VICINITY_FLAG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Protocol_DEFAULT_VICINITY_FLAG, 0x19, -1, -1, -1, -1 },
    { "mFlag_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mUid_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mNbrOfBytesPerBlock_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ISO15693_HEADER_SIZE_UID", "I", .constantValue.asInt = ComStSt25sdkCommandIso15693Protocol_ISO15693_HEADER_SIZE_UID, 0x1c, -1, -1, -1, -1 },
    { "ISO15693_UID_OFFSET", "I", .constantValue.asInt = ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET, 0x1c, -1, -1, -1, -1 },
    { "ISO15693_HEADER_SIZE", "I", .constantValue.asInt = ComStSt25sdkCommandIso15693Protocol_ISO15693_HEADER_SIZE, 0x1c, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_HEADER_SIZE_UID", "I", .constantValue.asInt = ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE_UID, 0x1c, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_UID_OFFSET", "I", .constantValue.asInt = ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_UID_OFFSET, 0x1c, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_HEADER_SIZE", "I", .constantValue.asInt = ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE, 0x1c, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[B", "LComStSt25sdkRFReaderInterface;[BB", "LComStSt25sdkRFReaderInterface;[BI", "LComStSt25sdkRFReaderInterface;[BBI", "getIso15693HeaderSize", "B", "getIso15693CustomHeaderSize", "uidNeeded", "addUidToFrame", "[BI", "LComStSt25sdkSTException;", "[BI[B", "checkIso15693Response", "[B", "generateCmdException", "transceive", "LNSString;[B", "setUid", "setFlag" };
  static const J2ObjcClassInfo _ComStSt25sdkCommandIso15693Protocol = { "Iso15693Protocol", "com.st.st25sdk.command", ptrTable, methods, fields, 7, 0x1, 17, 38, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkCommandIso15693Protocol;
}

@end

void ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkCommandIso15693Protocol *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, ComStSt25sdkCommandIso15693Protocol_DEFAULT_FLAG, ComStSt25sdkType5Type5Tag_DEFAULT_NBR_OF_BYTES_PER_BLOCK);
}

ComStSt25sdkCommandIso15693Protocol *new_ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandIso15693Protocol, initWithComStSt25sdkRFReaderInterface_withByteArray_, reader, uid)
}

ComStSt25sdkCommandIso15693Protocol *create_ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandIso15693Protocol, initWithComStSt25sdkRFReaderInterface_withByteArray_, reader, uid)
}

void ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(ComStSt25sdkCommandIso15693Protocol *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, flag, ComStSt25sdkType5Type5Tag_DEFAULT_NBR_OF_BYTES_PER_BLOCK);
}

ComStSt25sdkCommandIso15693Protocol *new_ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandIso15693Protocol, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_, reader, uid, flag)
}

ComStSt25sdkCommandIso15693Protocol *create_ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandIso15693Protocol, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_, reader, uid, flag)
}

void ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(ComStSt25sdkCommandIso15693Protocol *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, ComStSt25sdkCommandIso15693Protocol_DEFAULT_FLAG, nbrOfBytesPerBlock);
}

ComStSt25sdkCommandIso15693Protocol *new_ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandIso15693Protocol, initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_, reader, uid, nbrOfBytesPerBlock)
}

ComStSt25sdkCommandIso15693Protocol *create_ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandIso15693Protocol, initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_, reader, uid, nbrOfBytesPerBlock)
}

void ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(ComStSt25sdkCommandIso15693Protocol *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  NSObject_init(self);
  self->mFlag_ = ComStSt25sdkCommandIso15693Protocol_DEFAULT_FLAG;
  self->mReaderInterface_ = reader;
  [self setUidWithByteArray:uid];
  self->mFlag_ = flag;
  self->mNbrOfBytesPerBlock_ = nbrOfBytesPerBlock;
  if (nbrOfBytesPerBlock == 0) {
    ComStSt25sdkSTLog_eWithNSString_(@"Error! Invalid nbrOfBytesPerBlock");
  }
}

ComStSt25sdkCommandIso15693Protocol *new_ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandIso15693Protocol, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_, reader, uid, flag, nbrOfBytesPerBlock)
}

ComStSt25sdkCommandIso15693Protocol *create_ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandIso15693Protocol, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_, reader, uid, flag, nbrOfBytesPerBlock)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandIso15693Protocol)
