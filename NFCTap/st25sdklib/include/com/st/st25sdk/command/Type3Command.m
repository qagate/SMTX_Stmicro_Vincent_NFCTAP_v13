//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/command/Type3Command.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/command/Type3Command.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"

@interface ComStSt25sdkCommandType3Command () {
 @public
  id<ComStSt25sdkRFReaderInterface> mReaderInterface_;
  jint mBlockSizeInBytes_;
}

@end

J2OBJC_FIELD_SETTER(ComStSt25sdkCommandType3Command, mReaderInterface_, id<ComStSt25sdkRFReaderInterface>)

inline jint ComStSt25sdkCommandType3Command_get_TYPE3_CHECK_RESPONSE_FLAG1_BYTE_NUMBER(void);
#define ComStSt25sdkCommandType3Command_TYPE3_CHECK_RESPONSE_FLAG1_BYTE_NUMBER 9
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkCommandType3Command, TYPE3_CHECK_RESPONSE_FLAG1_BYTE_NUMBER, jint)

inline jint ComStSt25sdkCommandType3Command_get_TYPE3_CHECK_RESPONSE_FLAG2_BYTE_NUMBER(void);
#define ComStSt25sdkCommandType3Command_TYPE3_CHECK_RESPONSE_FLAG2_BYTE_NUMBER 10
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkCommandType3Command, TYPE3_CHECK_RESPONSE_FLAG2_BYTE_NUMBER, jint)

@implementation ComStSt25sdkCommandType3Command

+ (jint)T3T_DEFAULT_NBR_OF_BYTES_PER_BLOCK {
  return ComStSt25sdkCommandType3Command_T3T_DEFAULT_NBR_OF_BYTES_PER_BLOCK;
}

+ (jbyte)TYPE3_SENSF_REQUEST_CMD {
  return ComStSt25sdkCommandType3Command_TYPE3_SENSF_REQUEST_CMD;
}

+ (jbyte)TYPE3_SENSF_RESPONSE_CODE {
  return ComStSt25sdkCommandType3Command_TYPE3_SENSF_RESPONSE_CODE;
}

+ (jbyte)TYPE3_CHECK_REQUEST_CMD {
  return ComStSt25sdkCommandType3Command_TYPE3_CHECK_REQUEST_CMD;
}

+ (jbyte)TYPE3_CHECK_RESPONSE_CODE {
  return ComStSt25sdkCommandType3Command_TYPE3_CHECK_RESPONSE_CODE;
}

+ (jbyte)TYPE3_UPDATE_REQUEST_CMD {
  return ComStSt25sdkCommandType3Command_TYPE3_UPDATE_REQUEST_CMD;
}

+ (jbyte)TYPE3_UPDATE_RESPONSE_CODE {
  return ComStSt25sdkCommandType3Command_TYPE3_UPDATE_RESPONSE_CODE;
}

+ (jint)TYPE3_CHECK_RESPONSE_FRAME_HEADER_LENGTH {
  return ComStSt25sdkCommandType3Command_TYPE3_CHECK_RESPONSE_FRAME_HEADER_LENGTH;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader {
  ComStSt25sdkCommandType3Command_initWithComStSt25sdkRFReaderInterface_(self, reader);
  return self;
}

- (jint)getBlockSize {
  return mBlockSizeInBytes_;
}

- (IOSByteArray *)sensFWithByteArray:(IOSByteArray *)systemCode
                            withByte:(jbyte)requestCode
                            withByte:(jbyte)timeSlotNumber {
  NSString *commandName = @"type3_sensF";
  if (timeSlotNumber != (jint) 0x00 && timeSlotNumber != (jint) 0x01 && timeSlotNumber != (jint) 0x03 && timeSlotNumber != (jint) 0x07 && timeSlotNumber != (jint) 0x0F) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (systemCode == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:3 + systemCode->size_];
  *IOSByteArray_GetRef(frame, 0) = ComStSt25sdkCommandType3Command_TYPE3_SENSF_REQUEST_CMD;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(systemCode, 0, frame, 1, systemCode->size_);
  *IOSByteArray_GetRef(frame, systemCode->size_ + 1) = requestCode;
  *IOSByteArray_GetRef(frame, systemCode->size_ + 2) = timeSlotNumber;
  return [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:nil withNSString:commandName withByteArray:frame];
}

- (IOSByteArray *)checkWithByteArray:(IOSByteArray *)nfcId2
                        withIntArray:(IOSIntArray *)serviceCodeList
                        withIntArray:(IOSIntArray *)blockList {
  NSString *commandName = @"type3_check";
  if (nfcId2 == nil || serviceCodeList == nil || blockList == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:3 + nfcId2->size_ + (serviceCodeList->size_ * 2) + (blockList->size_ * 2)];
  jint index = 0;
  *IOSByteArray_GetRef(frame, index++) = ComStSt25sdkCommandType3Command_TYPE3_CHECK_REQUEST_CMD;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(nfcId2, 0, frame, 1, nfcId2->size_);
  index += nfcId2->size_;
  *IOSByteArray_GetRef(frame, index++) = (jbyte) serviceCodeList->size_;
  {
    IOSIntArray *a__ = serviceCodeList;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint serviceCode = *b__++;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(serviceCode), 0, frame, index, 2);
      index += 2;
    }
  }
  *IOSByteArray_GetRef(frame, index++) = (jbyte) blockList->size_;
  {
    IOSIntArray *a__ = blockList;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint block = *b__++;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(block), 0, frame, index, 2);
      index += 2;
    }
  }
  return [self transceiveWithNSString:commandName withByteArray:frame];
}

- (IOSByteArray *)updateWithByteArray:(IOSByteArray *)nfcId2
                         withIntArray:(IOSIntArray *)serviceCodeList
                         withIntArray:(IOSIntArray *)blockList
                        withByteArray:(IOSByteArray *)blockData {
  NSString *commandName = @"type3_update";
  if (nfcId2 == nil || serviceCodeList == nil || blockList == nil || blockData == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:3 + nfcId2->size_ + (serviceCodeList->size_ * 2) + (blockList->size_ * 2) + blockData->size_];
  jint index = 0;
  *IOSByteArray_GetRef(frame, index++) = ComStSt25sdkCommandType3Command_TYPE3_UPDATE_REQUEST_CMD;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(nfcId2, 0, frame, 1, nfcId2->size_);
  index += nfcId2->size_;
  *IOSByteArray_GetRef(frame, index++) = (jbyte) serviceCodeList->size_;
  {
    IOSIntArray *a__ = serviceCodeList;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint serviceCode = *b__++;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(serviceCode), 0, frame, index, 2);
      index += 2;
    }
  }
  *IOSByteArray_GetRef(frame, index++) = (jbyte) blockList->size_;
  {
    IOSIntArray *a__ = blockList;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint block = *b__++;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(block), 0, frame, index, 2);
      index += 2;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(blockData, 0, frame, index, blockData->size_);
  return [self transceiveWithNSString:commandName withByteArray:frame];
}

- (IOSByteArray *)checkType3TagPresence {
  IOSByteArray *manufactureId = [IOSByteArray newArrayWithLength:8];
  IOSByteArray *systemCode = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF } count:2];
  IOSByteArray *response = [self sensFWithByteArray:systemCode withByte:(jbyte) (jint) 0x01 withByte:(jbyte) (jint) 0x03];
  if (((IOSByteArray *) nil_chk(response))->size_ < 8) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA));
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(response, 1, manufactureId, 0, 8);
  return manufactureId;
}

- (IOSByteArray *)readBlockWithByteArray:(IOSByteArray *)nfcId2
                                 withInt:(jint)blockNumber {
  IOSByteArray *response;
  IOSIntArray *serviceCodeList = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x0900 } count:1];
  IOSIntArray *blockList = [IOSIntArray newArrayWithLength:1];
  *IOSIntArray_GetRef(blockList, 0) = (jint) 0x8000 + blockNumber;
  response = [self checkWithByteArray:nfcId2 withIntArray:serviceCodeList withIntArray:blockList];
  IOSByteArray *readData = [IOSByteArray newArrayWithLength:16];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(response, ComStSt25sdkCommandType3Command_TYPE3_CHECK_RESPONSE_FRAME_HEADER_LENGTH, readData, 0, 16);
  return readData;
}

- (IOSByteArray *)readBlocksWithByteArray:(IOSByteArray *)nfcId2
                                  withInt:(jint)firstBlockAddress
                                  withInt:(jint)sizeInBlocks {
  jint nbrOfBlocksRead = 0;
  jint blockSize = mBlockSizeInBytes_;
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:sizeInBlocks * blockSize];
  JavaUtilArrays_fillWithByteArray_withByte_(buffer, (jbyte) (jint) 0xFF);
  jint blockNumber = firstBlockAddress + nbrOfBlocksRead;
  while (nbrOfBlocksRead < sizeInBlocks) {
    IOSByteArray *tmpBuf = [self readBlockWithByteArray:nfcId2 withInt:blockNumber + nbrOfBlocksRead];
    if (tmpBuf != nil) {
      if (tmpBuf->size_ != blockSize) {
        @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED), tmpBuf);
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tmpBuf, 0, buffer, nbrOfBlocksRead * blockSize, blockSize);
      nbrOfBlocksRead += 1;
    }
    else {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
    }
  }
  if (nbrOfBlocksRead == 0) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
  return buffer;
}

- (IOSByteArray *)readBytesWithByteArray:(IOSByteArray *)nfcId2
                                 withInt:(jint)byteAddress
                                 withInt:(jint)sizeInBytes {
  jint nbrOfBlocks;
  jint blockSize = mBlockSizeInBytes_;
  IOSByteArray *result;
  if ((byteAddress < 0) || (sizeInBytes <= 0)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jint firstBlAddr = byteAddress / blockSize;
  jint nbrOfBytesToSkipInFirstBlock = byteAddress % blockSize;
  jint lastByteAddr = byteAddress + sizeInBytes - 1;
  jint lastBlAddr = lastByteAddr / blockSize;
  nbrOfBlocks = lastBlAddr - firstBlAddr + 1;
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:nbrOfBlocks * blockSize];
  JavaUtilArrays_fillWithByteArray_withByte_(buffer, (jbyte) (jint) 0xFF);
  IOSByteArray *tmpBuf = [self readBlocksWithByteArray:nfcId2 withInt:firstBlAddr withInt:nbrOfBlocks];
  if (tmpBuf != nil) {
    if (tmpBuf->size_ == nbrOfBlocks * blockSize) {
      result = [IOSByteArray newArrayWithLength:sizeInBytes];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tmpBuf, nbrOfBytesToSkipInFirstBlock, result, 0, result->size_);
    }
    else {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED), tmpBuf);
    }
  }
  else {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
  return result;
}

- (IOSByteArray *)writeBlockWithByteArray:(IOSByteArray *)nfcId2
                                  withInt:(jint)blockNumber
                            withByteArray:(IOSByteArray *)data {
  IOSIntArray *serviceCodeList = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x0900 } count:1];
  IOSIntArray *blockList = [IOSIntArray newArrayWithLength:1];
  *IOSIntArray_GetRef(blockList, 0) = (jint) 0x8000 + blockNumber;
  return [self updateWithByteArray:nfcId2 withIntArray:serviceCodeList withIntArray:blockList withByteArray:data];
}

- (void)writeBlocksWithByteArray:(IOSByteArray *)nfcId2
                         withInt:(jint)firstBlockAddress
                   withByteArray:(IOSByteArray *)data {
  jint nbrOfBlocksWritten = 0;
  jint blockSize = mBlockSizeInBytes_;
  jint nbrOfBlocks = ComStSt25sdkHelper_divisionRoundedUpWithInt_withInt_(((IOSByteArray *) nil_chk(data))->size_, blockSize);
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:nbrOfBlocks * blockSize];
  JavaUtilArrays_fillWithByteArray_withByte_(buffer, (jbyte) (jint) 0xFF);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, buffer, 0, data->size_);
  while (nbrOfBlocksWritten < nbrOfBlocks) {
    IOSByteArray *tmpBuf = [IOSByteArray newArrayWithLength:blockSize];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, nbrOfBlocksWritten * blockSize, tmpBuf, 0, blockSize);
    (void) [self writeBlockWithByteArray:nfcId2 withInt:firstBlockAddress + nbrOfBlocksWritten withByteArray:tmpBuf];
    nbrOfBlocksWritten += 1;
  }
}

- (void)writeBytesWithByteArray:(IOSByteArray *)nfcId2
                        withInt:(jint)byteAddress
                  withByteArray:(IOSByteArray *)data {
  jint nbrOfBlocks;
  jint blockSize = mBlockSizeInBytes_;
  jint sizeInBytes = ((IOSByteArray *) nil_chk(data))->size_;
  if (byteAddress < 0) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jint firstBlAddr = byteAddress / blockSize;
  jint nbrOfBytesToSkipInFirstBlock = byteAddress % blockSize;
  jint lastByteAddr = byteAddress + sizeInBytes - 1;
  jint lastBlAddr = lastByteAddr / blockSize;
  jint nbrOfBytesInLastBlock = 1 + (lastByteAddr % blockSize);
  nbrOfBlocks = lastBlAddr - firstBlAddr + 1;
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:nbrOfBlocks * blockSize];
  JavaUtilArrays_fillWithByteArray_withByte_(buffer, (jbyte) (jint) 0xFF);
  if (nbrOfBytesToSkipInFirstBlock != 0) {
    IOSByteArray *firstBlock = [self readBlocksWithByteArray:nfcId2 withInt:firstBlAddr withInt:1];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(firstBlock, 0, buffer, 0, blockSize);
  }
  if (nbrOfBytesInLastBlock != blockSize) {
    IOSByteArray *lastBlock = [self readBlocksWithByteArray:nfcId2 withInt:lastBlAddr withInt:1];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastBlock, 0, buffer, buffer->size_ - blockSize, blockSize);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, buffer, nbrOfBytesToSkipInFirstBlock, data->size_);
  [self writeBlocksWithByteArray:nfcId2 withInt:firstBlAddr withByteArray:buffer];
}

- (IOSByteArray *)transceiveWithNSString:(NSString *)commandName
                           withByteArray:(IOSByteArray *)frame {
  @try {
    IOSByteArray *response = [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:nil withNSString:commandName withByteArray:frame];
    [self checkIso18092Type3ResponseWithByteArray:response];
    return response;
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

- (void)checkIso18092Type3ResponseWithByteArray:(IOSByteArray *)response {
  if (response != nil) {
    if (response->size_ >= 11) {
      [self generateCmdExceptionWithByteArray:response];
    }
    else {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED), response);
    }
  }
}

- (void)generateCmdExceptionWithByteArray:(IOSByteArray *)response {
  if (IOSByteArray_Get(nil_chk(response), ComStSt25sdkCommandType3Command_TYPE3_CHECK_RESPONSE_FLAG1_BYTE_NUMBER) != (jint) 0x00) {
    switch (IOSByteArray_Get(response, ComStSt25sdkCommandType3Command_TYPE3_CHECK_RESPONSE_FLAG2_BYTE_NUMBER)) {
      case (jint) 0x01:
      case (jint) 0x02:
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_OUT_OF_SCOPE), response);
      case (jint) 0x70:
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_MEMORY_ERROR), response);
      case (jint) 0x71:
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_EXCESSIVE_WRITES), response);
      default:
      if (IOSByteArray_Get(response, 11) >= (jbyte) (jint) 0x80) {
        @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_PROPRIETARY_ERROR_CONDITIONS), response);
      }
      else {
        @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_RFU), response);
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 6, 7, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 9, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 11, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 11, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 13, 14, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 14, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 17, 18, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 19, 20, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 21, 20, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:);
  methods[1].selector = @selector(getBlockSize);
  methods[2].selector = @selector(sensFWithByteArray:withByte:withByte:);
  methods[3].selector = @selector(checkWithByteArray:withIntArray:withIntArray:);
  methods[4].selector = @selector(updateWithByteArray:withIntArray:withIntArray:withByteArray:);
  methods[5].selector = @selector(checkType3TagPresence);
  methods[6].selector = @selector(readBlockWithByteArray:withInt:);
  methods[7].selector = @selector(readBlocksWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(readBytesWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(writeBlockWithByteArray:withInt:withByteArray:);
  methods[10].selector = @selector(writeBlocksWithByteArray:withInt:withByteArray:);
  methods[11].selector = @selector(writeBytesWithByteArray:withInt:withByteArray:);
  methods[12].selector = @selector(transceiveWithNSString:withByteArray:);
  methods[13].selector = @selector(checkIso18092Type3ResponseWithByteArray:);
  methods[14].selector = @selector(generateCmdExceptionWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mReaderInterface_", "LComStSt25sdkRFReaderInterface;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transceiveMode_", "LComStSt25sdkRFReaderInterface_TransceiveMode;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "T3T_DEFAULT_NBR_OF_BYTES_PER_BLOCK", "I", .constantValue.asInt = ComStSt25sdkCommandType3Command_T3T_DEFAULT_NBR_OF_BYTES_PER_BLOCK, 0x19, -1, -1, -1, -1 },
    { "mBlockSizeInBytes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TYPE3_SENSF_REQUEST_CMD", "B", .constantValue.asChar = ComStSt25sdkCommandType3Command_TYPE3_SENSF_REQUEST_CMD, 0x19, -1, -1, -1, -1 },
    { "TYPE3_SENSF_RESPONSE_CODE", "B", .constantValue.asChar = ComStSt25sdkCommandType3Command_TYPE3_SENSF_RESPONSE_CODE, 0x19, -1, -1, -1, -1 },
    { "TYPE3_CHECK_REQUEST_CMD", "B", .constantValue.asChar = ComStSt25sdkCommandType3Command_TYPE3_CHECK_REQUEST_CMD, 0x19, -1, -1, -1, -1 },
    { "TYPE3_CHECK_RESPONSE_CODE", "B", .constantValue.asChar = ComStSt25sdkCommandType3Command_TYPE3_CHECK_RESPONSE_CODE, 0x19, -1, -1, -1, -1 },
    { "TYPE3_UPDATE_REQUEST_CMD", "B", .constantValue.asChar = ComStSt25sdkCommandType3Command_TYPE3_UPDATE_REQUEST_CMD, 0x19, -1, -1, -1, -1 },
    { "TYPE3_UPDATE_RESPONSE_CODE", "B", .constantValue.asChar = ComStSt25sdkCommandType3Command_TYPE3_UPDATE_RESPONSE_CODE, 0x19, -1, -1, -1, -1 },
    { "TYPE3_CHECK_RESPONSE_FRAME_HEADER_LENGTH", "I", .constantValue.asInt = ComStSt25sdkCommandType3Command_TYPE3_CHECK_RESPONSE_FRAME_HEADER_LENGTH, 0x19, -1, -1, -1, -1 },
    { "TYPE3_CHECK_RESPONSE_FLAG1_BYTE_NUMBER", "I", .constantValue.asInt = ComStSt25sdkCommandType3Command_TYPE3_CHECK_RESPONSE_FLAG1_BYTE_NUMBER, 0x1a, -1, -1, -1, -1 },
    { "TYPE3_CHECK_RESPONSE_FLAG2_BYTE_NUMBER", "I", .constantValue.asInt = ComStSt25sdkCommandType3Command_TYPE3_CHECK_RESPONSE_FLAG2_BYTE_NUMBER, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;", "sensF", "[BBB", "LComStSt25sdkSTException;", "check", "[B[I[I", "update", "[B[I[I[B", "readBlock", "[BI", "readBlocks", "[BII", "readBytes", "writeBlock", "[BI[B", "writeBlocks", "writeBytes", "transceive", "LNSString;[B", "checkIso18092Type3Response", "[B", "generateCmdException" };
  static const J2ObjcClassInfo _ComStSt25sdkCommandType3Command = { "Type3Command", "com.st.st25sdk.command", ptrTable, methods, fields, 7, 0x1, 15, 13, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkCommandType3Command;
}

@end

void ComStSt25sdkCommandType3Command_initWithComStSt25sdkRFReaderInterface_(ComStSt25sdkCommandType3Command *self, id<ComStSt25sdkRFReaderInterface> reader) {
  NSObject_init(self);
  self->mBlockSizeInBytes_ = ComStSt25sdkCommandType3Command_T3T_DEFAULT_NBR_OF_BYTES_PER_BLOCK;
  self->mReaderInterface_ = reader;
  self->mBlockSizeInBytes_ = ComStSt25sdkCommandType3Command_T3T_DEFAULT_NBR_OF_BYTES_PER_BLOCK;
}

ComStSt25sdkCommandType3Command *new_ComStSt25sdkCommandType3Command_initWithComStSt25sdkRFReaderInterface_(id<ComStSt25sdkRFReaderInterface> reader) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandType3Command, initWithComStSt25sdkRFReaderInterface_, reader)
}

ComStSt25sdkCommandType3Command *create_ComStSt25sdkCommandType3Command_initWithComStSt25sdkRFReaderInterface_(id<ComStSt25sdkRFReaderInterface> reader) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandType3Command, initWithComStSt25sdkRFReaderInterface_, reader)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandType3Command)
