//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/command/Type2Command.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComStSt25sdkCommandType2Command")
#ifdef RESTRICT_ComStSt25sdkCommandType2Command
#define INCLUDE_ALL_ComStSt25sdkCommandType2Command 0
#else
#define INCLUDE_ALL_ComStSt25sdkCommandType2Command 1
#endif
#undef RESTRICT_ComStSt25sdkCommandType2Command

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComStSt25sdkCommandType2Command_) && (INCLUDE_ALL_ComStSt25sdkCommandType2Command || defined(INCLUDE_ComStSt25sdkCommandType2Command))
#define ComStSt25sdkCommandType2Command_

#define RESTRICT_ComStSt25sdkCommandType2CommandInterface 1
#define INCLUDE_ComStSt25sdkCommandType2CommandInterface 1
#include "com/st/st25sdk/command/Type2CommandInterface.h"

@class ComStSt25sdkRFReaderInterface_TransceiveMode;
@class IOSByteArray;
@protocol ComStSt25sdkRFReaderInterface;
@protocol JavaUtilList;

@interface ComStSt25sdkCommandType2Command : NSObject < ComStSt25sdkCommandType2CommandInterface > {
 @public
  ComStSt25sdkRFReaderInterface_TransceiveMode *transceiveMode_;
  jint mBlockSizeInBytes_;
  jint mNumberOfReadBlocks_;
  jint mNumberOfWriteBlocks_;
}
@property (readonly, class) jbyte TYPE2_CMD_READ NS_SWIFT_NAME(TYPE2_CMD_READ);
@property (readonly, class) jbyte TYPE2_CMD_WRITE NS_SWIFT_NAME(TYPE2_CMD_WRITE);
@property (readonly, class) jbyte TYPE2_CMD_SECTOR_SELECT NS_SWIFT_NAME(TYPE2_CMD_SECTOR_SELECT);
@property (readonly, class) jint DEFAULT_NBR_OF_BYTES_PER_BLOCK NS_SWIFT_NAME(DEFAULT_NBR_OF_BYTES_PER_BLOCK);
@property (readonly, class) jint DEFAULT_NBR_OF_BLOCKS_PER_READ NS_SWIFT_NAME(DEFAULT_NBR_OF_BLOCKS_PER_READ);
@property (readonly, class) jint DEFAULT_NBR_OF_BLOCKS_PER_WRITE NS_SWIFT_NAME(DEFAULT_NBR_OF_BLOCKS_PER_WRITE);
@property (readonly, class) jint DEFAULT_SECTOR_SIZE_IN_BLOCKS NS_SWIFT_NAME(DEFAULT_SECTOR_SIZE_IN_BLOCKS);
@property (readonly, class) jint NFC_TYPE2_ACK NS_SWIFT_NAME(NFC_TYPE2_ACK);

+ (jbyte)TYPE2_CMD_READ;

+ (jbyte)TYPE2_CMD_WRITE;

+ (jbyte)TYPE2_CMD_SECTOR_SELECT;

+ (jint)DEFAULT_NBR_OF_BYTES_PER_BLOCK;

+ (jint)DEFAULT_NBR_OF_BLOCKS_PER_READ;

+ (jint)DEFAULT_NBR_OF_BLOCKS_PER_WRITE;

+ (jint)DEFAULT_SECTOR_SIZE_IN_BLOCKS;

+ (jint)NFC_TYPE2_ACK;

#pragma mark Public

- (instancetype __nonnull)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader;

- (instancetype __nonnull)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                                        withInt:(jint)blockSize
                                                        withInt:(jint)numberOfReadBlocks
                                                        withInt:(jint)numberOfWriteBlocks;

- (jint)getBlockSize;

- (jint)getReadDataSize;

- (jint)getWriteDataSize;

- (IOSByteArray *)readWithByte:(jbyte)blockNumber;

- (IOSByteArray *)readBlocksWithInt:(jint)firstBlockAddress
                            withInt:(jint)sizeInBlocks;

- (IOSByteArray *)readBytesWithInt:(jint)byteAddress
                           withInt:(jint)nbOfBytesToRead;

- (IOSByteArray *)sectorSelectWithByte:(jbyte)sectorNumber;

- (IOSByteArray *)sectorSelectCmdPacket1;

- (IOSByteArray *)sectorSelectCmdPacket2WithByte:(jbyte)sectorNumber;

- (void)setOtpBlocksListWithJavaUtilList:(id<JavaUtilList>)otpBlocksList;

- (IOSByteArray *)transceiveWithNSString:(NSString *)commandName
                           withByteArray:(IOSByteArray *)data;

- (IOSByteArray *)writeWithByte:(jbyte)blockNumber
                  withByteArray:(IOSByteArray *)data;

- (IOSByteArray *)writeWithByte:(jbyte)blockNumber
                  withByteArray:(IOSByteArray *)data
                    withBoolean:(jboolean)allowWriteOfOtpBlocks;

- (void)writeBlocksWithInt:(jint)firstBlockAddress
             withByteArray:(IOSByteArray *)data;

- (void)writeBlocksWithInt:(jint)firstBlockAddress
             withByteArray:(IOSByteArray *)data
               withBoolean:(jboolean)allowWriteOfOtpBlocks;

- (void)writeBytesWithInt:(jint)byteAddress
            withByteArray:(IOSByteArray *)data;

- (void)writeBytesWithInt:(jint)byteAddress
            withByteArray:(IOSByteArray *)data
              withBoolean:(jboolean)allowWriteOfOtpBlocks;

#pragma mark Protected

- (void)checkType2ResponseWithByteArray:(IOSByteArray *)response;

- (void)generateNackExceptionWithByteArray:(IOSByteArray *)response;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComStSt25sdkCommandType2Command)

J2OBJC_FIELD_SETTER(ComStSt25sdkCommandType2Command, transceiveMode_, ComStSt25sdkRFReaderInterface_TransceiveMode *)

inline jbyte ComStSt25sdkCommandType2Command_get_TYPE2_CMD_READ(void);
#define ComStSt25sdkCommandType2Command_TYPE2_CMD_READ 48
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkCommandType2Command, TYPE2_CMD_READ, jbyte)

inline jbyte ComStSt25sdkCommandType2Command_get_TYPE2_CMD_WRITE(void);
#define ComStSt25sdkCommandType2Command_TYPE2_CMD_WRITE -94
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkCommandType2Command, TYPE2_CMD_WRITE, jbyte)

inline jbyte ComStSt25sdkCommandType2Command_get_TYPE2_CMD_SECTOR_SELECT(void);
#define ComStSt25sdkCommandType2Command_TYPE2_CMD_SECTOR_SELECT -62
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkCommandType2Command, TYPE2_CMD_SECTOR_SELECT, jbyte)

inline jint ComStSt25sdkCommandType2Command_get_DEFAULT_NBR_OF_BYTES_PER_BLOCK(void);
#define ComStSt25sdkCommandType2Command_DEFAULT_NBR_OF_BYTES_PER_BLOCK 4
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkCommandType2Command, DEFAULT_NBR_OF_BYTES_PER_BLOCK, jint)

inline jint ComStSt25sdkCommandType2Command_get_DEFAULT_NBR_OF_BLOCKS_PER_READ(void);
#define ComStSt25sdkCommandType2Command_DEFAULT_NBR_OF_BLOCKS_PER_READ 4
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkCommandType2Command, DEFAULT_NBR_OF_BLOCKS_PER_READ, jint)

inline jint ComStSt25sdkCommandType2Command_get_DEFAULT_NBR_OF_BLOCKS_PER_WRITE(void);
#define ComStSt25sdkCommandType2Command_DEFAULT_NBR_OF_BLOCKS_PER_WRITE 1
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkCommandType2Command, DEFAULT_NBR_OF_BLOCKS_PER_WRITE, jint)

inline jint ComStSt25sdkCommandType2Command_get_DEFAULT_SECTOR_SIZE_IN_BLOCKS(void);
#define ComStSt25sdkCommandType2Command_DEFAULT_SECTOR_SIZE_IN_BLOCKS 256
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkCommandType2Command, DEFAULT_SECTOR_SIZE_IN_BLOCKS, jint)

inline jint ComStSt25sdkCommandType2Command_get_NFC_TYPE2_ACK(void);
#define ComStSt25sdkCommandType2Command_NFC_TYPE2_ACK 10
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkCommandType2Command, NFC_TYPE2_ACK, jint)

FOUNDATION_EXPORT void ComStSt25sdkCommandType2Command_initWithComStSt25sdkRFReaderInterface_(ComStSt25sdkCommandType2Command *self, id<ComStSt25sdkRFReaderInterface> reader);

FOUNDATION_EXPORT ComStSt25sdkCommandType2Command *new_ComStSt25sdkCommandType2Command_initWithComStSt25sdkRFReaderInterface_(id<ComStSt25sdkRFReaderInterface> reader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComStSt25sdkCommandType2Command *create_ComStSt25sdkCommandType2Command_initWithComStSt25sdkRFReaderInterface_(id<ComStSt25sdkRFReaderInterface> reader);

FOUNDATION_EXPORT void ComStSt25sdkCommandType2Command_initWithComStSt25sdkRFReaderInterface_withInt_withInt_withInt_(ComStSt25sdkCommandType2Command *self, id<ComStSt25sdkRFReaderInterface> reader, jint blockSize, jint numberOfReadBlocks, jint numberOfWriteBlocks);

FOUNDATION_EXPORT ComStSt25sdkCommandType2Command *new_ComStSt25sdkCommandType2Command_initWithComStSt25sdkRFReaderInterface_withInt_withInt_withInt_(id<ComStSt25sdkRFReaderInterface> reader, jint blockSize, jint numberOfReadBlocks, jint numberOfWriteBlocks) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComStSt25sdkCommandType2Command *create_ComStSt25sdkCommandType2Command_initWithComStSt25sdkRFReaderInterface_withInt_withInt_withInt_(id<ComStSt25sdkRFReaderInterface> reader, jint blockSize, jint numberOfReadBlocks, jint numberOfWriteBlocks);

J2OBJC_TYPE_LITERAL_HEADER(ComStSt25sdkCommandType2Command)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComStSt25sdkCommandType2Command")
