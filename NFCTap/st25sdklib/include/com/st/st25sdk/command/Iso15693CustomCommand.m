//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/command/Iso15693CustomCommand.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/command/Iso15693Command.h"
#include "com/st/st25sdk/command/Iso15693CustomCommand.h"
#include "com/st/st25sdk/command/Iso15693Protocol.h"
#include "com/st/st25sdk/type5/Type5Tag.h"
#include "java/lang/System.h"

@interface ComStSt25sdkCommandIso15693CustomCommand ()

- (IOSByteArray *)buildInventoryInitiatedFrameWithByte:(jbyte)flag
                                              withByte:(jbyte)maskLengthInBits
                                         withByteArray:(IOSByteArray *)maskValue
                                           withBoolean:(jboolean)isAFISet
                                              withByte:(jbyte)afiField;

- (IOSByteArray *)buildFastInventoryInitiatedFrameWithByte:(jbyte)flag
                                                  withByte:(jbyte)maskLengthInBits
                                             withByteArray:(IOSByteArray *)maskValue
                                               withBoolean:(jboolean)isAFISet
                                                  withByte:(jbyte)afiField;

- (IOSByteArray *)buildInventoryReadFrameWithByte:(jbyte)flag
                                         withByte:(jbyte)maskLengthInBits
                                    withByteArray:(IOSByteArray *)maskValue
                                      withBoolean:(jboolean)isAFISet
                                         withByte:(jbyte)afiField
                                         withByte:(jbyte)blockAddress
                                         withByte:(jbyte)nbrOfBlocks;

- (IOSByteArray *)buildFastInventoryReadFrameWithByte:(jbyte)flag
                                             withByte:(jbyte)maskLengthInBits
                                        withByteArray:(IOSByteArray *)maskValue
                                          withBoolean:(jboolean)isAFISet
                                             withByte:(jbyte)afiField
                                             withByte:(jbyte)blockAddress
                                             withByte:(jbyte)nbrOfBlocks;

@end

__attribute__((unused)) static IOSByteArray *ComStSt25sdkCommandIso15693CustomCommand_buildInventoryInitiatedFrameWithByte_withByte_withByteArray_withBoolean_withByte_(ComStSt25sdkCommandIso15693CustomCommand *self, jbyte flag, jbyte maskLengthInBits, IOSByteArray *maskValue, jboolean isAFISet, jbyte afiField);

__attribute__((unused)) static IOSByteArray *ComStSt25sdkCommandIso15693CustomCommand_buildFastInventoryInitiatedFrameWithByte_withByte_withByteArray_withBoolean_withByte_(ComStSt25sdkCommandIso15693CustomCommand *self, jbyte flag, jbyte maskLengthInBits, IOSByteArray *maskValue, jboolean isAFISet, jbyte afiField);

__attribute__((unused)) static IOSByteArray *ComStSt25sdkCommandIso15693CustomCommand_buildInventoryReadFrameWithByte_withByte_withByteArray_withBoolean_withByte_withByte_withByte_(ComStSt25sdkCommandIso15693CustomCommand *self, jbyte flag, jbyte maskLengthInBits, IOSByteArray *maskValue, jboolean isAFISet, jbyte afiField, jbyte blockAddress, jbyte nbrOfBlocks);

__attribute__((unused)) static IOSByteArray *ComStSt25sdkCommandIso15693CustomCommand_buildFastInventoryReadFrameWithByte_withByte_withByteArray_withBoolean_withByte_withByte_withByte_(ComStSt25sdkCommandIso15693CustomCommand *self, jbyte flag, jbyte maskLengthInBits, IOSByteArray *maskValue, jboolean isAFISet, jbyte afiField, jbyte blockAddress, jbyte nbrOfBlocks);

@implementation ComStSt25sdkCommandIso15693CustomCommand

+ (jbyte)ISO15693_CUSTOM_ST_CMD_READ_CONFIG {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_READ_CONFIG;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_WRITE_CONFIG {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_CONFIG;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_READ_DYN_CONFIG {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_READ_DYN_CONFIG;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_WRITE_DYN_CONFIG {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_DYN_CONFIG;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_WRITE_PASSWORD {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_PASSWORD;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_LOCK_SECTOR {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_LOCK_SECTOR;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_PRESENT_PASSWORD {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_PRESENT_PASSWORD;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_GET_RANDOM_NUMBER {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_GET_RANDOM_NUMBER;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_FAST_READ_SINGLE_BLOCK {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_READ_SINGLE_BLOCK;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_FAST_READ_MULTIPLE_BLOCK {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_READ_MULTIPLE_BLOCK;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_FAST_READ_DYN_CONFIG {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_READ_DYN_CONFIG;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_FAST_WRITE_DYN_CONFIG {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_WRITE_DYN_CONFIG;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_FAST_EXTENDED_READ_MULTIPLE_BLOCK {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_EXTENDED_READ_MULTIPLE_BLOCK;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_KILL {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_KILL;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_WRITE_KILL {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_KILL;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_LOCK_KILL {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_LOCK_KILL;
}

+ (jbyte)ISO15693_CUSTOM_ST_PARAM_KILL_ACCESS {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_PARAM_KILL_ACCESS;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_INVENTORY_INITIATED {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_INVENTORY_INITIATED;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_INITIATE {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_INITIATE;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_FAST_INITIATE {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_INITIATE;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_FAST_INVENTORY_INITIATED {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_INVENTORY_INITIATED;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_WRITE_EH_CFG {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_EH_CFG;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_SET_RST_EH_EN {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_SET_RST_EH_EN;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_CHECK_EH_EN {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_CHECK_EH_EN;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_WRITE_DO_CFG {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_DO_CFG;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_MANAGE_GPO {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MANAGE_GPO;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_MB_WRITE_MSG {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_WRITE_MSG;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_MB_READ_MSG_LENGTH {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_READ_MSG_LENGTH;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_MB_READ_MSG {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_READ_MSG;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_MB_FAST_WRITE_MSG {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_FAST_WRITE_MSG;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_MB_FAST_READ_MSG_LENGTH {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_FAST_READ_MSG_LENGTH;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_MB_FAST_READ_MSG {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_FAST_READ_MSG;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_SET_EAS {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_SET_EAS;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_RESET_EAS {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_RESET_EAS;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_LOCK_EAS {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_LOCK_EAS;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_ENABLE_EAS {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_ENABLE_EAS;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_WRITE_EAS_ID {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_EAS_ID;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_WRITE_EAS_CONFIG {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_EAS_CONFIG;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_ENABLE_UNTRACEABLE_MODE {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_ENABLE_UNTRACEABLE_MODE;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_TOGGLE_UNTRACEABLE_MODE {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_TOGGLE_UNTRACEABLE_MODE;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_INVENTORY_READ {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_INVENTORY_READ;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_FAST_INVENTORY_READ {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_INVENTORY_READ;
}

+ (jbyte)ISO15693_CUSTOM_ST_CMD_READ_SIGNATURE {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_READ_SIGNATURE;
}

+ (jbyte)ISO15693_CUSTOM_ST_PARAM_UNTRACEABLE_ACCESS_CODE {
  return ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_PARAM_UNTRACEABLE_ACCESS_CODE;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, reader, uid);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                             withByte:(jbyte)flag {
  ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(self, reader, uid, flag);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                              withInt:(jint)nbrOfBytesPerBlock {
  ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(self, reader, uid, nbrOfBytesPerBlock);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                             withByte:(jbyte)flag
                                              withInt:(jint)nbrOfBytesPerBlock {
  ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, flag, nbrOfBytesPerBlock);
  return self;
}

- (jbyte)killWithByteArray:(IOSByteArray *)unencryptedKillCode {
  return [self killWithByteArray:unencryptedKillCode withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)killWithByteArray:(IOSByteArray *)unencryptedKillCode
                  withByte:(jbyte)flag
             withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  if (unencryptedKillCode == nil || unencryptedKillCode->size_ != 4) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + 4];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_KILL;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_PARAM_KILL_ACCESS;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(unencryptedKillCode, 0, frame, headerSize + 1, unencryptedKillCode->size_);
  response = [self transceiveWithNSString:@"kill" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)writeKillWithByteArray:(IOSByteArray *)unencryptedKillPassword {
  return [self writeKillWithByteArray:unencryptedKillPassword withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)writeKillWithByteArray:(IOSByteArray *)unencryptedKillPassword
                       withByte:(jbyte)flag
                  withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  if (unencryptedKillPassword == nil || unencryptedKillPassword->size_ != 4) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + 4];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_KILL;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_PARAM_KILL_ACCESS;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(unencryptedKillPassword, 0, frame, headerSize + 1, unencryptedKillPassword->size_);
  response = [self transceiveWithNSString:@"write kill" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)lockKill {
  return [self lockKillWithByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)lockKillWithByte:(jbyte)flag
            withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  jbyte lockKillProtectStatus = (jint) 0x01;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_LOCK_KILL;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_PARAM_KILL_ACCESS;
  *IOSByteArray_GetRef(frame, headerSize + 1) = lockKillProtectStatus;
  response = [self transceiveWithNSString:@"lock kill" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (IOSByteArray *)initiateWithByte:(jbyte)flag {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE;
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_INITIATE;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  return [self transceiveWithNSString:@"initiate" withByteArray:frame];
}

- (IOSByteArray *)inventoryInitiatedWithByte:(jbyte)flag {
  return [self inventoryInitiatedWithByte:flag withByte:(jbyte) (jint) 0x00 withByteArray:nil];
}

- (IOSByteArray *)inventoryInitiatedWithByte:(jbyte)flag
                                    withByte:(jbyte)afiField {
  return ComStSt25sdkCommandIso15693CustomCommand_buildInventoryInitiatedFrameWithByte_withByte_withByteArray_withBoolean_withByte_(self, flag, (jbyte) (jint) 0x00, nil, true, afiField);
}

- (IOSByteArray *)inventoryInitiatedWithByte:(jbyte)flag
                                    withByte:(jbyte)maskLengthInBits
                               withByteArray:(IOSByteArray *)maskValue {
  return ComStSt25sdkCommandIso15693CustomCommand_buildInventoryInitiatedFrameWithByte_withByte_withByteArray_withBoolean_withByte_(self, flag, maskLengthInBits, maskValue, false, (jbyte) (jint) 0x00);
}

- (IOSByteArray *)inventoryInitiatedWithByte:(jbyte)flag
                                    withByte:(jbyte)maskLengthInBits
                               withByteArray:(IOSByteArray *)maskValue
                                    withByte:(jbyte)afiField {
  return ComStSt25sdkCommandIso15693CustomCommand_buildInventoryInitiatedFrameWithByte_withByte_withByteArray_withBoolean_withByte_(self, flag, maskLengthInBits, maskValue, true, afiField);
}

- (IOSByteArray *)buildInventoryInitiatedFrameWithByte:(jbyte)flag
                                              withByte:(jbyte)maskLengthInBits
                                         withByteArray:(IOSByteArray *)maskValue
                                           withBoolean:(jboolean)isAFISet
                                              withByte:(jbyte)afiField {
  return ComStSt25sdkCommandIso15693CustomCommand_buildInventoryInitiatedFrameWithByte_withByte_withByteArray_withBoolean_withByte_(self, flag, maskLengthInBits, maskValue, isAFISet, afiField);
}

- (IOSByteArray *)fastInitiateWithByte:(jbyte)flag {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE;
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_INITIATE;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  return [self transceiveWithNSString:@"fastInitiate" withByteArray:frame];
}

- (IOSByteArray *)fastInventoryInitiatedWithByte:(jbyte)flag {
  return [self fastInventoryInitiatedWithByte:flag withByte:(jbyte) (jint) 0x00 withByteArray:nil];
}

- (IOSByteArray *)fastInventoryInitiatedWithByte:(jbyte)flag
                                        withByte:(jbyte)afiField {
  return ComStSt25sdkCommandIso15693CustomCommand_buildFastInventoryInitiatedFrameWithByte_withByte_withByteArray_withBoolean_withByte_(self, flag, (jbyte) (jint) 0x00, nil, true, afiField);
}

- (IOSByteArray *)fastInventoryInitiatedWithByte:(jbyte)flag
                                        withByte:(jbyte)maskLengthInBits
                                   withByteArray:(IOSByteArray *)maskValue {
  return ComStSt25sdkCommandIso15693CustomCommand_buildFastInventoryInitiatedFrameWithByte_withByte_withByteArray_withBoolean_withByte_(self, flag, maskLengthInBits, maskValue, false, (jbyte) (jint) 0x00);
}

- (IOSByteArray *)fastInventoryInitiatedWithByte:(jbyte)flag
                                        withByte:(jbyte)maskLengthInBits
                                   withByteArray:(IOSByteArray *)maskValue
                                        withByte:(jbyte)afiField {
  return ComStSt25sdkCommandIso15693CustomCommand_buildFastInventoryInitiatedFrameWithByte_withByte_withByteArray_withBoolean_withByte_(self, flag, maskLengthInBits, maskValue, true, afiField);
}

- (IOSByteArray *)buildFastInventoryInitiatedFrameWithByte:(jbyte)flag
                                                  withByte:(jbyte)maskLengthInBits
                                             withByteArray:(IOSByteArray *)maskValue
                                               withBoolean:(jboolean)isAFISet
                                                  withByte:(jbyte)afiField {
  return ComStSt25sdkCommandIso15693CustomCommand_buildFastInventoryInitiatedFrameWithByte_withByte_withByteArray_withBoolean_withByte_(self, flag, maskLengthInBits, maskValue, isAFISet, afiField);
}

- (IOSByteArray *)inventoryReadWithByte:(jbyte)flag
                               withByte:(jbyte)blockAddress
                               withByte:(jbyte)nbrOfBlocks {
  return [self inventoryReadWithByte:flag withByte:(jbyte) (jint) 0x00 withByteArray:nil withByte:blockAddress withByte:nbrOfBlocks];
}

- (IOSByteArray *)inventoryReadWithByte:(jbyte)flag
                               withByte:(jbyte)afiField
                               withByte:(jbyte)blockAddress
                               withByte:(jbyte)nbrOfBlocks {
  return ComStSt25sdkCommandIso15693CustomCommand_buildInventoryReadFrameWithByte_withByte_withByteArray_withBoolean_withByte_withByte_withByte_(self, flag, (jbyte) (jint) 0x00, nil, true, afiField, blockAddress, nbrOfBlocks);
}

- (IOSByteArray *)inventoryReadWithByte:(jbyte)flag
                               withByte:(jbyte)maskLengthInBits
                          withByteArray:(IOSByteArray *)maskValue
                               withByte:(jbyte)blockAddress
                               withByte:(jbyte)nbrOfBlocks {
  return ComStSt25sdkCommandIso15693CustomCommand_buildInventoryReadFrameWithByte_withByte_withByteArray_withBoolean_withByte_withByte_withByte_(self, flag, maskLengthInBits, maskValue, false, (jbyte) (jint) 0x00, blockAddress, nbrOfBlocks);
}

- (IOSByteArray *)inventoryReadWithByte:(jbyte)flag
                               withByte:(jbyte)maskLengthInBits
                          withByteArray:(IOSByteArray *)maskValue
                               withByte:(jbyte)afiField
                               withByte:(jbyte)blockAddress
                               withByte:(jbyte)nbrOfBlocks {
  return ComStSt25sdkCommandIso15693CustomCommand_buildInventoryReadFrameWithByte_withByte_withByteArray_withBoolean_withByte_withByte_withByte_(self, flag, maskLengthInBits, maskValue, true, afiField, blockAddress, nbrOfBlocks);
}

- (IOSByteArray *)buildInventoryReadFrameWithByte:(jbyte)flag
                                         withByte:(jbyte)maskLengthInBits
                                    withByteArray:(IOSByteArray *)maskValue
                                      withBoolean:(jboolean)isAFISet
                                         withByte:(jbyte)afiField
                                         withByte:(jbyte)blockAddress
                                         withByte:(jbyte)nbrOfBlocks {
  return ComStSt25sdkCommandIso15693CustomCommand_buildInventoryReadFrameWithByte_withByte_withByteArray_withBoolean_withByte_withByte_withByte_(self, flag, maskLengthInBits, maskValue, isAFISet, afiField, blockAddress, nbrOfBlocks);
}

- (IOSByteArray *)fastInventoryReadWithByte:(jbyte)flag
                                   withByte:(jbyte)blockAddress
                                   withByte:(jbyte)nbrOfBlocks {
  return [self fastInventoryReadWithByte:flag withByte:(jbyte) (jint) 0x00 withByteArray:nil withByte:blockAddress withByte:nbrOfBlocks];
}

- (IOSByteArray *)fastInventoryReadWithByte:(jbyte)flag
                                   withByte:(jbyte)maskLengthInBits
                              withByteArray:(IOSByteArray *)maskValue
                                   withByte:(jbyte)blockAddress
                                   withByte:(jbyte)nbrOfBlocks {
  return ComStSt25sdkCommandIso15693CustomCommand_buildFastInventoryReadFrameWithByte_withByte_withByteArray_withBoolean_withByte_withByte_withByte_(self, flag, maskLengthInBits, maskValue, false, (jbyte) (jint) 0x00, blockAddress, nbrOfBlocks);
}

- (IOSByteArray *)fastInventoryReadWithByte:(jbyte)flag
                                   withByte:(jbyte)afiField
                                   withByte:(jbyte)blockAddress
                                   withByte:(jbyte)nbrOfBlocks {
  return ComStSt25sdkCommandIso15693CustomCommand_buildFastInventoryReadFrameWithByte_withByte_withByteArray_withBoolean_withByte_withByte_withByte_(self, flag, (jbyte) (jint) 0x00, nil, true, afiField, blockAddress, nbrOfBlocks);
}

- (IOSByteArray *)fastInventoryReadWithByte:(jbyte)flag
                                   withByte:(jbyte)maskLengthInBits
                              withByteArray:(IOSByteArray *)maskValue
                                   withByte:(jbyte)afiField
                                   withByte:(jbyte)blockAddress
                                   withByte:(jbyte)nbrOfBlocks {
  return ComStSt25sdkCommandIso15693CustomCommand_buildFastInventoryReadFrameWithByte_withByte_withByteArray_withBoolean_withByte_withByte_withByte_(self, flag, maskLengthInBits, maskValue, true, afiField, blockAddress, nbrOfBlocks);
}

- (IOSByteArray *)buildFastInventoryReadFrameWithByte:(jbyte)flag
                                             withByte:(jbyte)maskLengthInBits
                                        withByteArray:(IOSByteArray *)maskValue
                                          withBoolean:(jboolean)isAFISet
                                             withByte:(jbyte)afiField
                                             withByte:(jbyte)blockAddress
                                             withByte:(jbyte)nbrOfBlocks {
  return ComStSt25sdkCommandIso15693CustomCommand_buildFastInventoryReadFrameWithByte_withByte_withByteArray_withBoolean_withByte_withByte_withByte_(self, flag, maskLengthInBits, maskValue, isAFISet, afiField, blockAddress, nbrOfBlocks);
}

- (jbyte)writeConfigWithByte:(jbyte)configId
                    withByte:(jbyte)newAttributeValue {
  return [self writeConfigWithByte:configId withByte:newAttributeValue withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)writeConfigWithByte:(jbyte)configId
                    withByte:(jbyte)newAttributeValue
                    withByte:(jbyte)flag
               withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_CONFIG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = configId;
  *IOSByteArray_GetRef(frame, headerSize + 1) = newAttributeValue;
  @try {
    IOSByteArray *response = [self transceiveWithNSString:@"writeConfig" withByteArray:frame];
    return IOSByteArray_Get(nil_chk(response), 0);
  }
  @catch (ComStSt25sdkSTException *e) {
    if ([e getError] == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_IS_LOCKED)) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CONFIG_PASSWORD_NEEDED));
    }
    @throw (e);
  }
}

- (jbyte)writeConfigWithByte:(jbyte)configId
               withByteArray:(IOSByteArray *)newRegisterValue {
  return [self writeConfigWithByte:configId withByteArray:newRegisterValue withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)writeConfigWithByte:(jbyte)configId
               withByteArray:(IOSByteArray *)newRegisterValue
                    withByte:(jbyte)flag
               withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  if (newRegisterValue == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + newRegisterValue->size_];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_CONFIG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = configId;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(newRegisterValue, 0, frame, headerSize + 1, newRegisterValue->size_);
  @try {
    IOSByteArray *response = [self transceiveWithNSString:@"writeConfig" withByteArray:frame];
    return IOSByteArray_Get(nil_chk(response), 0);
  }
  @catch (ComStSt25sdkSTException *e) {
    if ([e getError] == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_IS_LOCKED)) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CONFIG_PASSWORD_NEEDED));
    }
    @throw (e);
  }
}

- (jbyte)writeConfigWithByte:(jbyte)registerFeatureId
                    withByte:(jbyte)registerParameterId
                    withByte:(jbyte)newAttributeValue {
  return [self writeConfigWithByte:registerFeatureId withByte:registerParameterId withByte:newAttributeValue withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)writeConfigWithByte:(jbyte)registerFeatureId
                    withByte:(jbyte)registerParameterId
                    withByte:(jbyte)newAttributeValue
                    withByte:(jbyte)flag
               withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_CONFIG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = registerFeatureId;
  *IOSByteArray_GetRef(frame, headerSize + 1) = registerParameterId;
  *IOSByteArray_GetRef(frame, headerSize + 2) = newAttributeValue;
  @try {
    IOSByteArray *response = [self transceiveWithNSString:@"writeConfig" withByteArray:frame];
    return IOSByteArray_Get(nil_chk(response), 0);
  }
  @catch (ComStSt25sdkSTException *e) {
    if ([e getError] == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_IS_LOCKED)) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CONFIG_PASSWORD_NEEDED));
    }
    @throw (e);
  }
}

- (jbyte)writeConfigWithByte:(jbyte)registerFeatureId
                    withByte:(jbyte)registerParameterId
               withByteArray:(IOSByteArray *)newRegisterValue {
  return [self writeConfigWithByte:registerFeatureId withByte:registerParameterId withByteArray:newRegisterValue withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)writeConfigWithByte:(jbyte)registerFeatureId
                    withByte:(jbyte)registerParameterId
               withByteArray:(IOSByteArray *)newRegisterValue
                    withByte:(jbyte)flag
               withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  if (newRegisterValue == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + 1 + newRegisterValue->size_];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_CONFIG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = registerFeatureId;
  *IOSByteArray_GetRef(frame, headerSize + 1) = registerParameterId;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(newRegisterValue, 0, frame, headerSize + 2, newRegisterValue->size_);
  @try {
    IOSByteArray *response = [self transceiveWithNSString:@"writeConfig" withByteArray:frame];
    return IOSByteArray_Get(nil_chk(response), 0);
  }
  @catch (ComStSt25sdkSTException *e) {
    if ([e getError] == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_IS_LOCKED)) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CONFIG_PASSWORD_NEEDED));
    }
    @throw (e);
  }
}

- (jbyte)writeDynConfigWithByte:(jbyte)configId
                       withByte:(jbyte)newAttributeValue {
  return [self writeDynConfigWithByte:configId withByte:newAttributeValue withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)writeDynConfigWithByte:(jbyte)configId
                       withByte:(jbyte)newAttributeValue
                       withByte:(jbyte)flag
                  withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_DYN_CONFIG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = configId;
  *IOSByteArray_GetRef(frame, headerSize + 1) = newAttributeValue;
  @try {
    IOSByteArray *response = [self transceiveWithNSString:@"writeDynConfig" withByteArray:frame];
    return IOSByteArray_Get(nil_chk(response), 0);
  }
  @catch (ComStSt25sdkSTException *e) {
    if ([e getError] == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_IS_LOCKED)) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CONFIG_PASSWORD_NEEDED));
    }
    @throw (e);
  }
}

- (jbyte)fastWriteDynConfigWithByte:(jbyte)configId
                           withByte:(jbyte)newAttributeValue {
  return [self fastWriteDynConfigWithByte:configId withByte:newAttributeValue withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)fastWriteDynConfigWithByte:(jbyte)configId
                           withByte:(jbyte)newAttributeValue
                           withByte:(jbyte)flag
                      withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_WRITE_DYN_CONFIG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = configId;
  *IOSByteArray_GetRef(frame, headerSize + 1) = newAttributeValue;
  @try {
    IOSByteArray *response = [self transceiveWithNSString:@"fastWriteDynConfig" withByteArray:frame];
    return IOSByteArray_Get(nil_chk(response), 0);
  }
  @catch (ComStSt25sdkSTException *e) {
    if ([e getError] == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_IS_LOCKED)) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CONFIG_PASSWORD_NEEDED));
    }
    @throw (e);
  }
}

- (IOSByteArray *)getRandomNumber {
  return [self getRandomNumberWithByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)getRandomNumberWithByte:(jbyte)flag {
  return [self getRandomNumberWithByte:flag withByteArray:mUid_];
}

- (IOSByteArray *)getRandomNumberWithByte:(jbyte)flag
                            withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response = nil;
  ComStSt25sdkRFReaderInterface_TransceiveMode *originalTransceiveMode = [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) getTransceiveMode];
  @try {
    [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) setTransceiveModeWithComStSt25sdkRFReaderInterface_TransceiveMode:JreLoadEnum(ComStSt25sdkRFReaderInterface_TransceiveMode, SILENT)];
    jint headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
    IOSByteArray *frame = [IOSByteArray newArrayWithLength:headerSize];
    *IOSByteArray_GetRef(frame, 0) = flag;
    *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_GET_RANDOM_NUMBER;
    *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
    if ([self uidNeededWithByte:flag]) {
      [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
    }
    response = [self transceiveWithNSString:@"getRandomNumber" withByteArray:frame];
  }
  @finally {
    [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) setTransceiveModeWithComStSt25sdkRFReaderInterface_TransceiveMode:originalTransceiveMode];
  }
  return response;
}

- (IOSByteArray *)readConfigWithByte:(jbyte)configId {
  return [self readConfigWithByte:configId withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)readConfigWithByte:(jbyte)configId
                            withByte:(jbyte)flag
                       withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_READ_CONFIG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  *IOSByteArray_GetRef(frame, headerSize) = configId;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  response = [self transceiveWithNSString:@"readConfig" withByteArray:frame];
  return response;
}

- (IOSByteArray *)readConfigWithByte:(jbyte)fid
                            withByte:(jbyte)pid {
  return [self readConfigWithByte:fid withByte:pid withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)readConfigWithByte:(jbyte)fid
                            withByte:(jbyte)pid
                            withByte:(jbyte)flag
                       withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 2];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_READ_CONFIG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  *IOSByteArray_GetRef(frame, headerSize) = fid;
  *IOSByteArray_GetRef(frame, headerSize + 1) = pid;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  @try {
    response = [self transceiveWithNSString:@"readConfig" withByteArray:frame];
    return response;
  }
  @catch (ComStSt25sdkSTException *e) {
    if ([e getError] == JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_PROTECTED)) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CONFIG_PASSWORD_NEEDED));
    }
    @throw (e);
  }
}

- (IOSByteArray *)readDynConfigWithByte:(jbyte)configId {
  return [self readDynConfigWithByte:configId withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)readDynConfigWithByte:(jbyte)configId
                               withByte:(jbyte)flag
                          withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_READ_DYN_CONFIG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  *IOSByteArray_GetRef(frame, headerSize) = configId;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  response = [self transceiveWithNSString:@"readDynConfig" withByteArray:frame];
  return response;
}

- (IOSByteArray *)fastReadDynConfigWithByte:(jbyte)configId {
  return [self fastReadDynConfigWithByte:configId withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)fastReadDynConfigWithByte:(jbyte)configId
                                   withByte:(jbyte)flag
                              withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_READ_DYN_CONFIG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  *IOSByteArray_GetRef(frame, headerSize) = configId;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  response = [self transceiveWithNSString:@"fastReadDynConfig" withByteArray:frame];
  return response;
}

- (jbyte)presentPwdWithByte:(jbyte)passwordNumber
              withByteArray:(IOSByteArray *)password {
  return [self presentPwdWithByte:passwordNumber withByteArray:password withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)presentPwdWithByte:(jbyte)passwordNumber
              withByteArray:(IOSByteArray *)password
                   withByte:(jbyte)flag
              withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  if (password == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + password->size_];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_PRESENT_PASSWORD;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = passwordNumber;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(password, 0, frame, headerSize + 1, password->size_);
  IOSByteArray *response = [self transceiveWithNSString:@"presentPwd" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)writePwdWithByte:(jbyte)passwordNumber
            withByteArray:(IOSByteArray *)newPassword {
  return [self writePwdWithByte:passwordNumber withByteArray:newPassword withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)writePwdWithByte:(jbyte)passwordNumber
            withByteArray:(IOSByteArray *)newPassword
                 withByte:(jbyte)flag
            withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  if (newPassword == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + newPassword->size_];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_PASSWORD;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = passwordNumber;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(newPassword, 0, frame, headerSize + 1, newPassword->size_);
  IOSByteArray *response = [self transceiveWithNSString:@"writePwd" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)lockSectorWithByte:(jbyte)blockAddress
                   withByte:(jbyte)securityStatus {
  return [self lockSectorWithByte:blockAddress withByte:securityStatus withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)lockSectorWithByte:(jbyte)blockAddress
                   withByte:(jbyte)securityStatus
                   withByte:(jbyte)flag
              withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_LOCK_SECTOR;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = blockAddress;
  *IOSByteArray_GetRef(frame, headerSize + 1) = securityStatus;
  response = [self transceiveWithNSString:@"lockSector" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (IOSByteArray *)fastReadSingleBlockWithByte:(jbyte)blockAddress {
  return [self fastReadSingleBlockWithByte:blockAddress withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)fastReadSingleBlockWithByte:(jbyte)blockAddress
                                     withByte:(jbyte)flag
                                withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_READ_SINGLE_BLOCK;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = blockAddress;
  return [self transceiveWithNSString:@"fastReadSingleBlock" withByteArray:frame];
}

- (IOSByteArray *)fastReadMultipleBlockWithByte:(jbyte)blockAddress
                                       withByte:(jbyte)nbrOfBlocks {
  return [self fastReadMultipleBlockWithByte:blockAddress withByte:nbrOfBlocks withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)fastReadMultipleBlockWithByte:(jbyte)blockAddress
                                       withByte:(jbyte)nbrOfBlocks
                                       withByte:(jbyte)flag
                                  withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_READ_MULTIPLE_BLOCK;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = blockAddress;
  *IOSByteArray_GetRef(frame, headerSize + 1) = nbrOfBlocks;
  return [self transceiveWithNSString:@"fastReadMultipleBlock" withByteArray:frame];
}

- (IOSByteArray *)fastExtendedReadSingleBlockWithByteArray:(IOSByteArray *)blockAddress {
  return [self fastExtendedReadSingleBlockWithByteArray:blockAddress withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)fastExtendedReadSingleBlockWithByteArray:(IOSByteArray *)blockAddress
                                                  withByte:(jbyte)flag
                                             withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  if (blockAddress == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 2];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = IOSByteArray_Get(nil_chk(blockAddress), 1);
  *IOSByteArray_GetRef(frame, headerSize + 1) = IOSByteArray_Get(blockAddress, 0);
  return [self transceiveWithNSString:@"fastExtendedReadSingleBlock" withByteArray:frame];
}

- (IOSByteArray *)fastExtendedReadMultipleBlockWithByteArray:(IOSByteArray *)blockAddress
                                               withByteArray:(IOSByteArray *)nbrOfBlocks {
  return [self fastExtendedReadMultipleBlockWithByteArray:blockAddress withByteArray:nbrOfBlocks withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)fastExtendedReadMultipleBlockWithByteArray:(IOSByteArray *)blockAddress
                                               withByteArray:(IOSByteArray *)nbrOfBlocks
                                                    withByte:(jbyte)flag
                                               withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  if ((blockAddress == nil) || (((IOSByteArray *) nil_chk(blockAddress))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ((nbrOfBlocks == nil) || (((IOSByteArray *) nil_chk(nbrOfBlocks))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 2 + 2];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_EXTENDED_READ_MULTIPLE_BLOCK;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = IOSByteArray_Get(nil_chk(blockAddress), 1);
  *IOSByteArray_GetRef(frame, headerSize + 1) = IOSByteArray_Get(blockAddress, 0);
  *IOSByteArray_GetRef(frame, headerSize + 2) = IOSByteArray_Get(nil_chk(nbrOfBlocks), 1);
  *IOSByteArray_GetRef(frame, headerSize + 3) = IOSByteArray_Get(nbrOfBlocks, 0);
  return [self transceiveWithNSString:@"fastExtendedReadMultipleBlock" withByteArray:frame];
}

- (IOSByteArray *)readCfg {
  return [self readCfgWithByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)readCfgWithByte:(jbyte)flag
                    withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_READ_CONFIG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  return [self transceiveWithNSString:@"readCfg" withByteArray:frame];
}

- (jbyte)writeEHCfgWithByte:(jbyte)data
                   withByte:(jbyte)flag
              withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_EH_CFG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = data;
  response = [self transceiveWithNSString:@"writeEHCfg" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)writeDOCfgWithByte:(jbyte)data
                   withByte:(jbyte)flag
              withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_DO_CFG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = data;
  response = [self transceiveWithNSString:@"writeDOCfg" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)setRstEHEnWithByte:(jbyte)data
                   withByte:(jbyte)flag
              withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_SET_RST_EH_EN;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = data;
  response = [self transceiveWithNSString:@"setRstEHEn" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (IOSByteArray *)checkEHEnWithByte:(jbyte)flag
                      withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_CHECK_EH_EN;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  response = [self transceiveWithNSString:@"checkEHEn" withByteArray:frame];
  return response;
}

- (jbyte)writeMsgWithByte:(jbyte)sizeInBytes
            withByteArray:(IOSByteArray *)buffer {
  return [self writeMsgWithByte:sizeInBytes withByteArray:buffer withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)writeMsgWithByte:(jbyte)sizeInBytes
            withByteArray:(IOSByteArray *)buffer
                 withByte:(jbyte)flag
            withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  jint msgSize = ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(sizeInBytes);
  if ((buffer == nil) || (((IOSByteArray *) nil_chk(buffer))->size_ == 0) || (buffer->size_ < msgSize + 1)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + msgSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_WRITE_MSG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = sizeInBytes;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, frame, headerSize + 1, msgSize + 1);
  IOSByteArray *response = [self transceiveWithNSString:@"writeMsg" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (IOSByteArray *)readMsgWithByte:(jbyte)offset
                         withByte:(jbyte)sizeInBytes {
  return [self readMsgWithByte:offset withByte:sizeInBytes withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)readMsgWithByte:(jbyte)offset
                         withByte:(jbyte)sizeInBytes
                         withByte:(jbyte)flag
                    withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_READ_MSG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = offset;
  *IOSByteArray_GetRef(frame, headerSize + 1) = sizeInBytes;
  return [self transceiveWithNSString:@"readMsg" withByteArray:frame];
}

- (IOSByteArray *)readMsgLength {
  return [self readMsgLengthWithByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)readMsgLengthWithByte:(jbyte)flag
                          withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_READ_MSG_LENGTH;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  return [self transceiveWithNSString:@"readMsgLength" withByteArray:frame];
}

- (jbyte)fastWriteMsgWithByte:(jbyte)sizeInBytes
                withByteArray:(IOSByteArray *)buffer {
  return [self fastWriteMsgWithByte:sizeInBytes withByteArray:buffer withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)fastWriteMsgWithByte:(jbyte)sizeInBytes
                withByteArray:(IOSByteArray *)buffer
                     withByte:(jbyte)flag
                withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  jint msgSize = ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(sizeInBytes);
  if (buffer == nil || buffer->size_ < msgSize) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + msgSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_FAST_WRITE_MSG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = sizeInBytes;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, frame, headerSize + 1, msgSize + 1);
  IOSByteArray *response = [self transceiveWithNSString:@"fastWriteMsg" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (IOSByteArray *)fastReadMsgWithByte:(jbyte)offset
                             withByte:(jbyte)sizeInBytes {
  return [self fastReadMsgWithByte:offset withByte:sizeInBytes withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)fastReadMsgWithByte:(jbyte)offset
                             withByte:(jbyte)sizeInBytes
                             withByte:(jbyte)flag
                        withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_FAST_READ_MSG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = offset;
  *IOSByteArray_GetRef(frame, headerSize + 1) = sizeInBytes;
  return [self transceiveWithNSString:@"fastReadMsg" withByteArray:frame];
}

- (IOSByteArray *)fastReadMsgLength {
  return [self fastReadMsgLengthWithByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)fastReadMsgLengthWithByte:(jbyte)flag
                              withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_FAST_READ_MSG_LENGTH;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  response = [self transceiveWithNSString:@"fastReadMsgLength" withByteArray:frame];
  return response;
}

- (jbyte)manageGpoWithByte:(jbyte)value
                  withByte:(jbyte)flag
             withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MANAGE_GPO;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = value;
  IOSByteArray *response = [self transceiveWithNSString:@"manageGpo" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)enableUntraceableModeWithByteArray:(IOSByteArray *)obfuscatedUntraceableModePassword {
  return [self enableUntraceableModeWithByteArray:obfuscatedUntraceableModePassword withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)enableUntraceableModeWithByteArray:(IOSByteArray *)obfuscatedUntraceableModePassword
                                   withByte:(jbyte)flag
                              withByteArray:(IOSByteArray *)uid {
  return [self enableUntraceableModeWithByteArray:obfuscatedUntraceableModePassword withInt:ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_PARAM_UNTRACEABLE_ACCESS_CODE withByte:flag withByteArray:uid];
}

- (jbyte)enableUntraceableModeWithByteArray:(IOSByteArray *)obfuscatedUntraceableModePassword
                                    withInt:(jint)untraceablePasswordNumber
                                   withByte:(jbyte)flag
                              withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  if (uid == nil || uid->size_ != 8 || obfuscatedUntraceableModePassword == nil || obfuscatedUntraceableModePassword->size_ != 4) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  frame = [IOSByteArray newArrayWithBytes:(jbyte[]){ flag, ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_ENABLE_UNTRACEABLE_MODE, ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE, IOSByteArray_Get(uid, 7), IOSByteArray_Get(uid, 6), IOSByteArray_Get(uid, 5), IOSByteArray_Get(uid, 4), IOSByteArray_Get(uid, 3), IOSByteArray_Get(uid, 2), IOSByteArray_Get(uid, 1), IOSByteArray_Get(uid, 0), (jbyte) untraceablePasswordNumber, IOSByteArray_Get(obfuscatedUntraceableModePassword, 0), IOSByteArray_Get(obfuscatedUntraceableModePassword, 1), IOSByteArray_Get(obfuscatedUntraceableModePassword, 2), IOSByteArray_Get(obfuscatedUntraceableModePassword, 3) } count:16];
  IOSByteArray *response = [self transceiveWithNSString:@"enableUntraceableMode" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)toggleUntraceableModeWithByteArray:(IOSByteArray *)obfuscatedUntraceableModePassword
                                    withInt:(jint)untraceablePasswordNumber {
  return [self toggleUntraceableModeWithByteArray:obfuscatedUntraceableModePassword withInt:untraceablePasswordNumber withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)toggleUntraceableModeWithByteArray:(IOSByteArray *)obfuscatedUntraceableModePassword
                                    withInt:(jint)untraceablePasswordNumber
                                   withByte:(jbyte)flag
                              withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  if (obfuscatedUntraceableModePassword == nil || obfuscatedUntraceableModePassword->size_ != 4) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jint headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 5];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_TOGGLE_UNTRACEABLE_MODE;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = (jbyte) untraceablePasswordNumber;
  *IOSByteArray_GetRef(frame, headerSize + 1) = IOSByteArray_Get(obfuscatedUntraceableModePassword, 0);
  *IOSByteArray_GetRef(frame, headerSize + 2) = IOSByteArray_Get(obfuscatedUntraceableModePassword, 1);
  *IOSByteArray_GetRef(frame, headerSize + 3) = IOSByteArray_Get(obfuscatedUntraceableModePassword, 2);
  *IOSByteArray_GetRef(frame, headerSize + 4) = IOSByteArray_Get(obfuscatedUntraceableModePassword, 3);
  IOSByteArray *response = [self transceiveWithNSString:@"toggleUntraceableMode" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)setEas {
  return [self setEasWithByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)setEasWithByte:(jbyte)flag
          withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_SET_EAS;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  response = [self transceiveWithNSString:@"setEas" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)resetEas {
  return [self resetEasWithByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)resetEasWithByte:(jbyte)flag
            withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_RESET_EAS;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  response = [self transceiveWithNSString:@"resetEas" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)lockEas {
  return [self lockEasWithByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)lockEasWithByte:(jbyte)flag
           withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_LOCK_EAS;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  response = [self transceiveWithNSString:@"lockEas" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (IOSByteArray *)enableEAS {
  return [self enableEASWithByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)enableEASWithByte:(jbyte)flag
                      withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_ENABLE_EAS;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  response = [self transceiveWithNSString:@"enableEAS" withByteArray:frame];
  return response;
}

- (IOSByteArray *)enableEASWithByte:(jbyte)easIdMask
                      withByteArray:(IOSByteArray *)easId
                           withByte:(jbyte)flag
                      withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  if (easId != nil) {
    frame = [IOSByteArray newArrayWithLength:headerSize + 1 + easId->size_];
  }
  else {
    frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  }
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_ENABLE_EAS;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = easIdMask;
  if (easId != nil) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(easId, 0, frame, headerSize + 1, easId->size_);
  }
  response = [self transceiveWithNSString:@"enableEAS" withByteArray:frame];
  return response;
}

- (jbyte)writeEasIdWithByteArray:(IOSByteArray *)easId {
  return [self writeEasIdWithByteArray:easId withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)writeEasIdWithByteArray:(IOSByteArray *)easId
                        withByte:(jbyte)flag
                   withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  if (easId == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + easId->size_];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_EAS_ID;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(easId, 0, frame, headerSize, easId->size_);
  response = [self transceiveWithNSString:@"writeEasId" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)writeEasConfigWithByte:(jbyte)config {
  return [self writeEasConfigWithByte:config withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)writeEasConfigWithByte:(jbyte)config
                       withByte:(jbyte)flag
                  withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_EAS_CONFIG;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  *IOSByteArray_GetRef(frame, headerSize) = config;
  response = [self transceiveWithNSString:@"writeEasConfig" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (IOSByteArray *)readSignature {
  return [self readSignatureWithByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)readSignatureWithByte:(jbyte)flag
                          withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693CustomHeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_READ_SIGNATURE;
  *IOSByteArray_GetRef(frame, 2) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if ([self uidNeededWithByte:flag]) {
    [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE withByteArray:uid];
  }
  response = [self transceiveWithNSString:@"readSignature" withByteArray:frame];
  return response;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "B", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 4, 7, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 8, 5, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 8, 7, 6, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 9, 10, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 12, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 13, 12, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 13, 14, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 13, 15, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 13, 16, 6, -1, -1, -1 },
    { NULL, "[B", 0x2, 17, 18, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 19, 12, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 20, 12, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 20, 14, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 20, 15, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 20, 16, 6, -1, -1, -1 },
    { NULL, "[B", 0x2, 21, 18, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 22, 23, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 22, 24, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 22, 25, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 22, 26, 6, -1, -1, -1 },
    { NULL, "[B", 0x2, 27, 28, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 29, 23, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 29, 25, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 29, 24, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 29, 26, 6, -1, -1, -1 },
    { NULL, "[B", 0x2, 30, 28, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 31, 14, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 31, 32, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 31, 10, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 31, 33, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 31, 23, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 31, 34, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 31, 15, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 31, 35, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 36, 14, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 36, 32, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 37, 14, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 37, 32, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 38, 12, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 38, 10, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 39, 12, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 39, 15, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 39, 14, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 39, 32, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 40, 12, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 40, 15, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 41, 12, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 41, 15, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 42, 10, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 42, 33, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 43, 10, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 43, 33, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 44, 14, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 44, 32, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 45, 12, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 45, 15, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 46, 14, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 46, 32, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 47, 5, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 47, 7, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 48, 49, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 48, 50, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 51, 10, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 52, 15, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 53, 15, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 54, 15, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 55, 10, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 56, 10, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 56, 33, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 57, 14, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 57, 32, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 58, 10, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 59, 10, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 59, 33, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 60, 14, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 60, 32, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 61, 10, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 62, 15, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 63, 5, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 63, 7, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 63, 64, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 65, 66, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 65, 64, 6, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 67, 10, 6, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 68, 10, 6, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 69, 10, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 70, 10, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 70, 33, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 71, 5, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 71, 7, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 72, 12, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 72, 15, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 73, 10, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[1].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withByte:);
  methods[2].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withInt:);
  methods[3].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withByte:withInt:);
  methods[4].selector = @selector(killWithByteArray:);
  methods[5].selector = @selector(killWithByteArray:withByte:withByteArray:);
  methods[6].selector = @selector(writeKillWithByteArray:);
  methods[7].selector = @selector(writeKillWithByteArray:withByte:withByteArray:);
  methods[8].selector = @selector(lockKill);
  methods[9].selector = @selector(lockKillWithByte:withByteArray:);
  methods[10].selector = @selector(initiateWithByte:);
  methods[11].selector = @selector(inventoryInitiatedWithByte:);
  methods[12].selector = @selector(inventoryInitiatedWithByte:withByte:);
  methods[13].selector = @selector(inventoryInitiatedWithByte:withByte:withByteArray:);
  methods[14].selector = @selector(inventoryInitiatedWithByte:withByte:withByteArray:withByte:);
  methods[15].selector = @selector(buildInventoryInitiatedFrameWithByte:withByte:withByteArray:withBoolean:withByte:);
  methods[16].selector = @selector(fastInitiateWithByte:);
  methods[17].selector = @selector(fastInventoryInitiatedWithByte:);
  methods[18].selector = @selector(fastInventoryInitiatedWithByte:withByte:);
  methods[19].selector = @selector(fastInventoryInitiatedWithByte:withByte:withByteArray:);
  methods[20].selector = @selector(fastInventoryInitiatedWithByte:withByte:withByteArray:withByte:);
  methods[21].selector = @selector(buildFastInventoryInitiatedFrameWithByte:withByte:withByteArray:withBoolean:withByte:);
  methods[22].selector = @selector(inventoryReadWithByte:withByte:withByte:);
  methods[23].selector = @selector(inventoryReadWithByte:withByte:withByte:withByte:);
  methods[24].selector = @selector(inventoryReadWithByte:withByte:withByteArray:withByte:withByte:);
  methods[25].selector = @selector(inventoryReadWithByte:withByte:withByteArray:withByte:withByte:withByte:);
  methods[26].selector = @selector(buildInventoryReadFrameWithByte:withByte:withByteArray:withBoolean:withByte:withByte:withByte:);
  methods[27].selector = @selector(fastInventoryReadWithByte:withByte:withByte:);
  methods[28].selector = @selector(fastInventoryReadWithByte:withByte:withByteArray:withByte:withByte:);
  methods[29].selector = @selector(fastInventoryReadWithByte:withByte:withByte:withByte:);
  methods[30].selector = @selector(fastInventoryReadWithByte:withByte:withByteArray:withByte:withByte:withByte:);
  methods[31].selector = @selector(buildFastInventoryReadFrameWithByte:withByte:withByteArray:withBoolean:withByte:withByte:withByte:);
  methods[32].selector = @selector(writeConfigWithByte:withByte:);
  methods[33].selector = @selector(writeConfigWithByte:withByte:withByte:withByteArray:);
  methods[34].selector = @selector(writeConfigWithByte:withByteArray:);
  methods[35].selector = @selector(writeConfigWithByte:withByteArray:withByte:withByteArray:);
  methods[36].selector = @selector(writeConfigWithByte:withByte:withByte:);
  methods[37].selector = @selector(writeConfigWithByte:withByte:withByte:withByte:withByteArray:);
  methods[38].selector = @selector(writeConfigWithByte:withByte:withByteArray:);
  methods[39].selector = @selector(writeConfigWithByte:withByte:withByteArray:withByte:withByteArray:);
  methods[40].selector = @selector(writeDynConfigWithByte:withByte:);
  methods[41].selector = @selector(writeDynConfigWithByte:withByte:withByte:withByteArray:);
  methods[42].selector = @selector(fastWriteDynConfigWithByte:withByte:);
  methods[43].selector = @selector(fastWriteDynConfigWithByte:withByte:withByte:withByteArray:);
  methods[44].selector = @selector(getRandomNumber);
  methods[45].selector = @selector(getRandomNumberWithByte:);
  methods[46].selector = @selector(getRandomNumberWithByte:withByteArray:);
  methods[47].selector = @selector(readConfigWithByte:);
  methods[48].selector = @selector(readConfigWithByte:withByte:withByteArray:);
  methods[49].selector = @selector(readConfigWithByte:withByte:);
  methods[50].selector = @selector(readConfigWithByte:withByte:withByte:withByteArray:);
  methods[51].selector = @selector(readDynConfigWithByte:);
  methods[52].selector = @selector(readDynConfigWithByte:withByte:withByteArray:);
  methods[53].selector = @selector(fastReadDynConfigWithByte:);
  methods[54].selector = @selector(fastReadDynConfigWithByte:withByte:withByteArray:);
  methods[55].selector = @selector(presentPwdWithByte:withByteArray:);
  methods[56].selector = @selector(presentPwdWithByte:withByteArray:withByte:withByteArray:);
  methods[57].selector = @selector(writePwdWithByte:withByteArray:);
  methods[58].selector = @selector(writePwdWithByte:withByteArray:withByte:withByteArray:);
  methods[59].selector = @selector(lockSectorWithByte:withByte:);
  methods[60].selector = @selector(lockSectorWithByte:withByte:withByte:withByteArray:);
  methods[61].selector = @selector(fastReadSingleBlockWithByte:);
  methods[62].selector = @selector(fastReadSingleBlockWithByte:withByte:withByteArray:);
  methods[63].selector = @selector(fastReadMultipleBlockWithByte:withByte:);
  methods[64].selector = @selector(fastReadMultipleBlockWithByte:withByte:withByte:withByteArray:);
  methods[65].selector = @selector(fastExtendedReadSingleBlockWithByteArray:);
  methods[66].selector = @selector(fastExtendedReadSingleBlockWithByteArray:withByte:withByteArray:);
  methods[67].selector = @selector(fastExtendedReadMultipleBlockWithByteArray:withByteArray:);
  methods[68].selector = @selector(fastExtendedReadMultipleBlockWithByteArray:withByteArray:withByte:withByteArray:);
  methods[69].selector = @selector(readCfg);
  methods[70].selector = @selector(readCfgWithByte:withByteArray:);
  methods[71].selector = @selector(writeEHCfgWithByte:withByte:withByteArray:);
  methods[72].selector = @selector(writeDOCfgWithByte:withByte:withByteArray:);
  methods[73].selector = @selector(setRstEHEnWithByte:withByte:withByteArray:);
  methods[74].selector = @selector(checkEHEnWithByte:withByteArray:);
  methods[75].selector = @selector(writeMsgWithByte:withByteArray:);
  methods[76].selector = @selector(writeMsgWithByte:withByteArray:withByte:withByteArray:);
  methods[77].selector = @selector(readMsgWithByte:withByte:);
  methods[78].selector = @selector(readMsgWithByte:withByte:withByte:withByteArray:);
  methods[79].selector = @selector(readMsgLength);
  methods[80].selector = @selector(readMsgLengthWithByte:withByteArray:);
  methods[81].selector = @selector(fastWriteMsgWithByte:withByteArray:);
  methods[82].selector = @selector(fastWriteMsgWithByte:withByteArray:withByte:withByteArray:);
  methods[83].selector = @selector(fastReadMsgWithByte:withByte:);
  methods[84].selector = @selector(fastReadMsgWithByte:withByte:withByte:withByteArray:);
  methods[85].selector = @selector(fastReadMsgLength);
  methods[86].selector = @selector(fastReadMsgLengthWithByte:withByteArray:);
  methods[87].selector = @selector(manageGpoWithByte:withByte:withByteArray:);
  methods[88].selector = @selector(enableUntraceableModeWithByteArray:);
  methods[89].selector = @selector(enableUntraceableModeWithByteArray:withByte:withByteArray:);
  methods[90].selector = @selector(enableUntraceableModeWithByteArray:withInt:withByte:withByteArray:);
  methods[91].selector = @selector(toggleUntraceableModeWithByteArray:withInt:);
  methods[92].selector = @selector(toggleUntraceableModeWithByteArray:withInt:withByte:withByteArray:);
  methods[93].selector = @selector(setEas);
  methods[94].selector = @selector(setEasWithByte:withByteArray:);
  methods[95].selector = @selector(resetEas);
  methods[96].selector = @selector(resetEasWithByte:withByteArray:);
  methods[97].selector = @selector(lockEas);
  methods[98].selector = @selector(lockEasWithByte:withByteArray:);
  methods[99].selector = @selector(enableEAS);
  methods[100].selector = @selector(enableEASWithByte:withByteArray:);
  methods[101].selector = @selector(enableEASWithByte:withByteArray:withByte:withByteArray:);
  methods[102].selector = @selector(writeEasIdWithByteArray:);
  methods[103].selector = @selector(writeEasIdWithByteArray:withByte:withByteArray:);
  methods[104].selector = @selector(writeEasConfigWithByte:);
  methods[105].selector = @selector(writeEasConfigWithByte:withByte:withByteArray:);
  methods[106].selector = @selector(readSignature);
  methods[107].selector = @selector(readSignatureWithByte:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ISO15693_CUSTOM_ST_CMD_READ_CONFIG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_READ_CONFIG, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_WRITE_CONFIG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_CONFIG, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_READ_DYN_CONFIG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_READ_DYN_CONFIG, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_WRITE_DYN_CONFIG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_DYN_CONFIG, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_WRITE_PASSWORD", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_PASSWORD, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_LOCK_SECTOR", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_LOCK_SECTOR, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_PRESENT_PASSWORD", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_PRESENT_PASSWORD, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_GET_RANDOM_NUMBER", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_GET_RANDOM_NUMBER, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_FAST_READ_SINGLE_BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_READ_SINGLE_BLOCK, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_FAST_READ_MULTIPLE_BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_READ_MULTIPLE_BLOCK, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_FAST_READ_DYN_CONFIG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_READ_DYN_CONFIG, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_FAST_WRITE_DYN_CONFIG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_WRITE_DYN_CONFIG, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_FAST_EXTENDED_READ_MULTIPLE_BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_EXTENDED_READ_MULTIPLE_BLOCK, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_KILL", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_KILL, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_WRITE_KILL", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_KILL, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_LOCK_KILL", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_LOCK_KILL, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_PARAM_KILL_ACCESS", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_PARAM_KILL_ACCESS, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_INVENTORY_INITIATED", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_INVENTORY_INITIATED, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_INITIATE", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_INITIATE, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_FAST_INITIATE", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_INITIATE, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_FAST_INVENTORY_INITIATED", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_INVENTORY_INITIATED, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_WRITE_EH_CFG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_EH_CFG, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_SET_RST_EH_EN", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_SET_RST_EH_EN, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_CHECK_EH_EN", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_CHECK_EH_EN, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_WRITE_DO_CFG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_DO_CFG, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_MANAGE_GPO", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MANAGE_GPO, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_MB_WRITE_MSG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_WRITE_MSG, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_MB_READ_MSG_LENGTH", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_READ_MSG_LENGTH, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_MB_READ_MSG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_READ_MSG, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_MB_FAST_WRITE_MSG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_FAST_WRITE_MSG, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_MB_FAST_READ_MSG_LENGTH", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_FAST_READ_MSG_LENGTH, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_MB_FAST_READ_MSG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_MB_FAST_READ_MSG, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_SET_EAS", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_SET_EAS, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_RESET_EAS", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_RESET_EAS, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_LOCK_EAS", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_LOCK_EAS, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_ENABLE_EAS", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_ENABLE_EAS, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_WRITE_EAS_ID", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_EAS_ID, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_WRITE_EAS_CONFIG", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_WRITE_EAS_CONFIG, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_ENABLE_UNTRACEABLE_MODE", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_ENABLE_UNTRACEABLE_MODE, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_TOGGLE_UNTRACEABLE_MODE", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_TOGGLE_UNTRACEABLE_MODE, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_INVENTORY_READ", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_INVENTORY_READ, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_FAST_INVENTORY_READ", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_INVENTORY_READ, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_CMD_READ_SIGNATURE", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_READ_SIGNATURE, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CUSTOM_ST_PARAM_UNTRACEABLE_ACCESS_CODE", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_PARAM_UNTRACEABLE_ACCESS_CODE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[B", "LComStSt25sdkRFReaderInterface;[BB", "LComStSt25sdkRFReaderInterface;[BI", "LComStSt25sdkRFReaderInterface;[BBI", "kill", "[B", "LComStSt25sdkSTException;", "[BB[B", "writeKill", "lockKill", "B[B", "initiate", "B", "inventoryInitiated", "BB", "BB[B", "BB[BB", "buildInventoryInitiatedFrame", "BB[BZB", "fastInitiate", "fastInventoryInitiated", "buildFastInventoryInitiatedFrame", "inventoryRead", "BBB", "BBBB", "BB[BBB", "BB[BBBB", "buildInventoryReadFrame", "BB[BZBBB", "fastInventoryRead", "buildFastInventoryReadFrame", "writeConfig", "BBB[B", "B[BB[B", "BBBB[B", "BB[BB[B", "writeDynConfig", "fastWriteDynConfig", "getRandomNumber", "readConfig", "readDynConfig", "fastReadDynConfig", "presentPwd", "writePwd", "lockSector", "fastReadSingleBlock", "fastReadMultipleBlock", "fastExtendedReadSingleBlock", "fastExtendedReadMultipleBlock", "[B[B", "[B[BB[B", "readCfg", "writeEHCfg", "writeDOCfg", "setRstEHEn", "checkEHEn", "writeMsg", "readMsg", "readMsgLength", "fastWriteMsg", "fastReadMsg", "fastReadMsgLength", "manageGpo", "enableUntraceableMode", "[BIB[B", "toggleUntraceableMode", "[BI", "setEas", "resetEas", "lockEas", "enableEAS", "writeEasId", "writeEasConfig", "readSignature" };
  static const J2ObjcClassInfo _ComStSt25sdkCommandIso15693CustomCommand = { "Iso15693CustomCommand", "com.st.st25sdk.command", ptrTable, methods, fields, 7, 0x1, 108, 45, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkCommandIso15693CustomCommand;
}

@end

void ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkCommandIso15693CustomCommand *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, ComStSt25sdkCommandIso15693Protocol_DEFAULT_FLAG, ComStSt25sdkType5Type5Tag_DEFAULT_NBR_OF_BYTES_PER_BLOCK);
}

ComStSt25sdkCommandIso15693CustomCommand *new_ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandIso15693CustomCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_, reader, uid)
}

ComStSt25sdkCommandIso15693CustomCommand *create_ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandIso15693CustomCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_, reader, uid)
}

void ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(ComStSt25sdkCommandIso15693CustomCommand *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, flag, ComStSt25sdkType5Type5Tag_DEFAULT_NBR_OF_BYTES_PER_BLOCK);
}

ComStSt25sdkCommandIso15693CustomCommand *new_ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandIso15693CustomCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_, reader, uid, flag)
}

ComStSt25sdkCommandIso15693CustomCommand *create_ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandIso15693CustomCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_, reader, uid, flag)
}

void ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(ComStSt25sdkCommandIso15693CustomCommand *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, ComStSt25sdkCommandIso15693Protocol_DEFAULT_FLAG, nbrOfBytesPerBlock);
}

ComStSt25sdkCommandIso15693CustomCommand *new_ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandIso15693CustomCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_, reader, uid, nbrOfBytesPerBlock)
}

ComStSt25sdkCommandIso15693CustomCommand *create_ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandIso15693CustomCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_, reader, uid, nbrOfBytesPerBlock)
}

void ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(ComStSt25sdkCommandIso15693CustomCommand *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, flag, nbrOfBytesPerBlock);
}

ComStSt25sdkCommandIso15693CustomCommand *new_ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandIso15693CustomCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_, reader, uid, flag, nbrOfBytesPerBlock)
}

ComStSt25sdkCommandIso15693CustomCommand *create_ComStSt25sdkCommandIso15693CustomCommand_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandIso15693CustomCommand, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_, reader, uid, flag, nbrOfBytesPerBlock)
}

IOSByteArray *ComStSt25sdkCommandIso15693CustomCommand_buildInventoryInitiatedFrameWithByte_withByte_withByteArray_withBoolean_withByte_(ComStSt25sdkCommandIso15693CustomCommand *self, jbyte flag, jbyte maskLengthInBits, IOSByteArray *maskValue, jboolean isAFISet, jbyte afiField) {
  IOSByteArray *frame;
  jint frameOptionSize = 0;
  jint index = 0;
  if (maskValue != nil) {
    frameOptionSize += maskValue->size_;
  }
  if (isAFISet) {
    frameOptionSize++;
  }
  frame = [IOSByteArray newArrayWithLength:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE + 1 + frameOptionSize];
  *IOSByteArray_GetRef(frame, index++) = flag;
  *IOSByteArray_GetRef(frame, index++) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_INVENTORY_INITIATED;
  *IOSByteArray_GetRef(frame, index++) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if (isAFISet) {
    *IOSByteArray_GetRef(frame, index++) = afiField;
  }
  *IOSByteArray_GetRef(frame, index++) = maskLengthInBits;
  if (maskValue != nil) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(maskValue, 0, frame, index, maskValue->size_);
  }
  return [self transceiveWithNSString:@"inventoryInitiated" withByteArray:frame];
}

IOSByteArray *ComStSt25sdkCommandIso15693CustomCommand_buildFastInventoryInitiatedFrameWithByte_withByte_withByteArray_withBoolean_withByte_(ComStSt25sdkCommandIso15693CustomCommand *self, jbyte flag, jbyte maskLengthInBits, IOSByteArray *maskValue, jboolean isAFISet, jbyte afiField) {
  IOSByteArray *frame;
  jint frameOptionSize = 0;
  jint index = 0;
  if (maskValue != nil) {
    frameOptionSize += maskValue->size_;
  }
  if (isAFISet) {
    frameOptionSize++;
  }
  frame = [IOSByteArray newArrayWithLength:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE + 1 + frameOptionSize];
  *IOSByteArray_GetRef(frame, index++) = flag;
  *IOSByteArray_GetRef(frame, index++) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_INVENTORY_INITIATED;
  *IOSByteArray_GetRef(frame, index++) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if (isAFISet) {
    *IOSByteArray_GetRef(frame, index++) = afiField;
  }
  *IOSByteArray_GetRef(frame, index++) = maskLengthInBits;
  if (maskValue != nil) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(maskValue, 0, frame, index, maskValue->size_);
  }
  return [self transceiveWithNSString:@"fastInventoryInitiated" withByteArray:frame];
}

IOSByteArray *ComStSt25sdkCommandIso15693CustomCommand_buildInventoryReadFrameWithByte_withByte_withByteArray_withBoolean_withByte_withByte_withByte_(ComStSt25sdkCommandIso15693CustomCommand *self, jbyte flag, jbyte maskLengthInBits, IOSByteArray *maskValue, jboolean isAFISet, jbyte afiField, jbyte blockAddress, jbyte nbrOfBlocks) {
  IOSByteArray *frame;
  jint frameOptionSize = 0;
  jint index = 0;
  if (maskValue != nil) {
    frameOptionSize += maskValue->size_;
  }
  if (isAFISet) {
    frameOptionSize++;
  }
  frame = [IOSByteArray newArrayWithLength:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE + 1 + frameOptionSize + 1 + 1];
  *IOSByteArray_GetRef(frame, index++) = flag;
  *IOSByteArray_GetRef(frame, index++) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_INVENTORY_READ;
  *IOSByteArray_GetRef(frame, index++) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if (isAFISet) {
    *IOSByteArray_GetRef(frame, index++) = afiField;
  }
  *IOSByteArray_GetRef(frame, index++) = maskLengthInBits;
  if (maskValue != nil) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(maskValue, 0, frame, index, maskValue->size_);
    index += maskValue->size_;
  }
  *IOSByteArray_GetRef(frame, index++) = blockAddress;
  *IOSByteArray_GetRef(frame, index++) = nbrOfBlocks;
  return [self transceiveWithNSString:@"inventoryRead" withByteArray:frame];
}

IOSByteArray *ComStSt25sdkCommandIso15693CustomCommand_buildFastInventoryReadFrameWithByte_withByte_withByteArray_withBoolean_withByte_withByte_withByte_(ComStSt25sdkCommandIso15693CustomCommand *self, jbyte flag, jbyte maskLengthInBits, IOSByteArray *maskValue, jboolean isAFISet, jbyte afiField, jbyte blockAddress, jbyte nbrOfBlocks) {
  IOSByteArray *frame;
  jint frameOptionSize = 0;
  jint index = 0;
  if (maskValue != nil) {
    frameOptionSize += maskValue->size_;
  }
  if (isAFISet) {
    frameOptionSize++;
  }
  frame = [IOSByteArray newArrayWithLength:ComStSt25sdkCommandIso15693Protocol_ISO15693_CUSTOM_ST_HEADER_SIZE + 1 + frameOptionSize + 1 + 1];
  *IOSByteArray_GetRef(frame, index++) = flag;
  *IOSByteArray_GetRef(frame, index++) = ComStSt25sdkCommandIso15693CustomCommand_ISO15693_CUSTOM_ST_CMD_FAST_INVENTORY_READ;
  *IOSByteArray_GetRef(frame, index++) = ComStSt25sdkCommandIso15693Protocol_STM_MANUFACTURER_CODE;
  if (isAFISet) {
    *IOSByteArray_GetRef(frame, index++) = afiField;
  }
  *IOSByteArray_GetRef(frame, index++) = maskLengthInBits;
  if (maskValue != nil) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(maskValue, 0, frame, index, maskValue->size_);
    index += maskValue->size_;
  }
  *IOSByteArray_GetRef(frame, index++) = blockAddress;
  *IOSByteArray_GetRef(frame, index) = nbrOfBlocks;
  return [self transceiveWithNSString:@"fastInventoryRead" withByteArray:frame];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandIso15693CustomCommand)
