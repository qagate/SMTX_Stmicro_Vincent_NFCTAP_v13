//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/command/Type4CustomCommand.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/command/Type4Command.h"
#include "com/st/st25sdk/command/Type4CustomCommand.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"

@implementation ComStSt25sdkCommandType4CustomCommand

+ (jbyte)TYPE4_CUSTOM_CMD_UPDATE_FILE_TYPE {
  return ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_UPDATE_FILE_TYPE;
}

+ (jbyte)TYPE4_CUSTOM_CMD_SEND_INTERRUPT {
  return ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_SEND_INTERRUPT;
}

+ (jbyte)TYPE4_CUSTOM_CMD_STATE_CONTROL {
  return ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_STATE_CONTROL;
}

+ (jbyte)TYPE4_CUSTOM_CMD_EXTENDED_READ {
  return ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_EXTENDED_READ;
}

+ (jbyte)TYPE4_CUSTOM_CMD_CLA_ST {
  return ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_CLA_ST;
}

+ (jint)TYPE4_CUSTOM_HEADER_SIZE {
  return ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_HEADER_SIZE;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                              withInt:(jint)maxRApduSize
                                              withInt:(jint)maxCApduSize {
  ComStSt25sdkCommandType4CustomCommand_initWithComStSt25sdkRFReaderInterface_withInt_withInt_(self, reader, maxRApduSize, maxCApduSize);
  return self;
}

- (IOSByteArray *)extendedReadDataWithInt:(jint)fileOffset
                                  withInt:(jint)sizeInBytes {
  IOSByteArray *response = nil;
  IOSByteArray *buffer;
  jint currentFileOffset = fileOffset;
  jint remainingDataToRead = sizeInBytes;
  jint dataChunktoRead;
  while (remainingDataToRead > 0) {
    dataChunktoRead = (remainingDataToRead > mMaxReadSizeInBytes_) ? mMaxReadSizeInBytes_ : remainingDataToRead;
    jbyte p1 = (jbyte) (JreRShift32((currentFileOffset & (jint) 0xFF00), 8));
    jbyte p2 = (jbyte) (currentFileOffset & (jint) 0xFF);
    jbyte length = (jbyte) (dataChunktoRead & (jint) 0xFF);
    buffer = [self extendedReadBinaryWithByte:p1 withByte:p2 withByte:length];
    if (response == nil) response = [IOSByteArray newArrayWithLength:sizeInBytes];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, response, (currentFileOffset - fileOffset), ((IOSByteArray *) nil_chk(buffer))->size_ - 2);
    currentFileOffset += dataChunktoRead;
    remainingDataToRead -= dataChunktoRead;
  }
  return response;
}

- (IOSByteArray *)extendedReadBinaryWithByte:(jbyte)p1
                                    withByte:(jbyte)p2
                                    withByte:(jbyte)length {
  IOSByteArray *response;
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_HEADER_SIZE + 1];
  *IOSByteArray_GetRef(frame, 0) = ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_CLA_ST;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_EXTENDED_READ;
  *IOSByteArray_GetRef(frame, 2) = p1;
  *IOSByteArray_GetRef(frame, 3) = p2;
  *IOSByteArray_GetRef(frame, 4) = length;
  @try {
    response = [self transceiveWithNSString:@"extendedReadBinary" withByteArray:frame];
    return response;
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

- (IOSByteArray *)updateFileTypeWithByte:(jbyte)data {
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_HEADER_SIZE + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_CLA_ST;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_UPDATE_FILE_TYPE;
  *IOSByteArray_GetRef(frame, 2) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 3) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 4) = (jint) 0x01;
  *IOSByteArray_GetRef(frame, 5) = data;
  @try {
    return [self transceiveWithNSString:@"updateFileType" withByteArray:frame];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

- (IOSByteArray *)sendInterrupt {
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_HEADER_SIZE + 1];
  *IOSByteArray_GetRef(frame, 0) = ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_CLA_ST;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_SEND_INTERRUPT;
  *IOSByteArray_GetRef(frame, 2) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 3) = (jint) 0x1E;
  *IOSByteArray_GetRef(frame, 4) = (jbyte) (jint) 0x00;
  @try {
    return [self transceiveWithNSString:@"sendInterrupt" withByteArray:frame];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

- (IOSByteArray *)setStateControlWithByte:(jbyte)data {
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_HEADER_SIZE + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_CLA_ST;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_STATE_CONTROL;
  *IOSByteArray_GetRef(frame, 2) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 3) = (jint) 0x1F;
  *IOSByteArray_GetRef(frame, 4) = (jbyte) (jint) 0x01;
  *IOSByteArray_GetRef(frame, 5) = data;
  @try {
    return [self transceiveWithNSString:@"setStateControl" withByteArray:frame];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

- (IOSByteArray *)setConfigCounterWithByte:(jbyte)counterConfigurationValue {
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_HEADER_SIZE + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandType4Command_TYPE4_CMD_UPDATE_BINARY;
  *IOSByteArray_GetRef(frame, 2) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 3) = (jint) 0x03;
  *IOSByteArray_GetRef(frame, 4) = (jbyte) (jint) 0x01;
  *IOSByteArray_GetRef(frame, 5) = counterConfigurationValue;
  @try {
    return [self transceiveWithNSString:@"setConfigCounter" withByteArray:frame];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

- (IOSByteArray *)setGpoWithByte:(jbyte)data {
  IOSByteArray *response;
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_HEADER_SIZE + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandType4Command_TYPE4_CMD_UPDATE_BINARY;
  *IOSByteArray_GetRef(frame, 2) = (jint) 0x00;
  *IOSByteArray_GetRef(frame, 3) = (jint) 0x02;
  *IOSByteArray_GetRef(frame, 4) = (jbyte) (jint) 0x01;
  *IOSByteArray_GetRef(frame, 5) = data;
  @try {
    response = [self transceiveWithNSString:@"setGpo" withByteArray:frame];
    return response;
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 6, 7, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 7, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 9, 7, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 7, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withInt:withInt:);
  methods[1].selector = @selector(extendedReadDataWithInt:withInt:);
  methods[2].selector = @selector(extendedReadBinaryWithByte:withByte:withByte:);
  methods[3].selector = @selector(updateFileTypeWithByte:);
  methods[4].selector = @selector(sendInterrupt);
  methods[5].selector = @selector(setStateControlWithByte:);
  methods[6].selector = @selector(setConfigCounterWithByte:);
  methods[7].selector = @selector(setGpoWithByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE4_CUSTOM_CMD_UPDATE_FILE_TYPE", "B", .constantValue.asChar = ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_UPDATE_FILE_TYPE, 0x19, -1, -1, -1, -1 },
    { "TYPE4_CUSTOM_CMD_SEND_INTERRUPT", "B", .constantValue.asChar = ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_SEND_INTERRUPT, 0x19, -1, -1, -1, -1 },
    { "TYPE4_CUSTOM_CMD_STATE_CONTROL", "B", .constantValue.asChar = ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_STATE_CONTROL, 0x19, -1, -1, -1, -1 },
    { "TYPE4_CUSTOM_CMD_EXTENDED_READ", "B", .constantValue.asChar = ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_EXTENDED_READ, 0x19, -1, -1, -1, -1 },
    { "TYPE4_CUSTOM_CMD_CLA_ST", "B", .constantValue.asChar = ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_CMD_CLA_ST, 0x19, -1, -1, -1, -1 },
    { "TYPE4_CUSTOM_HEADER_SIZE", "I", .constantValue.asInt = ComStSt25sdkCommandType4CustomCommand_TYPE4_CUSTOM_HEADER_SIZE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;II", "extendedReadData", "II", "LComStSt25sdkSTException;", "extendedReadBinary", "BBB", "updateFileType", "B", "setStateControl", "setConfigCounter", "setGpo" };
  static const J2ObjcClassInfo _ComStSt25sdkCommandType4CustomCommand = { "Type4CustomCommand", "com.st.st25sdk.command", ptrTable, methods, fields, 7, 0x1, 8, 6, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkCommandType4CustomCommand;
}

@end

void ComStSt25sdkCommandType4CustomCommand_initWithComStSt25sdkRFReaderInterface_withInt_withInt_(ComStSt25sdkCommandType4CustomCommand *self, id<ComStSt25sdkRFReaderInterface> reader, jint maxRApduSize, jint maxCApduSize) {
  ComStSt25sdkCommandType4Command_initWithComStSt25sdkRFReaderInterface_withInt_withInt_(self, reader, maxRApduSize, maxCApduSize);
}

ComStSt25sdkCommandType4CustomCommand *new_ComStSt25sdkCommandType4CustomCommand_initWithComStSt25sdkRFReaderInterface_withInt_withInt_(id<ComStSt25sdkRFReaderInterface> reader, jint maxRApduSize, jint maxCApduSize) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandType4CustomCommand, initWithComStSt25sdkRFReaderInterface_withInt_withInt_, reader, maxRApduSize, maxCApduSize)
}

ComStSt25sdkCommandType4CustomCommand *create_ComStSt25sdkCommandType4CustomCommand_initWithComStSt25sdkRFReaderInterface_withInt_withInt_(id<ComStSt25sdkRFReaderInterface> reader, jint maxRApduSize, jint maxCApduSize) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandType4CustomCommand, initWithComStSt25sdkRFReaderInterface_withInt_withInt_, reader, maxRApduSize, maxCApduSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandType4CustomCommand)
