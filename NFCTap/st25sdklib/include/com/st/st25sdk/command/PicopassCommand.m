//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/command/PicopassCommand.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/command/PicopassCommand.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

__attribute__((unused)) static void ComStSt25sdkCommandPicopassCommand_picopassRfMode_initWithNSString_withInt_(ComStSt25sdkCommandPicopassCommand_picopassRfMode *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComStSt25sdkCommandPicopassCommand_picopassRfMode *new_ComStSt25sdkCommandPicopassCommand_picopassRfMode_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation ComStSt25sdkCommandPicopassCommand

+ (jbyte)PICOPASS_INST_ACT {
  return ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_ACT;
}

+ (jbyte)PICOPASS_INST_ACTALL {
  return ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_ACTALL;
}

+ (jbyte)PICOPASS_INST_IDENTIFY {
  return ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_IDENTIFY;
}

+ (jbyte)PICOPASS_INST_SELECT {
  return ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_SELECT;
}

+ (jbyte)PICOPASS_INST_DETECT {
  return ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_DETECT;
}

+ (jbyte)PICOPASS_INST_HALT {
  return ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_HALT;
}

+ (jbyte)PICOPASS_INST_PAGESEL {
  return ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_PAGESEL;
}

+ (jbyte)PICOPASS_INST_CHECK {
  return ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_CHECK;
}

+ (jbyte)PICOPASS_INST_READCHECK {
  return ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_READCHECK;
}

+ (jbyte)PICOPASS_INST_READBLOCK {
  return ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_READBLOCK;
}

+ (jbyte)PICOPASS_INST_READ4BLOCK {
  return ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_READ4BLOCK;
}

+ (jbyte)PICOPASS_INST_UPDATE {
  return ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_UPDATE;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader {
  ComStSt25sdkCommandPicopassCommand_initWithComStSt25sdkRFReaderInterface_(self, reader);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                             withByte:(jbyte)m1m0Value {
  ComStSt25sdkCommandPicopassCommand_initWithComStSt25sdkRFReaderInterface_withByte_(self, reader, m1m0Value);
  return self;
}

- (void)setPicopassRfModeWithByte:(jbyte)m1m0Value {
  if (m1m0Value == (jint) 0x01) {
    mPicopassRfFrameMode_ = JreLoadEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_01_MODE);
  }
  else if (m1m0Value == (jint) 0x10) {
    mPicopassRfFrameMode_ = JreLoadEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_10_MODE);
  }
  else if (m1m0Value == (jint) 0x11) {
    mPicopassRfFrameMode_ = JreLoadEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_11_MODE);
  }
  else {
    mPicopassRfFrameMode_ = JreLoadEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_00_MODE);
  }
  [self setM1M0BitsWithByte:(jbyte) (m1m0Value & (jint) 0x03)];
}

- (ComStSt25sdkCommandPicopassCommand_picopassRfMode *)getPicopassRfMode {
  return mPicopassRfFrameMode_;
}

- (void)setM1M0BitsWithByte:(jbyte)m1m0Bits {
  mM1M0Bits_ = (jbyte) (m1m0Bits & (jint) 0x03);
}

- (jbyte)getM1M0Bits {
  return mM1M0Bits_;
}

- (jbyte)formatOpcodeByteWithByte:(jbyte)instruction
                      withBoolean:(jboolean)isKC {
  jbyte kBit = 0;
  if (isKC) kBit = 1;
  jbyte parityBitValueCalculation = (jbyte) ((instruction & (jint) 0x01) ^ ((JreRShift32((instruction & (jint) 0xFF), 1)) & (jint) 0x01) ^ ((JreRShift32((instruction & (jint) 0xFF), 2)) & (jint) 0x01) ^ ((JreRShift32((instruction & (jint) 0xFF), 3)) & (jint) 0x01) ^ (kBit & (jint) 0x01) ^ (mM1M0Bits_ & (jint) 0x01) ^ ((JreRShift32(mM1M0Bits_, 1)) & (jint) 0x01));
  jbyte kBitValue = (jbyte) (JreLShift32(kBit, 4));
  jbyte m0BitValue = (jbyte) ((JreLShift32((mM1M0Bits_ & (jint) 0x01), 5)) & (jint) 0xFF);
  jbyte m1BitValue = (jbyte) ((JreLShift32((mM1M0Bits_ & (jint) 0x02), 5)) & (jint) 0xFF);
  return (jbyte) (((JreLShift32(parityBitValueCalculation, 7)) & (jint) 0x80) | (m1BitValue & (jint) 0x40) | (m0BitValue & (jint) 0x20) | (kBitValue & (jint) 0x10) | (instruction & (jint) 0xF));
}

- (void)halt {
  NSString *commandName = @"picopass_halt";
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:1];
  *IOSByteArray_GetRef(frame, 0) = [self formatOpcodeByteWithByte:ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_HALT withBoolean:false];
  @try {
    (void) [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:mPicopassRfFrameMode_ withNSString:commandName withByteArray:frame];
  }
  @catch (ComStSt25sdkSTException *e) {
    if (([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_NO_RESPONSE)) && ([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, TAG_NOT_IN_THE_FIELD))) {
      @throw (e);
    }
  }
}

- (void)act {
  NSString *commandName = @"picopass_act";
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:1];
  *IOSByteArray_GetRef(frame, 0) = [self formatOpcodeByteWithByte:ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_ACT withBoolean:false];
  @try {
    (void) [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:mPicopassRfFrameMode_ withNSString:commandName withByteArray:frame];
  }
  @catch (ComStSt25sdkSTException *e) {
    if (([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_NO_RESPONSE)) && ([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, TAG_NOT_IN_THE_FIELD))) {
      @throw (e);
    }
  }
}

- (void)actall {
  NSString *commandName = @"picopass_actall";
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:1];
  *IOSByteArray_GetRef(frame, 0) = [self formatOpcodeByteWithByte:ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_ACTALL withBoolean:false];
  @try {
    (void) [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:mPicopassRfFrameMode_ withNSString:commandName withByteArray:frame];
  }
  @catch (ComStSt25sdkSTException *e) {
    if (([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_NO_RESPONSE)) && ([e getError] != JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, TAG_NOT_IN_THE_FIELD))) {
      @throw (e);
    }
  }
}

- (IOSByteArray *)identify {
  NSString *commandName = @"picopass_identify";
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:1];
  *IOSByteArray_GetRef(frame, 0) = [self formatOpcodeByteWithByte:ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_IDENTIFY withBoolean:false];
  return [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:mPicopassRfFrameMode_ withNSString:commandName withByteArray:frame];
}

- (IOSByteArray *)selectWithByteArray:(IOSByteArray *)aSNBorSN {
  NSString *commandName = @"picopass_select";
  IOSByteArray *frame = nil;
  if (aSNBorSN == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  frame = [IOSByteArray newArrayWithLength:1 + aSNBorSN->size_];
  *IOSByteArray_GetRef(frame, 0) = [self formatOpcodeByteWithByte:ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_SELECT withBoolean:false];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(aSNBorSN, 0, frame, 1, aSNBorSN->size_);
  return [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:mPicopassRfFrameMode_ withNSString:commandName withByteArray:frame];
}

- (IOSByteArray *)detect {
  NSString *commandName = @"picopass_detect";
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:1];
  *IOSByteArray_GetRef(frame, 0) = [self formatOpcodeByteWithByte:ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_DETECT withBoolean:false];
  return [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:mPicopassRfFrameMode_ withNSString:commandName withByteArray:frame];
}

- (IOSByteArray *)readWithByte:(jbyte)address {
  NSString *commandName = @"picopass_read";
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:2];
  *IOSByteArray_GetRef(frame, 0) = [self formatOpcodeByteWithByte:ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_READBLOCK withBoolean:false];
  *IOSByteArray_GetRef(frame, 1) = address;
  return [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:mPicopassRfFrameMode_ withNSString:commandName withByteArray:frame];
}

- (IOSByteArray *)read4WithByte:(jbyte)address {
  NSString *commandName = @"picopass_read4";
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:2];
  *IOSByteArray_GetRef(frame, 0) = [self formatOpcodeByteWithByte:ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_READ4BLOCK withBoolean:false];
  *IOSByteArray_GetRef(frame, 1) = address;
  return [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:mPicopassRfFrameMode_ withNSString:commandName withByteArray:frame];
}

- (IOSByteArray *)pageselWithByte:(jbyte)bookPage {
  NSString *commandName = @"picopass_pagesel";
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:2];
  *IOSByteArray_GetRef(frame, 0) = [self formatOpcodeByteWithByte:ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_PAGESEL withBoolean:false];
  *IOSByteArray_GetRef(frame, 1) = bookPage;
  return [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:mPicopassRfFrameMode_ withNSString:commandName withByteArray:frame];
}

- (IOSByteArray *)updateWithByte:(jbyte)address
                   withByteArray:(IOSByteArray *)data {
  NSString *commandName = @"picopass_update";
  IOSByteArray *frame = nil;
  if (data == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  frame = [IOSByteArray newArrayWithLength:2 + data->size_];
  *IOSByteArray_GetRef(frame, 0) = [self formatOpcodeByteWithByte:ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_UPDATE withBoolean:false];
  *IOSByteArray_GetRef(frame, 1) = address;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, frame, 2, data->size_);
  return [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:mPicopassRfFrameMode_ withNSString:commandName withByteArray:frame];
}

- (IOSByteArray *)updateWithByte:(jbyte)address
                   withByteArray:(IOSByteArray *)data
                   withByteArray:(IOSByteArray *)sign {
  NSString *commandName = @"picopass_update";
  IOSByteArray *frame = nil;
  if ((data == nil) || (sign == nil)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  frame = [IOSByteArray newArrayWithLength:2 + ((IOSByteArray *) nil_chk(data))->size_ + ((IOSByteArray *) nil_chk(sign))->size_];
  *IOSByteArray_GetRef(frame, 0) = [self formatOpcodeByteWithByte:ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_UPDATE withBoolean:false];
  *IOSByteArray_GetRef(frame, 1) = address;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, frame, 2, data->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sign, 0, frame, 2 + data->size_, sign->size_);
  return [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:mPicopassRfFrameMode_ withNSString:commandName withByteArray:frame];
}

- (IOSByteArray *)readCheckWithByte:(jbyte)address
                        withBoolean:(jboolean)isKc {
  NSString *commandName = @"picopass_readcheck";
  IOSByteArray *frame = [IOSByteArray newArrayWithLength:2];
  *IOSByteArray_GetRef(frame, 0) = [self formatOpcodeByteWithByte:ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_READCHECK withBoolean:isKc];
  *IOSByteArray_GetRef(frame, 1) = address;
  return [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:mPicopassRfFrameMode_ withNSString:commandName withByteArray:frame];
}

- (IOSByteArray *)checkWithByteArray:(IOSByteArray *)challenge
                       withByteArray:(IOSByteArray *)readerSignature {
  NSString *commandName = @"picopass_check";
  IOSByteArray *frame = nil;
  if ((challenge == nil) || (readerSignature == nil)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  frame = [IOSByteArray newArrayWithLength:1 + ((IOSByteArray *) nil_chk(challenge))->size_ + ((IOSByteArray *) nil_chk(readerSignature))->size_];
  *IOSByteArray_GetRef(frame, 0) = [self formatOpcodeByteWithByte:ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_CHECK withBoolean:false];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(challenge, 0, frame, 1, challenge->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(readerSignature, 0, frame, 1 + challenge->size_, readerSignature->size_);
  return [((id<ComStSt25sdkRFReaderInterface>) nil_chk(mReaderInterface_)) transceiveWithId:mPicopassRfFrameMode_ withNSString:commandName withByteArray:frame];
}

- (IOSByteArray *)selectPicopassTag {
  IOSByteArray *uid = [IOSByteArray newArrayWithLength:8];
  [self actall];
  [self act];
  IOSByteArray *response = [self identify];
  return [self selectWithByteArray:response];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkCommandPicopassCommand_picopassRfMode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 9, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 3, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 3, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 3, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, 13, 14, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, 13, 15, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, 16, 6, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, 17, 18, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:);
  methods[1].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByte:);
  methods[2].selector = @selector(setPicopassRfModeWithByte:);
  methods[3].selector = @selector(getPicopassRfMode);
  methods[4].selector = @selector(setM1M0BitsWithByte:);
  methods[5].selector = @selector(getM1M0Bits);
  methods[6].selector = @selector(formatOpcodeByteWithByte:withBoolean:);
  methods[7].selector = @selector(halt);
  methods[8].selector = @selector(act);
  methods[9].selector = @selector(actall);
  methods[10].selector = @selector(identify);
  methods[11].selector = @selector(selectWithByteArray:);
  methods[12].selector = @selector(detect);
  methods[13].selector = @selector(readWithByte:);
  methods[14].selector = @selector(read4WithByte:);
  methods[15].selector = @selector(pageselWithByte:);
  methods[16].selector = @selector(updateWithByte:withByteArray:);
  methods[17].selector = @selector(updateWithByte:withByteArray:withByteArray:);
  methods[18].selector = @selector(readCheckWithByte:withBoolean:);
  methods[19].selector = @selector(checkWithByteArray:withByteArray:);
  methods[20].selector = @selector(selectPicopassTag);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mReaderInterface_", "LComStSt25sdkRFReaderInterface;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mPicopassRfFrameMode_", "LComStSt25sdkCommandPicopassCommand_picopassRfMode;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "PICOPASS_INST_ACT", "B", .constantValue.asChar = ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_ACT, 0x19, -1, -1, -1, -1 },
    { "PICOPASS_INST_ACTALL", "B", .constantValue.asChar = ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_ACTALL, 0x19, -1, -1, -1, -1 },
    { "PICOPASS_INST_IDENTIFY", "B", .constantValue.asChar = ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_IDENTIFY, 0x19, -1, -1, -1, -1 },
    { "PICOPASS_INST_SELECT", "B", .constantValue.asChar = ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_SELECT, 0x19, -1, -1, -1, -1 },
    { "PICOPASS_INST_DETECT", "B", .constantValue.asChar = ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_DETECT, 0x19, -1, -1, -1, -1 },
    { "PICOPASS_INST_HALT", "B", .constantValue.asChar = ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_HALT, 0x19, -1, -1, -1, -1 },
    { "PICOPASS_INST_PAGESEL", "B", .constantValue.asChar = ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_PAGESEL, 0x19, -1, -1, -1, -1 },
    { "PICOPASS_INST_CHECK", "B", .constantValue.asChar = ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_CHECK, 0x19, -1, -1, -1, -1 },
    { "PICOPASS_INST_READCHECK", "B", .constantValue.asChar = ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_READCHECK, 0x19, -1, -1, -1, -1 },
    { "PICOPASS_INST_READBLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_READBLOCK, 0x19, -1, -1, -1, -1 },
    { "PICOPASS_INST_READ4BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_READ4BLOCK, 0x19, -1, -1, -1, -1 },
    { "PICOPASS_INST_UPDATE", "B", .constantValue.asChar = ComStSt25sdkCommandPicopassCommand_PICOPASS_INST_UPDATE, 0x19, -1, -1, -1, -1 },
    { "mM1M0Bits_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;", "LComStSt25sdkRFReaderInterface;B", "setPicopassRfMode", "B", "setM1M0Bits", "formatOpcodeByte", "BZ", "LComStSt25sdkSTException;", "select", "[B", "read", "read4", "pagesel", "update", "B[B", "B[B[B", "readCheck", "check", "[B[B", "LComStSt25sdkCommandPicopassCommand_picopassRfMode;" };
  static const J2ObjcClassInfo _ComStSt25sdkCommandPicopassCommand = { "PicopassCommand", "com.st.st25sdk.command", ptrTable, methods, fields, 7, 0x1, 21, 15, -1, 19, -1, -1, -1 };
  return &_ComStSt25sdkCommandPicopassCommand;
}

@end

void ComStSt25sdkCommandPicopassCommand_initWithComStSt25sdkRFReaderInterface_(ComStSt25sdkCommandPicopassCommand *self, id<ComStSt25sdkRFReaderInterface> reader) {
  NSObject_init(self);
  self->mM1M0Bits_ = (jint) 0x00;
  self->mReaderInterface_ = reader;
  [self setPicopassRfModeWithByte:(jbyte) (jint) 0x00];
}

ComStSt25sdkCommandPicopassCommand *new_ComStSt25sdkCommandPicopassCommand_initWithComStSt25sdkRFReaderInterface_(id<ComStSt25sdkRFReaderInterface> reader) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandPicopassCommand, initWithComStSt25sdkRFReaderInterface_, reader)
}

ComStSt25sdkCommandPicopassCommand *create_ComStSt25sdkCommandPicopassCommand_initWithComStSt25sdkRFReaderInterface_(id<ComStSt25sdkRFReaderInterface> reader) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandPicopassCommand, initWithComStSt25sdkRFReaderInterface_, reader)
}

void ComStSt25sdkCommandPicopassCommand_initWithComStSt25sdkRFReaderInterface_withByte_(ComStSt25sdkCommandPicopassCommand *self, id<ComStSt25sdkRFReaderInterface> reader, jbyte m1m0Value) {
  NSObject_init(self);
  self->mM1M0Bits_ = (jint) 0x00;
  self->mReaderInterface_ = reader;
  [self setPicopassRfModeWithByte:m1m0Value];
}

ComStSt25sdkCommandPicopassCommand *new_ComStSt25sdkCommandPicopassCommand_initWithComStSt25sdkRFReaderInterface_withByte_(id<ComStSt25sdkRFReaderInterface> reader, jbyte m1m0Value) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandPicopassCommand, initWithComStSt25sdkRFReaderInterface_withByte_, reader, m1m0Value)
}

ComStSt25sdkCommandPicopassCommand *create_ComStSt25sdkCommandPicopassCommand_initWithComStSt25sdkRFReaderInterface_withByte_(id<ComStSt25sdkRFReaderInterface> reader, jbyte m1m0Value) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandPicopassCommand, initWithComStSt25sdkRFReaderInterface_withByte_, reader, m1m0Value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandPicopassCommand)

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkCommandPicopassCommand_picopassRfMode)

ComStSt25sdkCommandPicopassCommand_picopassRfMode *ComStSt25sdkCommandPicopassCommand_picopassRfMode_values_[4];

@implementation ComStSt25sdkCommandPicopassCommand_picopassRfMode

+ (ComStSt25sdkCommandPicopassCommand_picopassRfMode *)PICOPASS_M1M0_00_MODE {
  return JreEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_00_MODE);
}

+ (ComStSt25sdkCommandPicopassCommand_picopassRfMode *)PICOPASS_M1M0_01_MODE {
  return JreEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_01_MODE);
}

+ (ComStSt25sdkCommandPicopassCommand_picopassRfMode *)PICOPASS_M1M0_10_MODE {
  return JreEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_10_MODE);
}

+ (ComStSt25sdkCommandPicopassCommand_picopassRfMode *)PICOPASS_M1M0_11_MODE {
  return JreEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_11_MODE);
}

+ (IOSObjectArray *)values {
  return ComStSt25sdkCommandPicopassCommand_picopassRfMode_values();
}

+ (ComStSt25sdkCommandPicopassCommand_picopassRfMode *)valueOfWithNSString:(NSString *)name {
  return ComStSt25sdkCommandPicopassCommand_picopassRfMode_valueOfWithNSString_(name);
}

- (ComStSt25sdkCommandPicopassCommand_picopassRfMode_Enum)toNSEnum {
  return (ComStSt25sdkCommandPicopassCommand_picopassRfMode_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComStSt25sdkCommandPicopassCommand_picopassRfMode;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkCommandPicopassCommand_picopassRfMode;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PICOPASS_M1M0_00_MODE", "LComStSt25sdkCommandPicopassCommand_picopassRfMode;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "PICOPASS_M1M0_01_MODE", "LComStSt25sdkCommandPicopassCommand_picopassRfMode;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "PICOPASS_M1M0_10_MODE", "LComStSt25sdkCommandPicopassCommand_picopassRfMode;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "PICOPASS_M1M0_11_MODE", "LComStSt25sdkCommandPicopassCommand_picopassRfMode;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_00_MODE), &JreEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_01_MODE), &JreEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_10_MODE), &JreEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_11_MODE), "LComStSt25sdkCommandPicopassCommand;", "Ljava/lang/Enum<Lcom/st/st25sdk/command/PicopassCommand$picopassRfMode;>;" };
  static const J2ObjcClassInfo _ComStSt25sdkCommandPicopassCommand_picopassRfMode = { "picopassRfMode", "com.st.st25sdk.command", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_ComStSt25sdkCommandPicopassCommand_picopassRfMode;
}

+ (void)initialize {
  if (self == [ComStSt25sdkCommandPicopassCommand_picopassRfMode class]) {
    JreEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_00_MODE) = new_ComStSt25sdkCommandPicopassCommand_picopassRfMode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkCommandPicopassCommand_picopassRfMode_class_(), 0), 0);
    JreEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_01_MODE) = new_ComStSt25sdkCommandPicopassCommand_picopassRfMode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkCommandPicopassCommand_picopassRfMode_class_(), 1), 1);
    JreEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_10_MODE) = new_ComStSt25sdkCommandPicopassCommand_picopassRfMode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkCommandPicopassCommand_picopassRfMode_class_(), 2), 2);
    JreEnum(ComStSt25sdkCommandPicopassCommand_picopassRfMode, PICOPASS_M1M0_11_MODE) = new_ComStSt25sdkCommandPicopassCommand_picopassRfMode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkCommandPicopassCommand_picopassRfMode_class_(), 3), 3);
    J2OBJC_SET_INITIALIZED(ComStSt25sdkCommandPicopassCommand_picopassRfMode)
  }
}

@end

void ComStSt25sdkCommandPicopassCommand_picopassRfMode_initWithNSString_withInt_(ComStSt25sdkCommandPicopassCommand_picopassRfMode *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComStSt25sdkCommandPicopassCommand_picopassRfMode *new_ComStSt25sdkCommandPicopassCommand_picopassRfMode_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandPicopassCommand_picopassRfMode, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComStSt25sdkCommandPicopassCommand_picopassRfMode_values() {
  ComStSt25sdkCommandPicopassCommand_picopassRfMode_initialize();
  return [IOSObjectArray arrayWithObjects:ComStSt25sdkCommandPicopassCommand_picopassRfMode_values_ count:4 type:ComStSt25sdkCommandPicopassCommand_picopassRfMode_class_()];
}

ComStSt25sdkCommandPicopassCommand_picopassRfMode *ComStSt25sdkCommandPicopassCommand_picopassRfMode_valueOfWithNSString_(NSString *name) {
  ComStSt25sdkCommandPicopassCommand_picopassRfMode_initialize();
  for (int i = 0; i < 4; i++) {
    ComStSt25sdkCommandPicopassCommand_picopassRfMode *e = ComStSt25sdkCommandPicopassCommand_picopassRfMode_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComStSt25sdkCommandPicopassCommand_picopassRfMode *ComStSt25sdkCommandPicopassCommand_picopassRfMode_fromOrdinal(NSUInteger ordinal) {
  ComStSt25sdkCommandPicopassCommand_picopassRfMode_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return ComStSt25sdkCommandPicopassCommand_picopassRfMode_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandPicopassCommand_picopassRfMode)
