//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/command/Iso15693Command.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/command/Iso15693Command.h"
#include "com/st/st25sdk/command/Iso15693Protocol.h"
#include "com/st/st25sdk/type5/Type5Tag.h"
#include "java/lang/System.h"

@interface ComStSt25sdkCommandIso15693Command ()

- (IOSByteArray *)buildInventoryFrameWithByte:(jbyte)flag
                                     withByte:(jbyte)maskLengthInBits
                                withByteArray:(IOSByteArray *)maskValue
                                  withBoolean:(jboolean)isAFISet
                                     withByte:(jbyte)afiField;

@end

__attribute__((unused)) static IOSByteArray *ComStSt25sdkCommandIso15693Command_buildInventoryFrameWithByte_withByte_withByteArray_withBoolean_withByte_(ComStSt25sdkCommandIso15693Command *self, jbyte flag, jbyte maskLengthInBits, IOSByteArray *maskValue, jboolean isAFISet, jbyte afiField);

@implementation ComStSt25sdkCommandIso15693Command

+ (jbyte)ISO15693_CMD_INVENTORY {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_INVENTORY;
}

+ (jbyte)ISO15693_CMD_STAY_QUIET {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_STAY_QUIET;
}

+ (jbyte)ISO15693_CMD_READ_SINGLE_BLOCK {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_READ_SINGLE_BLOCK;
}

+ (jbyte)ISO15693_CMD_WRITE_SINGLE_BLOCK {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_WRITE_SINGLE_BLOCK;
}

+ (jbyte)ISO15693_CMD_LOCK_BLOCK {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_LOCK_BLOCK;
}

+ (jbyte)ISO15693_CMD_READ_MULTIPLE_BLOCK {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_READ_MULTIPLE_BLOCK;
}

+ (jbyte)ISO15693_CMD_WRITE_MULTIPLE_BLOCK {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_WRITE_MULTIPLE_BLOCK;
}

+ (jbyte)ISO15693_CMD_SELECT {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_SELECT;
}

+ (jbyte)ISO15693_CMD_RESET_TO_READY {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_RESET_TO_READY;
}

+ (jbyte)ISO15693_CMD_WRITE_AFI {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_WRITE_AFI;
}

+ (jbyte)ISO15693_CMD_LOCK_AFI {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_LOCK_AFI;
}

+ (jbyte)ISO15693_CMD_WRITE_DSFID {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_WRITE_DSFID;
}

+ (jbyte)ISO15693_CMD_LOCK_DSFID {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_LOCK_DSFID;
}

+ (jbyte)ISO15693_CMD_GET_SYSTEM_INFO {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_GET_SYSTEM_INFO;
}

+ (jbyte)ISO15693_CMD_GET_MULTIPLE_BLOCK_SEC_STATUS {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_GET_MULTIPLE_BLOCK_SEC_STATUS;
}

+ (jbyte)ISO15693_CMD_EXTENDED_READ_SINGLE_BLOCK {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_READ_SINGLE_BLOCK;
}

+ (jbyte)ISO15693_CMD_EXTENDED_WRITE_SINGLE_BLOCK {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_WRITE_SINGLE_BLOCK;
}

+ (jbyte)ISO15693_CMD_EXTENDED_LOCK_SINGLE_BLOCK {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_LOCK_SINGLE_BLOCK;
}

+ (jbyte)ISO15693_CMD_EXTENDED_READ_MULTIPLE_BLOCK {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_READ_MULTIPLE_BLOCK;
}

+ (jbyte)ISO15693_CMD_EXTENDED_WRITE_MULTIPLE_BLOCK {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_WRITE_MULTIPLE_BLOCK;
}

+ (jbyte)ISO15693_CMD_EXTENDED_GET_SYSTEM_INFO {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_GET_SYSTEM_INFO;
}

+ (jbyte)ISO15693_CMD_EXTENDED_GET_MULTIPLE_BLOCK_SEC_STATUS {
  return ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_GET_MULTIPLE_BLOCK_SEC_STATUS;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, reader, uid);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                             withByte:(jbyte)flag {
  ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(self, reader, uid, flag);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                              withInt:(jint)nbrOfBytesPerBlock {
  ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(self, reader, uid, nbrOfBytesPerBlock);
  return self;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)reader
                                        withByteArray:(IOSByteArray *)uid
                                             withByte:(jbyte)flag
                                              withInt:(jint)nbrOfBytesPerBlock {
  ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, flag, nbrOfBytesPerBlock);
  return self;
}

- (IOSByteArray *)inventoryWithByte:(jbyte)flag {
  return [self inventoryWithByte:flag withByte:(jbyte) (jint) 0x00 withByteArray:nil];
}

- (IOSByteArray *)inventoryWithByte:(jbyte)flag
                           withByte:(jbyte)afiField {
  return ComStSt25sdkCommandIso15693Command_buildInventoryFrameWithByte_withByte_withByteArray_withBoolean_withByte_(self, flag, (jbyte) (jint) 0x00, nil, true, afiField);
}

- (IOSByteArray *)inventoryWithByte:(jbyte)flag
                           withByte:(jbyte)maskLengthInBits
                      withByteArray:(IOSByteArray *)maskValue {
  return ComStSt25sdkCommandIso15693Command_buildInventoryFrameWithByte_withByte_withByteArray_withBoolean_withByte_(self, flag, maskLengthInBits, maskValue, false, (jbyte) (jint) 0x00);
}

- (IOSByteArray *)inventoryWithByte:(jbyte)flag
                           withByte:(jbyte)maskLengthInBits
                      withByteArray:(IOSByteArray *)maskValue
                           withByte:(jbyte)afiField {
  return ComStSt25sdkCommandIso15693Command_buildInventoryFrameWithByte_withByte_withByteArray_withBoolean_withByte_(self, flag, maskLengthInBits, maskValue, true, afiField);
}

- (IOSByteArray *)buildInventoryFrameWithByte:(jbyte)flag
                                     withByte:(jbyte)maskLengthInBits
                                withByteArray:(IOSByteArray *)maskValue
                                  withBoolean:(jboolean)isAFISet
                                     withByte:(jbyte)afiField {
  return ComStSt25sdkCommandIso15693Command_buildInventoryFrameWithByte_withByte_withByteArray_withBoolean_withByte_(self, flag, maskLengthInBits, maskValue, isAFISet, afiField);
}

- (jbyte)stayQuiet {
  return [self stayQuietWithByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)stayQuietWithByte:(jbyte)flag
             withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = ComStSt25sdkCommandIso15693Protocol_ISO15693_HEADER_SIZE_UID;
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_STAY_QUIET;
  [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  response = [self transceiveWithNSString:@"stayQuiet" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (IOSByteArray *)readSingleBlockWithByte:(jbyte)blockAddress {
  return [self readSingleBlockWithByte:blockAddress withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)readSingleBlockWithByte:(jbyte)blockAddress
                                 withByte:(jbyte)flag
                            withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_READ_SINGLE_BLOCK;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(frame, headerSize) = blockAddress;
  return [self transceiveWithNSString:@"readSingleBlock" withByteArray:frame];
}

- (jbyte)writeSingleBlockWithByte:(jbyte)blockAddress
                    withByteArray:(IOSByteArray *)buffer {
  return [self writeSingleBlockWithByte:blockAddress withByteArray:buffer withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)writeSingleBlockWithByte:(jbyte)blockAddress
                    withByteArray:(IOSByteArray *)buffer
                         withByte:(jbyte)flag
                    withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  if (buffer == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + buffer->size_];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_WRITE_SINGLE_BLOCK;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(frame, headerSize) = blockAddress;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, frame, headerSize + 1, buffer->size_);
  response = [self transceiveWithNSString:@"writeSingleBlock" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)lockBlockWithByte:(jbyte)blockAddress {
  return [self lockBlockWithByte:blockAddress withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)lockBlockWithByte:(jbyte)blockAddress
                  withByte:(jbyte)flag
             withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_LOCK_BLOCK;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(frame, headerSize) = blockAddress;
  response = [self transceiveWithNSString:@"lockBlock" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (IOSByteArray *)readMultipleBlockWithByte:(jbyte)blockAddress
                                   withByte:(jbyte)nbrOfBlocks {
  return [self readMultipleBlockWithByte:blockAddress withByte:nbrOfBlocks withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)readMultipleBlockWithByte:(jbyte)blockAddress
                                   withByte:(jbyte)nbrOfBlocks
                                   withByte:(jbyte)flag
                              withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_READ_MULTIPLE_BLOCK;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(frame, headerSize) = blockAddress;
  *IOSByteArray_GetRef(frame, headerSize + 1) = nbrOfBlocks;
  return [self transceiveWithNSString:@"readMultipleBlock" withByteArray:frame];
}

- (jbyte)writeMultipleBlockWithByte:(jbyte)blockAddress
                           withByte:(jbyte)nbrOfBlocks
                      withByteArray:(IOSByteArray *)buffer {
  return [self writeMultipleBlockWithByte:blockAddress withByte:nbrOfBlocks withByteArray:buffer withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)writeMultipleBlockWithByte:(jbyte)blockAddress
                           withByte:(jbyte)nbrOfBlocks
                      withByteArray:(IOSByteArray *)buffer
                           withByte:(jbyte)flag
                      withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  if (buffer == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 2 + buffer->size_];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_WRITE_MULTIPLE_BLOCK;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(frame, headerSize) = blockAddress;
  *IOSByteArray_GetRef(frame, headerSize + 1) = nbrOfBlocks;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, frame, headerSize + 2, buffer->size_);
  response = [self transceiveWithNSString:@"writeMultipleBlock" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)select {
  return [self selectWithByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)selectWithByte:(jbyte)flag
          withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = ComStSt25sdkCommandIso15693Protocol_ISO15693_HEADER_SIZE_UID;
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_SELECT;
  [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  response = [self transceiveWithNSString:@"select" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)resetToReady {
  return [self resetToReadyWithByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)resetToReadyWithByte:(jbyte)flag
                withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_RESET_TO_READY;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  response = [self transceiveWithNSString:@"resetToReady" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)writeAFIWithByte:(jbyte)value {
  return [self writeAFIWithByte:value withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)writeAFIWithByte:(jbyte)value
                 withByte:(jbyte)flag
            withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_WRITE_AFI;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(frame, headerSize) = value;
  response = [self transceiveWithNSString:@"writeAFI" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)lockAFI {
  return [self lockAFIWithByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)lockAFIWithByte:(jbyte)flag
           withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_LOCK_AFI;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  response = [self transceiveWithNSString:@"lockAFI" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)writeDSFIDWithByte:(jbyte)value {
  return [self writeDSFIDWithByte:value withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)writeDSFIDWithByte:(jbyte)value
                   withByte:(jbyte)flag
              withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_WRITE_DSFID;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(frame, headerSize) = value;
  response = [self transceiveWithNSString:@"writeDSFID" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)lockDSFID {
  return [self lockDSFIDWithByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)lockDSFIDWithByte:(jbyte)flag
             withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_LOCK_DSFID;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  response = [self transceiveWithNSString:@"lockDSFID" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (IOSByteArray *)getSystemInfo {
  return [self getSystemInfoWithByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)getSystemInfoWithByte:(jbyte)flag
                          withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_GET_SYSTEM_INFO;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  return [self transceiveWithNSString:@"getSystemInfo" withByteArray:frame];
}

- (IOSByteArray *)getMultipleBlockSecStatusWithByte:(jbyte)firstBlock
                                           withByte:(jbyte)nbOfBlocks {
  return [self getMultipleBlockSecStatusWithByte:firstBlock withByte:nbOfBlocks withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)getMultipleBlockSecStatusWithByte:(jbyte)firstBlock
                                           withByte:(jbyte)nbOfBlocks
                                           withByte:(jbyte)flag
                                      withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1 + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_GET_MULTIPLE_BLOCK_SEC_STATUS;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(frame, headerSize) = firstBlock;
  *IOSByteArray_GetRef(frame, headerSize + 1) = nbOfBlocks;
  return [self transceiveWithNSString:@"getMultipleBlockSecStatus" withByteArray:frame];
}

- (IOSByteArray *)extendedReadSingleBlockWithByteArray:(IOSByteArray *)blockAddress {
  return [self extendedReadSingleBlockWithByteArray:blockAddress withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)extendedReadSingleBlockWithByteArray:(IOSByteArray *)blockAddress
                                              withByte:(jbyte)flag
                                         withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  if ((blockAddress == nil) || (((IOSByteArray *) nil_chk(blockAddress))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 2];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_READ_SINGLE_BLOCK;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(frame, headerSize) = IOSByteArray_Get(nil_chk(blockAddress), 1);
  *IOSByteArray_GetRef(frame, headerSize + 1) = IOSByteArray_Get(blockAddress, 0);
  return [self transceiveWithNSString:@"extendedReadSingleBlock" withByteArray:frame];
}

- (jbyte)extendedLockSingleBlockWithByteArray:(IOSByteArray *)blockAddress {
  return [self extendedLockSingleBlockWithByteArray:blockAddress withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)extendedLockSingleBlockWithByteArray:(IOSByteArray *)blockAddress
                                     withByte:(jbyte)flag
                                withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  if ((blockAddress == nil) || (((IOSByteArray *) nil_chk(blockAddress))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 2];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_LOCK_SINGLE_BLOCK;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(frame, headerSize) = IOSByteArray_Get(nil_chk(blockAddress), 1);
  *IOSByteArray_GetRef(frame, headerSize + 1) = IOSByteArray_Get(blockAddress, 0);
  response = [self transceiveWithNSString:@"extendedLockSingleBlock" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (jbyte)extendedWriteSingleBlockWithByteArray:(IOSByteArray *)blockAddress
                                 withByteArray:(IOSByteArray *)buffer {
  return [self extendedWriteSingleBlockWithByteArray:blockAddress withByteArray:buffer withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)extendedWriteSingleBlockWithByteArray:(IOSByteArray *)blockAddress
                                 withByteArray:(IOSByteArray *)buffer
                                      withByte:(jbyte)flag
                                 withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  if ((buffer == nil) || (blockAddress == nil) || (((IOSByteArray *) nil_chk(blockAddress))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 2 + ((IOSByteArray *) nil_chk(buffer))->size_];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_WRITE_SINGLE_BLOCK;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(frame, headerSize) = IOSByteArray_Get(nil_chk(blockAddress), 1);
  *IOSByteArray_GetRef(frame, headerSize + 1) = IOSByteArray_Get(blockAddress, 0);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, frame, headerSize + 2, buffer->size_);
  response = [self transceiveWithNSString:@"extendedWriteSingleBlock" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (IOSByteArray *)extendedReadMultipleBlockWithByteArray:(IOSByteArray *)blockAddress
                                           withByteArray:(IOSByteArray *)nbrOfBlocks {
  return [self extendedReadMultipleBlockWithByteArray:blockAddress withByteArray:nbrOfBlocks withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)extendedReadMultipleBlockWithByteArray:(IOSByteArray *)blockAddress
                                           withByteArray:(IOSByteArray *)nbrOfBlocks
                                                withByte:(jbyte)flag
                                           withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  if ((blockAddress == nil) || (((IOSByteArray *) nil_chk(blockAddress))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ((nbrOfBlocks == nil) || (((IOSByteArray *) nil_chk(nbrOfBlocks))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + ((IOSByteArray *) nil_chk(blockAddress))->size_ + ((IOSByteArray *) nil_chk(nbrOfBlocks))->size_];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_READ_MULTIPLE_BLOCK;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(frame, headerSize) = IOSByteArray_Get(blockAddress, 1);
  *IOSByteArray_GetRef(frame, headerSize + 1) = IOSByteArray_Get(blockAddress, 0);
  *IOSByteArray_GetRef(frame, headerSize + 2) = IOSByteArray_Get(nbrOfBlocks, 1);
  *IOSByteArray_GetRef(frame, headerSize + 3) = IOSByteArray_Get(nbrOfBlocks, 0);
  return [self transceiveWithNSString:@"extendedReadMultipleBlock" withByteArray:frame];
}

- (jbyte)extendedWriteMultipleBlockWithByteArray:(IOSByteArray *)blockAddress
                                   withByteArray:(IOSByteArray *)nbrOfBlocks
                                   withByteArray:(IOSByteArray *)buffer {
  return [self extendedWriteMultipleBlockWithByteArray:blockAddress withByteArray:nbrOfBlocks withByteArray:buffer withByte:mFlag_ withByteArray:mUid_];
}

- (jbyte)extendedWriteMultipleBlockWithByteArray:(IOSByteArray *)blockAddress
                                   withByteArray:(IOSByteArray *)nbrOfBlocks
                                   withByteArray:(IOSByteArray *)buffer
                                        withByte:(jbyte)flag
                                   withByteArray:(IOSByteArray *)uid {
  IOSByteArray *response;
  IOSByteArray *frame;
  jint headerSize;
  if ((blockAddress == nil) || (((IOSByteArray *) nil_chk(blockAddress))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ((nbrOfBlocks == nil) || (((IOSByteArray *) nil_chk(nbrOfBlocks))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + ((IOSByteArray *) nil_chk(blockAddress))->size_ + ((IOSByteArray *) nil_chk(nbrOfBlocks))->size_ + ((IOSByteArray *) nil_chk(buffer))->size_];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_WRITE_MULTIPLE_BLOCK;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(frame, headerSize) = IOSByteArray_Get(blockAddress, 1);
  *IOSByteArray_GetRef(frame, headerSize + 1) = IOSByteArray_Get(blockAddress, 0);
  *IOSByteArray_GetRef(frame, headerSize + 2) = IOSByteArray_Get(nbrOfBlocks, 1);
  *IOSByteArray_GetRef(frame, headerSize + 3) = IOSByteArray_Get(nbrOfBlocks, 0);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, frame, headerSize + 4, buffer->size_);
  response = [self transceiveWithNSString:@"extendedWriteMultipleBlock" withByteArray:frame];
  return IOSByteArray_Get(nil_chk(response), 0);
}

- (IOSByteArray *)extendedGetSystemInfo {
  return [self extendedGetSystemInfoWithByte:(jbyte) (jint) 0x7F];
}

- (IOSByteArray *)extendedGetSystemInfoWithByte:(jbyte)parameters {
  return [self extendedGetSystemInfoWithByte:parameters withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)extendedGetSystemInfoWithByte:(jbyte)parameters
                                       withByte:(jbyte)flag
                                  withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 1];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_GET_SYSTEM_INFO;
  *IOSByteArray_GetRef(frame, 2) = parameters;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET + 1 withByteArray:uid];
  return [self transceiveWithNSString:@"extendedGetSystemInfo" withByteArray:frame];
}

- (IOSByteArray *)extendedGetMultipleBlockSecStatusWithByteArray:(IOSByteArray *)firstBlock
                                                   withByteArray:(IOSByteArray *)nbOfBlocks {
  return [self extendedGetMultipleBlockSecStatusWithByteArray:firstBlock withByteArray:nbOfBlocks withByte:mFlag_ withByteArray:mUid_];
}

- (IOSByteArray *)extendedGetMultipleBlockSecStatusWithByteArray:(IOSByteArray *)firstBlock
                                                   withByteArray:(IOSByteArray *)nbrOfBlocks
                                                        withByte:(jbyte)flag
                                                   withByteArray:(IOSByteArray *)uid {
  IOSByteArray *frame;
  jint headerSize;
  if ((firstBlock == nil) || (((IOSByteArray *) nil_chk(firstBlock))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ((nbrOfBlocks == nil) || (((IOSByteArray *) nil_chk(nbrOfBlocks))->size_ != 2)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  headerSize = [self getIso15693HeaderSizeWithByte:flag];
  frame = [IOSByteArray newArrayWithLength:headerSize + 2 + 2];
  *IOSByteArray_GetRef(frame, 0) = flag;
  *IOSByteArray_GetRef(frame, 1) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_GET_MULTIPLE_BLOCK_SEC_STATUS;
  if ([self uidNeededWithByte:flag]) [self addUidToFrameWithByteArray:frame withInt:ComStSt25sdkCommandIso15693Protocol_ISO15693_UID_OFFSET withByteArray:uid];
  *IOSByteArray_GetRef(frame, headerSize) = IOSByteArray_Get(nil_chk(firstBlock), 1);
  *IOSByteArray_GetRef(frame, headerSize + 1) = IOSByteArray_Get(firstBlock, 0);
  *IOSByteArray_GetRef(frame, headerSize + 2) = IOSByteArray_Get(nil_chk(nbrOfBlocks), 1);
  *IOSByteArray_GetRef(frame, headerSize + 3) = IOSByteArray_Get(nbrOfBlocks, 0);
  return [self transceiveWithNSString:@"extendedGetMultipleBlockSecStatus" withByteArray:frame];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 7, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 8, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 9, 6, -1, -1, -1 },
    { NULL, "[B", 0x2, 10, 11, 6, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 12, 13, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 14, 5, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 14, 8, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 15, 13, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 15, 16, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 17, 5, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 17, 8, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 18, 7, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 18, 19, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 20, 8, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 20, 21, 6, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 22, 13, 6, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 23, 13, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 24, 5, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 24, 8, 6, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 25, 13, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 26, 5, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 26, 8, 6, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 27, 13, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 28, 13, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 29, 7, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 29, 19, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 30, 31, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 30, 32, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 33, 31, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 33, 32, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 34, 35, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 34, 36, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 37, 35, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 37, 36, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 38, 39, 6, -1, -1, -1 },
    { NULL, "B", 0x1, 38, 40, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 41, 5, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 41, 8, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 42, 35, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 42, 36, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[1].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withByte:);
  methods[2].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withInt:);
  methods[3].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:withByte:withInt:);
  methods[4].selector = @selector(inventoryWithByte:);
  methods[5].selector = @selector(inventoryWithByte:withByte:);
  methods[6].selector = @selector(inventoryWithByte:withByte:withByteArray:);
  methods[7].selector = @selector(inventoryWithByte:withByte:withByteArray:withByte:);
  methods[8].selector = @selector(buildInventoryFrameWithByte:withByte:withByteArray:withBoolean:withByte:);
  methods[9].selector = @selector(stayQuiet);
  methods[10].selector = @selector(stayQuietWithByte:withByteArray:);
  methods[11].selector = @selector(readSingleBlockWithByte:);
  methods[12].selector = @selector(readSingleBlockWithByte:withByte:withByteArray:);
  methods[13].selector = @selector(writeSingleBlockWithByte:withByteArray:);
  methods[14].selector = @selector(writeSingleBlockWithByte:withByteArray:withByte:withByteArray:);
  methods[15].selector = @selector(lockBlockWithByte:);
  methods[16].selector = @selector(lockBlockWithByte:withByte:withByteArray:);
  methods[17].selector = @selector(readMultipleBlockWithByte:withByte:);
  methods[18].selector = @selector(readMultipleBlockWithByte:withByte:withByte:withByteArray:);
  methods[19].selector = @selector(writeMultipleBlockWithByte:withByte:withByteArray:);
  methods[20].selector = @selector(writeMultipleBlockWithByte:withByte:withByteArray:withByte:withByteArray:);
  methods[21].selector = @selector(select);
  methods[22].selector = @selector(selectWithByte:withByteArray:);
  methods[23].selector = @selector(resetToReady);
  methods[24].selector = @selector(resetToReadyWithByte:withByteArray:);
  methods[25].selector = @selector(writeAFIWithByte:);
  methods[26].selector = @selector(writeAFIWithByte:withByte:withByteArray:);
  methods[27].selector = @selector(lockAFI);
  methods[28].selector = @selector(lockAFIWithByte:withByteArray:);
  methods[29].selector = @selector(writeDSFIDWithByte:);
  methods[30].selector = @selector(writeDSFIDWithByte:withByte:withByteArray:);
  methods[31].selector = @selector(lockDSFID);
  methods[32].selector = @selector(lockDSFIDWithByte:withByteArray:);
  methods[33].selector = @selector(getSystemInfo);
  methods[34].selector = @selector(getSystemInfoWithByte:withByteArray:);
  methods[35].selector = @selector(getMultipleBlockSecStatusWithByte:withByte:);
  methods[36].selector = @selector(getMultipleBlockSecStatusWithByte:withByte:withByte:withByteArray:);
  methods[37].selector = @selector(extendedReadSingleBlockWithByteArray:);
  methods[38].selector = @selector(extendedReadSingleBlockWithByteArray:withByte:withByteArray:);
  methods[39].selector = @selector(extendedLockSingleBlockWithByteArray:);
  methods[40].selector = @selector(extendedLockSingleBlockWithByteArray:withByte:withByteArray:);
  methods[41].selector = @selector(extendedWriteSingleBlockWithByteArray:withByteArray:);
  methods[42].selector = @selector(extendedWriteSingleBlockWithByteArray:withByteArray:withByte:withByteArray:);
  methods[43].selector = @selector(extendedReadMultipleBlockWithByteArray:withByteArray:);
  methods[44].selector = @selector(extendedReadMultipleBlockWithByteArray:withByteArray:withByte:withByteArray:);
  methods[45].selector = @selector(extendedWriteMultipleBlockWithByteArray:withByteArray:withByteArray:);
  methods[46].selector = @selector(extendedWriteMultipleBlockWithByteArray:withByteArray:withByteArray:withByte:withByteArray:);
  methods[47].selector = @selector(extendedGetSystemInfo);
  methods[48].selector = @selector(extendedGetSystemInfoWithByte:);
  methods[49].selector = @selector(extendedGetSystemInfoWithByte:withByte:withByteArray:);
  methods[50].selector = @selector(extendedGetMultipleBlockSecStatusWithByteArray:withByteArray:);
  methods[51].selector = @selector(extendedGetMultipleBlockSecStatusWithByteArray:withByteArray:withByte:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ISO15693_CMD_INVENTORY", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_INVENTORY, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_STAY_QUIET", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_STAY_QUIET, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_READ_SINGLE_BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_READ_SINGLE_BLOCK, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_WRITE_SINGLE_BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_WRITE_SINGLE_BLOCK, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_LOCK_BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_LOCK_BLOCK, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_READ_MULTIPLE_BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_READ_MULTIPLE_BLOCK, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_WRITE_MULTIPLE_BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_WRITE_MULTIPLE_BLOCK, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_SELECT", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_SELECT, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_RESET_TO_READY", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_RESET_TO_READY, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_WRITE_AFI", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_WRITE_AFI, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_LOCK_AFI", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_LOCK_AFI, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_WRITE_DSFID", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_WRITE_DSFID, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_LOCK_DSFID", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_LOCK_DSFID, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_GET_SYSTEM_INFO", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_GET_SYSTEM_INFO, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_GET_MULTIPLE_BLOCK_SEC_STATUS", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_GET_MULTIPLE_BLOCK_SEC_STATUS, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_EXTENDED_READ_SINGLE_BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_READ_SINGLE_BLOCK, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_EXTENDED_WRITE_SINGLE_BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_WRITE_SINGLE_BLOCK, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_EXTENDED_LOCK_SINGLE_BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_LOCK_SINGLE_BLOCK, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_EXTENDED_READ_MULTIPLE_BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_READ_MULTIPLE_BLOCK, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_EXTENDED_WRITE_MULTIPLE_BLOCK", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_WRITE_MULTIPLE_BLOCK, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_EXTENDED_GET_SYSTEM_INFO", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_GET_SYSTEM_INFO, 0x19, -1, -1, -1, -1 },
    { "ISO15693_CMD_EXTENDED_GET_MULTIPLE_BLOCK_SEC_STATUS", "B", .constantValue.asChar = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_EXTENDED_GET_MULTIPLE_BLOCK_SEC_STATUS, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[B", "LComStSt25sdkRFReaderInterface;[BB", "LComStSt25sdkRFReaderInterface;[BI", "LComStSt25sdkRFReaderInterface;[BBI", "inventory", "B", "LComStSt25sdkSTException;", "BB", "BB[B", "BB[BB", "buildInventoryFrame", "BB[BZB", "stayQuiet", "B[B", "readSingleBlock", "writeSingleBlock", "B[BB[B", "lockBlock", "readMultipleBlock", "BBB[B", "writeMultipleBlock", "BB[BB[B", "select", "resetToReady", "writeAFI", "lockAFI", "writeDSFID", "lockDSFID", "getSystemInfo", "getMultipleBlockSecStatus", "extendedReadSingleBlock", "[B", "[BB[B", "extendedLockSingleBlock", "extendedWriteSingleBlock", "[B[B", "[B[BB[B", "extendedReadMultipleBlock", "extendedWriteMultipleBlock", "[B[B[B", "[B[B[BB[B", "extendedGetSystemInfo", "extendedGetMultipleBlockSecStatus" };
  static const J2ObjcClassInfo _ComStSt25sdkCommandIso15693Command = { "Iso15693Command", "com.st.st25sdk.command", ptrTable, methods, fields, 7, 0x1, 52, 22, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkCommandIso15693Command;
}

@end

void ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkCommandIso15693Command *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, ComStSt25sdkCommandIso15693Protocol_DEFAULT_FLAG, ComStSt25sdkType5Type5Tag_DEFAULT_NBR_OF_BYTES_PER_BLOCK);
}

ComStSt25sdkCommandIso15693Command *new_ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandIso15693Command, initWithComStSt25sdkRFReaderInterface_withByteArray_, reader, uid)
}

ComStSt25sdkCommandIso15693Command *create_ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandIso15693Command, initWithComStSt25sdkRFReaderInterface_withByteArray_, reader, uid)
}

void ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(ComStSt25sdkCommandIso15693Command *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, flag, ComStSt25sdkType5Type5Tag_DEFAULT_NBR_OF_BYTES_PER_BLOCK);
}

ComStSt25sdkCommandIso15693Command *new_ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandIso15693Command, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_, reader, uid, flag)
}

ComStSt25sdkCommandIso15693Command *create_ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandIso15693Command, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_, reader, uid, flag)
}

void ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(ComStSt25sdkCommandIso15693Command *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, ComStSt25sdkCommandIso15693Protocol_DEFAULT_FLAG, nbrOfBytesPerBlock);
}

ComStSt25sdkCommandIso15693Command *new_ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandIso15693Command, initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_, reader, uid, nbrOfBytesPerBlock)
}

ComStSt25sdkCommandIso15693Command *create_ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jint nbrOfBytesPerBlock) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandIso15693Command, initWithComStSt25sdkRFReaderInterface_withByteArray_withInt_, reader, uid, nbrOfBytesPerBlock)
}

void ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(ComStSt25sdkCommandIso15693Command *self, id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  ComStSt25sdkCommandIso15693Protocol_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(self, reader, uid, flag, nbrOfBytesPerBlock);
}

ComStSt25sdkCommandIso15693Command *new_ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  J2OBJC_NEW_IMPL(ComStSt25sdkCommandIso15693Command, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_, reader, uid, flag, nbrOfBytesPerBlock)
}

ComStSt25sdkCommandIso15693Command *create_ComStSt25sdkCommandIso15693Command_initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_(id<ComStSt25sdkRFReaderInterface> reader, IOSByteArray *uid, jbyte flag, jint nbrOfBytesPerBlock) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkCommandIso15693Command, initWithComStSt25sdkRFReaderInterface_withByteArray_withByte_withInt_, reader, uid, flag, nbrOfBytesPerBlock)
}

IOSByteArray *ComStSt25sdkCommandIso15693Command_buildInventoryFrameWithByte_withByte_withByteArray_withBoolean_withByte_(ComStSt25sdkCommandIso15693Command *self, jbyte flag, jbyte maskLengthInBits, IOSByteArray *maskValue, jboolean isAFISet, jbyte afiField) {
  IOSByteArray *frame;
  jint frameOptionSize = 0;
  jint index = 0;
  if (maskValue != nil) {
    frameOptionSize += maskValue->size_;
  }
  if (isAFISet) {
    frameOptionSize++;
  }
  frame = [IOSByteArray newArrayWithLength:ComStSt25sdkCommandIso15693Protocol_ISO15693_HEADER_SIZE + 1 + frameOptionSize];
  *IOSByteArray_GetRef(frame, index++) = flag;
  *IOSByteArray_GetRef(frame, index++) = ComStSt25sdkCommandIso15693Command_ISO15693_CMD_INVENTORY;
  if (isAFISet) {
    *IOSByteArray_GetRef(frame, index++) = afiField;
  }
  *IOSByteArray_GetRef(frame, index++) = maskLengthInBits;
  if (maskValue != nil) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(maskValue, 0, frame, index, maskValue->size_);
  }
  return [self transceiveWithNSString:@"inventory" withByteArray:frame];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkCommandIso15693Command)
