//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/Helper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Crc.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
//#include "org/apache/commons/lang3/StringUtils.h"

@interface ComStSt25sdkHelper ()

- (instancetype)init;

@end

inline IOSCharArray *ComStSt25sdkHelper_get_hexArray(void);
static IOSCharArray *ComStSt25sdkHelper_hexArray;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComStSt25sdkHelper, hexArray, IOSCharArray *)

__attribute__((unused)) static void ComStSt25sdkHelper_init(ComStSt25sdkHelper *self);

__attribute__((unused)) static ComStSt25sdkHelper *new_ComStSt25sdkHelper_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComStSt25sdkHelper *create_ComStSt25sdkHelper_init(void);

__attribute__((unused)) static IOSObjectArray *ComStSt25sdkHelper__Annotations$0(void);

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkHelper)

@implementation ComStSt25sdkHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComStSt25sdkHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)stringForceDigitWithNSString:(NSString *)stringToFormat
                                   withInt:(jint)nbOfDigits {
  return ComStSt25sdkHelper_stringForceDigitWithNSString_withInt_(stringToFormat, nbOfDigits);
}

+ (NSString *)convertByteToHexStringWithByte:(jbyte)byteToConvert {
  return ComStSt25sdkHelper_convertByteToHexStringWithByte_(byteToConvert);
}

+ (NSString *)convertHexByteArrayToStringWithByteArray:(IOSByteArray *)byteArrayToConvert {
  return ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(byteArrayToConvert);
}

+ (NSString *)convertAsciiStringToHexStringWithNSString:(NSString *)asciiData {
  return ComStSt25sdkHelper_convertAsciiStringToHexStringWithNSString_(asciiData);
}

+ (void)printHexByteArrayWithNSString:(NSString *)msg
                        withByteArray:(IOSByteArray *)byteArrayToPrint {
  ComStSt25sdkHelper_printHexByteArrayWithNSString_withByteArray_(msg, byteArrayToPrint);
}

+ (NSString *)convertIntToHexFormatStringWithInt:(jint)numberToConvert {
  return ComStSt25sdkHelper_convertIntToHexFormatStringWithInt_(numberToConvert);
}

+ (IOSByteArray *)convertHexStringToByteArrayWithNSString:(NSString *)s {
  return ComStSt25sdkHelper_convertHexStringToByteArrayWithNSString_(s);
}

+ (NSString *)convertByteArrayToHexStringWithByteArray:(IOSByteArray *)bytes {
  return ComStSt25sdkHelper_convertByteArrayToHexStringWithByteArray_(bytes);
}

+ (jint)convertStringToIntWithNSString:(NSString *)s {
  return ComStSt25sdkHelper_convertStringToIntWithNSString_(s);
}

+ (jint)convertHexStringToIntWithNSString:(NSString *)hexNumber {
  return ComStSt25sdkHelper_convertHexStringToIntWithNSString_(hexNumber);
}

+ (jbyte)convertHexStringToByteWithNSString:(NSString *)hexNumber {
  return ComStSt25sdkHelper_convertHexStringToByteWithNSString_(hexNumber);
}

+ (IOSByteArray *)convertIntTo4BytesHexaFormatWithInt:(jint)numberToConvert {
  return ComStSt25sdkHelper_convertIntTo4BytesHexaFormatWithInt_(numberToConvert);
}

+ (jint)convert4BytesHexaFormatToIntWithByteArray:(IOSByteArray *)arrayToConvert {
  return ComStSt25sdkHelper_convert4BytesHexaFormatToIntWithByteArray_(arrayToConvert);
}

+ (IOSByteArray *)convertIntTo3BytesHexaFormatWithInt:(jint)numberToConvert {
  return ComStSt25sdkHelper_convertIntTo3BytesHexaFormatWithInt_(numberToConvert);
}

+ (jint)convert3BytesHexaFormatToIntWithByteArray:(IOSByteArray *)arrayToConvert {
  return ComStSt25sdkHelper_convert3BytesHexaFormatToIntWithByteArray_(arrayToConvert);
}

+ (IOSByteArray *)convertIntTo2BytesHexaFormatWithInt:(jint)numberToConvert {
  return ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(numberToConvert);
}

+ (jint)convert2BytesHexaFormatToIntWithByteArray:(IOSByteArray *)arrayToConvert {
  return ComStSt25sdkHelper_convert2BytesHexaFormatToIntWithByteArray_(arrayToConvert);
}

+ (jbyte)readNextByteOfByteArrayInputStreamWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)byteArrayInputStream {
  return ComStSt25sdkHelper_readNextByteOfByteArrayInputStreamWithJavaIoByteArrayInputStream_(byteArrayInputStream);
}

+ (IOSByteArray *)readNextBlockOfByteArrayInputStreamWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)byteArrayInputStream
                                                                            withInt:(jint)nbrOfBytesPerBlock {
  return ComStSt25sdkHelper_readNextBlockOfByteArrayInputStreamWithJavaIoByteArrayInputStream_withInt_(byteArrayInputStream, nbrOfBytesPerBlock);
}

+ (IOSByteArray *)readByteArrayInputStreamWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)byteArrayInputStream
                                                                 withInt:(jint)len {
  return ComStSt25sdkHelper_readByteArrayInputStreamWithJavaIoByteArrayInputStream_withInt_(byteArrayInputStream, len);
}

+ (IOSByteArray *)concatenateByteArraysWithByte:(jbyte)singleByte
                                  withByteArray:(IOSByteArray *)array2 {
  return ComStSt25sdkHelper_concatenateByteArraysWithByte_withByteArray_(singleByte, array2);
}

+ (IOSByteArray *)concatenateByteArraysWithByteArray:(IOSByteArray *)array1
                                       withByteArray:(IOSByteArray *)array2 {
  return ComStSt25sdkHelper_concatenateByteArraysWithByteArray_withByteArray_(array1, array2);
}

+ (IOSByteArray *)reverseByteArrayWithByteArray:(IOSByteArray *)array {
  return ComStSt25sdkHelper_reverseByteArrayWithByteArray_(array);
}

+ (jint)divisionRoundedUpWithInt:(jint)num
                         withInt:(jint)den {
  return ComStSt25sdkHelper_divisionRoundedUpWithInt_withInt_(num, den);
}

+ (jint)convertByteToUnsignedIntWithByte:(jbyte)byteToConvert {
  return ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(byteToConvert);
}

+ (jchar)convertByteToAsciiCharWithByte:(jbyte)byteToConvert {
  return ComStSt25sdkHelper_convertByteToAsciiCharWithByte_(byteToConvert);
}

+ (NSString *)convertHexValueToReversedAsciiStringWithInt:(jint)val
                                                  withInt:(jint)nbrOfCharacters {
  return ComStSt25sdkHelper_convertHexValueToReversedAsciiStringWithInt_withInt_(val, nbrOfCharacters);
}

+ (jint)convertAsciiStringToReversedHexValueWithNSString:(NSString *)stringToConvert {
  return ComStSt25sdkHelper_convertAsciiStringToReversedHexValueWithNSString_(stringToConvert);
}

+ (NSString *)convertHexByteToAsciiStringWithByte:(jbyte)myByte {
  return ComStSt25sdkHelper_convertHexByteToAsciiStringWithByte_(myByte);
}

+ (NSString *)convertHexByteArrayToAsciiStringWithByteArray:(IOSByteArray *)myByteArray {
  return ComStSt25sdkHelper_convertHexByteArrayToAsciiStringWithByteArray_(myByteArray);
}

+ (jint)findSubArrayPositionWithByteArray:(IOSByteArray *)arrayToSearch
                            withByteArray:(IOSByteArray *)patternToFind {
  return ComStSt25sdkHelper_findSubArrayPositionWithByteArray_withByteArray_(arrayToSearch, patternToFind);
}

+ (jboolean)isStringInST25AsciiTableWithNSString:(NSString *)txt {
  return ComStSt25sdkHelper_isStringInST25AsciiTableWithNSString_(txt);
}

+ (jboolean)isCharacterInST25AsciiTableWithChar:(jchar)myChar {
  return ComStSt25sdkHelper_isCharacterInST25AsciiTableWithChar_(myChar);
}

+ (IOSByteArray *)computeCrcWithByteArray:(IOSByteArray *)data {
  return ComStSt25sdkHelper_computeCrcWithByteArray_(data);
}

+ (jboolean)isPowerOfTwoWithInt:(jint)n {
  return ComStSt25sdkHelper_isPowerOfTwoWithInt_(n);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 12, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 14, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 15, 7, 16, -1, -1, -1 },
    { NULL, "B", 0x9, 17, 7, 16, -1, -1, -1 },
    { NULL, "[B", 0x9, 18, 11, 16, -1, -1, -1 },
    { NULL, "I", 0x9, 19, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 20, 11, 16, -1, -1, -1 },
    { NULL, "I", 0x9, 21, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 22, 11, 16, -1, -1, -1 },
    { NULL, "I", 0x9, 23, 5, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 24, 25, 16, -1, -1, -1 },
    { NULL, "[B", 0x9, 26, 27, 16, -1, 28, -1 },
    { NULL, "[B", 0x9, 29, 27, 16, -1, -1, -1 },
    { NULL, "[B", 0x9, 30, 31, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 30, 32, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 33, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 34, 35, 16, -1, -1, -1 },
    { NULL, "I", 0x9, 36, 3, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 37, 3, 16, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 38, 35, 16, -1, -1, -1 },
    { NULL, "I", 0x9, 39, 7, 16, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 40, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 41, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 42, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 43, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 44, 45, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 46, 5, 47, -1, -1, -1 },
    { NULL, "Z", 0x9, 48, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(stringForceDigitWithNSString:withInt:);
  methods[2].selector = @selector(convertByteToHexStringWithByte:);
  methods[3].selector = @selector(convertHexByteArrayToStringWithByteArray:);
  methods[4].selector = @selector(convertAsciiStringToHexStringWithNSString:);
  methods[5].selector = @selector(printHexByteArrayWithNSString:withByteArray:);
  methods[6].selector = @selector(convertIntToHexFormatStringWithInt:);
  methods[7].selector = @selector(convertHexStringToByteArrayWithNSString:);
  methods[8].selector = @selector(convertByteArrayToHexStringWithByteArray:);
  methods[9].selector = @selector(convertStringToIntWithNSString:);
  methods[10].selector = @selector(convertHexStringToIntWithNSString:);
  methods[11].selector = @selector(convertHexStringToByteWithNSString:);
  methods[12].selector = @selector(convertIntTo4BytesHexaFormatWithInt:);
  methods[13].selector = @selector(convert4BytesHexaFormatToIntWithByteArray:);
  methods[14].selector = @selector(convertIntTo3BytesHexaFormatWithInt:);
  methods[15].selector = @selector(convert3BytesHexaFormatToIntWithByteArray:);
  methods[16].selector = @selector(convertIntTo2BytesHexaFormatWithInt:);
  methods[17].selector = @selector(convert2BytesHexaFormatToIntWithByteArray:);
  methods[18].selector = @selector(readNextByteOfByteArrayInputStreamWithJavaIoByteArrayInputStream:);
  methods[19].selector = @selector(readNextBlockOfByteArrayInputStreamWithJavaIoByteArrayInputStream:withInt:);
  methods[20].selector = @selector(readByteArrayInputStreamWithJavaIoByteArrayInputStream:withInt:);
  methods[21].selector = @selector(concatenateByteArraysWithByte:withByteArray:);
  methods[22].selector = @selector(concatenateByteArraysWithByteArray:withByteArray:);
  methods[23].selector = @selector(reverseByteArrayWithByteArray:);
  methods[24].selector = @selector(divisionRoundedUpWithInt:withInt:);
  methods[25].selector = @selector(convertByteToUnsignedIntWithByte:);
  methods[26].selector = @selector(convertByteToAsciiCharWithByte:);
  methods[27].selector = @selector(convertHexValueToReversedAsciiStringWithInt:withInt:);
  methods[28].selector = @selector(convertAsciiStringToReversedHexValueWithNSString:);
  methods[29].selector = @selector(convertHexByteToAsciiStringWithByte:);
  methods[30].selector = @selector(convertHexByteArrayToAsciiStringWithByteArray:);
  methods[31].selector = @selector(findSubArrayPositionWithByteArray:withByteArray:);
  methods[32].selector = @selector(isStringInST25AsciiTableWithNSString:);
  methods[33].selector = @selector(isCharacterInST25AsciiTableWithChar:);
  methods[34].selector = @selector(computeCrcWithByteArray:);
  methods[35].selector = @selector(isPowerOfTwoWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hexArray", "[C", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
  };
  static const void *ptrTable[] = { "stringForceDigit", "LNSString;I", "convertByteToHexString", "B", "convertHexByteArrayToString", "[B", "convertAsciiStringToHexString", "LNSString;", "printHexByteArray", "LNSString;[B", "convertIntToHexFormatString", "I", "convertHexStringToByteArray", "convertByteArrayToHexString", "convertStringToInt", "convertHexStringToInt", "LComStSt25sdkSTException;", "convertHexStringToByte", "convertIntTo4BytesHexaFormat", "convert4BytesHexaFormatToInt", "convertIntTo3BytesHexaFormat", "convert3BytesHexaFormatToInt", "convertIntTo2BytesHexaFormat", "convert2BytesHexaFormatToInt", "readNextByteOfByteArrayInputStream", "LJavaIoByteArrayInputStream;", "readNextBlockOfByteArrayInputStream", "LJavaIoByteArrayInputStream;I", (void *)&ComStSt25sdkHelper__Annotations$0, "readByteArrayInputStream", "concatenateByteArrays", "B[B", "[B[B", "reverseByteArray", "divisionRoundedUp", "II", "convertByteToUnsignedInt", "convertByteToAsciiChar", "convertHexValueToReversedAsciiString", "convertAsciiStringToReversedHexValue", "convertHexByteToAsciiString", "convertHexByteArrayToAsciiString", "findSubArrayPosition", "isStringInST25AsciiTable", "isCharacterInST25AsciiTable", "C", "computeCrc", "LJavaIoIOException;LComStSt25sdkSTException;", "isPowerOfTwo", &ComStSt25sdkHelper_hexArray };
  static const J2ObjcClassInfo _ComStSt25sdkHelper = { "Helper", "com.st.st25sdk", ptrTable, methods, fields, 7, 0x1, 36, 1, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkHelper;
}

+ (void)initialize {
  if (self == [ComStSt25sdkHelper class]) {
    ComStSt25sdkHelper_hexArray = [@"0123456789ABCDEF" java_toCharArray];
    J2OBJC_SET_INITIALIZED(ComStSt25sdkHelper)
  }
}

@end

void ComStSt25sdkHelper_init(ComStSt25sdkHelper *self) {
  NSObject_init(self);
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"Utility class");
}

ComStSt25sdkHelper *new_ComStSt25sdkHelper_init() {
  J2OBJC_NEW_IMPL(ComStSt25sdkHelper, init)
}

ComStSt25sdkHelper *create_ComStSt25sdkHelper_init() {
  J2OBJC_CREATE_IMPL(ComStSt25sdkHelper, init)
}

NSString *ComStSt25sdkHelper_stringForceDigitWithNSString_withInt_(NSString *stringToFormat, jint nbOfDigits) {
  ComStSt25sdkHelper_initialize();
  if (stringToFormat == nil || [stringToFormat java_isEmpty]) {
    //return OrgApacheCommonsLang3StringUtils_repeatWithNSString_withInt_(@"0", nbOfDigits);
      return [[NSString java_stringWithCharacters:[IOSCharArray newArrayWithLength:nbOfDigits]] java_replace:@"\x00" withSequence:stringToFormat];
  }
  NSString *stringFormated = [stringToFormat java_replaceAll:@" " withReplacement:@""];
  if ([((NSString *) nil_chk(stringFormated)) java_length] < nbOfDigits) {
    while ([((NSString *) nil_chk(stringFormated)) java_length] != nbOfDigits) {
      stringFormated = [@"0" java_concat:stringFormated];
    }
  }
  return stringFormated;
}

NSString *ComStSt25sdkHelper_convertByteToHexStringWithByte_(jbyte byteToConvert) {
  ComStSt25sdkHelper_initialize();
  jint value = ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(byteToConvert);
  return [((NSString *) nil_chk(NSString_java_formatWithNSString_withNSObjectArray_(@"%02x", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(value) } count:1 type:NSObject_class_()]))) uppercaseString];
}

NSString *ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(IOSByteArray *byteArrayToConvert) {
  ComStSt25sdkHelper_initialize();
  if ((byteArrayToConvert == nil) || (((IOSByteArray *) nil_chk(byteArrayToConvert))->size_ == 0)) {
    return @"";
  }
  JavaLangStringBuilder *bld = new_JavaLangStringBuilder_init();
  {
    IOSByteArray *a__ = byteArrayToConvert;
    jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte aByte = *b__++;
      if (aByte < 0) {
        (void) [bld appendWithNSString:JreStrcat("$C", JavaLangInteger_toStringWithInt_withInt_(aByte + 256, 16), ' ')];
      }
      else if (aByte <= 15) {
        (void) [bld appendWithNSString:JreStrcat("C$C", '0', JavaLangInteger_toStringWithInt_withInt_(aByte, 16), ' ')];
      }
      else {
        (void) [bld appendWithNSString:JreStrcat("$C", JavaLangInteger_toStringWithInt_withInt_(aByte, 16), ' ')];
      }
    }
  }
  (void) [bld deleteCharAtWithInt:[bld java_length] - 1];
  return [bld description];
}

NSString *ComStSt25sdkHelper_convertAsciiStringToHexStringWithNSString_(NSString *asciiData) {
  ComStSt25sdkHelper_initialize();
  @try {
    return ComStSt25sdkHelper_convertByteArrayToHexStringWithByteArray_([((NSString *) nil_chk(asciiData)) java_getBytesWithCharsetName:@"UTF-8"]);
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    return @"";
  }
}

void ComStSt25sdkHelper_printHexByteArrayWithNSString_withByteArray_(NSString *msg, IOSByteArray *byteArrayToPrint) {
  ComStSt25sdkHelper_initialize();
  jboolean endOfBuffer = false;
  jint chunkSize = 32;
  if (byteArrayToPrint == nil) {
    return;
  }
  ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$$I$", msg, @" (", byteArrayToPrint->size_, @" bytes): "));
  JavaIoByteArrayInputStream *byteArrayInputStream = new_JavaIoByteArrayInputStream_initWithByteArray_(byteArrayToPrint);
  while (!endOfBuffer) {
    IOSByteArray *buffer = [IOSByteArray newArrayWithLength:chunkSize];
    jint nbrOfBytesRead = [byteArrayInputStream readWithByteArray:buffer withInt:0 withInt:buffer->size_];
    if (nbrOfBytesRead == chunkSize) {
      ComStSt25sdkSTLog_iWithNSString_(ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(buffer));
    }
    else {
      endOfBuffer = true;
      if (nbrOfBytesRead > 0) {
        IOSByteArray *data = JavaUtilArrays_copyOfWithByteArray_withInt_(buffer, nbrOfBytesRead);
        ComStSt25sdkSTLog_iWithNSString_(ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(data));
      }
    }
  }
}

NSString *ComStSt25sdkHelper_convertIntToHexFormatStringWithInt_(jint numberToConvert) {
  ComStSt25sdkHelper_initialize();
  return [((NSString *) nil_chk(NSString_java_formatWithNSString_withNSObjectArray_(@"%04x", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numberToConvert) } count:1 type:NSObject_class_()]))) uppercaseString];
}

IOSByteArray *ComStSt25sdkHelper_convertHexStringToByteArrayWithNSString_(NSString *s) {
  ComStSt25sdkHelper_initialize();
  if (s == nil || [s java_isEmpty]) {
    return [IOSByteArray newArrayWithLength:0];
  }
  NSString *stringToConvert = s;
  jint len = [stringToConvert java_length];
  if (len % 2 != 0) {
    stringToConvert = ComStSt25sdkHelper_stringForceDigitWithNSString_withInt_(s, len + 1);
    len = [((NSString *) nil_chk(stringToConvert)) java_length];
  }
  IOSByteArray *data = [IOSByteArray newArrayWithLength:len / 2];
  for (jint i = 0; i < (len - 1); i += 2) {
    *IOSByteArray_GetRef(data, i / 2) = (jbyte) ((JreLShift32(JavaLangCharacter_digitWithChar_withInt_([stringToConvert charAtWithInt:i], 16), 4)) + JavaLangCharacter_digitWithChar_withInt_([stringToConvert charAtWithInt:i + 1], 16));
  }
  return data;
}

NSString *ComStSt25sdkHelper_convertByteArrayToHexStringWithByteArray_(IOSByteArray *bytes) {
  ComStSt25sdkHelper_initialize();
  if (bytes == nil) {
    return @"";
  }
  IOSCharArray *hexChars = [IOSCharArray newArrayWithLength:bytes->size_ * 2];
  for (jint j = 0; j < bytes->size_; j++) {
    jint v = ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(bytes, j));
    *IOSCharArray_GetRef(hexChars, j * 2) = IOSCharArray_Get(nil_chk(ComStSt25sdkHelper_hexArray), JreURShift32(v, 4));
    *IOSCharArray_GetRef(hexChars, j * 2 + 1) = IOSCharArray_Get(ComStSt25sdkHelper_hexArray, v & (jint) 0x0F);
  }
  return [NSString java_stringWithCharacters:hexChars];
}

jint ComStSt25sdkHelper_convertStringToIntWithNSString_(NSString *s) {
  ComStSt25sdkHelper_initialize();
  return JavaLangInteger_parseIntWithNSString_(s);
}

jint ComStSt25sdkHelper_convertHexStringToIntWithNSString_(NSString *hexNumber) {
  ComStSt25sdkHelper_initialize();
  if (hexNumber == nil || [hexNumber java_isEmpty]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ([hexNumber java_length] > 8) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jlong longResult;
  jint intResult;
  @try {
    longResult = JavaLangLong_parseLongWithNSString_withInt_(hexNumber, 16);
    intResult = (jint) (longResult & (jint) 0xFFFFFFFF);
  }
  @catch (JavaLangNumberFormatException *e1) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return intResult;
}

jbyte ComStSt25sdkHelper_convertHexStringToByteWithNSString_(NSString *hexNumber) {
  ComStSt25sdkHelper_initialize();
  if (hexNumber == nil || [hexNumber java_isEmpty]) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jint value = ComStSt25sdkHelper_convertHexStringToIntWithNSString_(hexNumber);
  if (value > (jint) 0xFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return (jbyte) value;
}

IOSByteArray *ComStSt25sdkHelper_convertIntTo4BytesHexaFormatWithInt_(jint numberToConvert) {
  ComStSt25sdkHelper_initialize();
  IOSByteArray *convertedNumber = [IOSByteArray newArrayWithLength:4];
  *IOSByteArray_GetRef(convertedNumber, 0) = (jbyte) (JreRShift32((numberToConvert & (jint) 0xFF000000), 24));
  *IOSByteArray_GetRef(convertedNumber, 1) = (jbyte) (JreRShift32((numberToConvert & (jint) 0xFF0000), 16));
  *IOSByteArray_GetRef(convertedNumber, 2) = (jbyte) (JreRShift32((numberToConvert & (jint) 0xFF00), 8));
  *IOSByteArray_GetRef(convertedNumber, 3) = (jbyte) (numberToConvert & (jint) 0xFF);
  return convertedNumber;
}

jint ComStSt25sdkHelper_convert4BytesHexaFormatToIntWithByteArray_(IOSByteArray *arrayToConvert) {
  ComStSt25sdkHelper_initialize();
  jint convertedNumber = 0;
  if (arrayToConvert != nil) {
    convertedNumber += ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(arrayToConvert, 3));
    convertedNumber += ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(arrayToConvert, 2)) * (jint) 0x100;
    convertedNumber += ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(arrayToConvert, 1)) * (jint) 0x10000;
    convertedNumber += ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(arrayToConvert, 0)) * (jint) 0x1000000;
  }
  return convertedNumber;
}

IOSByteArray *ComStSt25sdkHelper_convertIntTo3BytesHexaFormatWithInt_(jint numberToConvert) {
  ComStSt25sdkHelper_initialize();
  if (numberToConvert < 0 || numberToConvert > (jint) 0xFFFFFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *convertedNumber = [IOSByteArray newArrayWithLength:3];
  *IOSByteArray_GetRef(convertedNumber, 0) = (jbyte) (JreRShift32((numberToConvert & (jint) 0xFF0000), 16));
  *IOSByteArray_GetRef(convertedNumber, 1) = (jbyte) (JreRShift32((numberToConvert & (jint) 0xFF00), 8));
  *IOSByteArray_GetRef(convertedNumber, 2) = (jbyte) (numberToConvert & (jint) 0xFF);
  return convertedNumber;
}

jint ComStSt25sdkHelper_convert3BytesHexaFormatToIntWithByteArray_(IOSByteArray *arrayToConvert) {
  ComStSt25sdkHelper_initialize();
  jint convertedNumber = 0;
  if (arrayToConvert != nil) {
    convertedNumber += ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(arrayToConvert, 2));
    convertedNumber += ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(arrayToConvert, 1)) * (jint) 0x100;
    convertedNumber += ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(arrayToConvert, 0)) * (jint) 0x10000;
  }
  return convertedNumber;
}

IOSByteArray *ComStSt25sdkHelper_convertIntTo2BytesHexaFormatWithInt_(jint numberToConvert) {
  ComStSt25sdkHelper_initialize();
  if (numberToConvert < 0 || numberToConvert > (jint) 0xFFFF) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *convertedNumber = [IOSByteArray newArrayWithLength:2];
  *IOSByteArray_GetRef(convertedNumber, 0) = (jbyte) (JreRShift32((numberToConvert & (jint) 0xFF00), 8));
  *IOSByteArray_GetRef(convertedNumber, 1) = (jbyte) (numberToConvert & (jint) 0xFF);
  return convertedNumber;
}

jint ComStSt25sdkHelper_convert2BytesHexaFormatToIntWithByteArray_(IOSByteArray *arrayToConvert) {
  ComStSt25sdkHelper_initialize();
  jint convertedNumber = 0;
  if (arrayToConvert != nil) {
    convertedNumber += ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(arrayToConvert, 1));
    convertedNumber += ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(arrayToConvert, 0)) * 256;
  }
  return convertedNumber;
}

jbyte ComStSt25sdkHelper_readNextByteOfByteArrayInputStreamWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *byteArrayInputStream) {
  ComStSt25sdkHelper_initialize();
  jint result = [((JavaIoByteArrayInputStream *) nil_chk(byteArrayInputStream)) read];
  if (result == -1) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, FILE_EMPTY));
  }
  return (jbyte) result;
}

IOSByteArray *ComStSt25sdkHelper_readNextBlockOfByteArrayInputStreamWithJavaIoByteArrayInputStream_withInt_(JavaIoByteArrayInputStream *byteArrayInputStream, jint nbrOfBytesPerBlock) {
  ComStSt25sdkHelper_initialize();
  IOSByteArray *block = [IOSByteArray newArrayWithLength:nbrOfBytesPerBlock];
  for (jint i = 0; i < block->size_; i++) {
    *IOSByteArray_GetRef(block, i) = ComStSt25sdkHelper_readNextByteOfByteArrayInputStreamWithJavaIoByteArrayInputStream_(byteArrayInputStream);
  }
  return block;
}

IOSByteArray *ComStSt25sdkHelper_readByteArrayInputStreamWithJavaIoByteArrayInputStream_withInt_(JavaIoByteArrayInputStream *byteArrayInputStream, jint len) {
  ComStSt25sdkHelper_initialize();
  if (byteArrayInputStream == nil || len <= 0) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *result = [IOSByteArray newArrayWithLength:len];
  @try {
    jint nbrOfByteRead = [byteArrayInputStream readWithByteArray:result withInt:0 withInt:result->size_];
    if (nbrOfByteRead != len) {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, FILE_EMPTY));
    }
    return result;
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
}

IOSByteArray *ComStSt25sdkHelper_concatenateByteArraysWithByte_withByteArray_(jbyte singleByte, IOSByteArray *array2) {
  ComStSt25sdkHelper_initialize();
  IOSByteArray *result = [IOSByteArray newArrayWithLength:1 + ((IOSByteArray *) nil_chk(array2))->size_];
  *IOSByteArray_GetRef(result, 0) = singleByte;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array2, 0, result, 1, array2->size_);
  return result;
}

IOSByteArray *ComStSt25sdkHelper_concatenateByteArraysWithByteArray_withByteArray_(IOSByteArray *array1, IOSByteArray *array2) {
  ComStSt25sdkHelper_initialize();
  if (array1 == nil && array2 == nil) {
    return nil;
  }
  JavaIoByteArrayOutputStream *outputStream = new_JavaIoByteArrayOutputStream_init();
  @try {
    if (array1 != nil) {
      [outputStream writeWithByteArray:array1];
    }
    if (array2 != nil) {
      [outputStream writeWithByteArray:array2];
    }
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
  }
  return [outputStream toByteArray];
}

IOSByteArray *ComStSt25sdkHelper_reverseByteArrayWithByteArray_(IOSByteArray *array) {
  ComStSt25sdkHelper_initialize();
  IOSByteArray *ret = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(array))->size_];
  for (jint i = 0; i < array->size_; i++) {
    *IOSByteArray_GetRef(ret, i) = IOSByteArray_Get(array, array->size_ - 1 - i);
  }
  return ret;
}

jint ComStSt25sdkHelper_divisionRoundedUpWithInt_withInt_(jint num, jint den) {
  ComStSt25sdkHelper_initialize();
  if (den == 0) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  return (num + den - 1) / den;
}

jint ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(jbyte byteToConvert) {
  ComStSt25sdkHelper_initialize();
  return byteToConvert & (jint) 0xFF;
}

jchar ComStSt25sdkHelper_convertByteToAsciiCharWithByte_(jbyte byteToConvert) {
  ComStSt25sdkHelper_initialize();
  if (byteToConvert < 0) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jchar c = (jchar) (byteToConvert & (jint) 0xFF);
  return c;
}

NSString *ComStSt25sdkHelper_convertHexValueToReversedAsciiStringWithInt_withInt_(jint val, jint nbrOfCharacters) {
  ComStSt25sdkHelper_initialize();
  if ((nbrOfCharacters < 1) || (nbrOfCharacters > 4)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jbyte b = (jbyte) (val & (jint) 0xFF);
  NSString *result = ComStSt25sdkHelper_convertHexByteToAsciiStringWithByte_(b);
  if (nbrOfCharacters >= 2) {
    b = (jbyte) ((JreRShift32(val, 8)) & (jint) 0xFF);
    (void) JreStrAppendStrong(&result, "$", ComStSt25sdkHelper_convertHexByteToAsciiStringWithByte_(b));
  }
  if (nbrOfCharacters >= 3) {
    b = (jbyte) ((JreRShift32(val, 16)) & (jint) 0xFF);
    (void) JreStrAppendStrong(&result, "$", ComStSt25sdkHelper_convertHexByteToAsciiStringWithByte_(b));
  }
  if (nbrOfCharacters >= 4) {
    b = (jbyte) ((JreRShift32(val, 24)) & (jint) 0xFF);
    (void) JreStrAppendStrong(&result, "$", ComStSt25sdkHelper_convertHexByteToAsciiStringWithByte_(b));
  }
  return result;
}

jint ComStSt25sdkHelper_convertAsciiStringToReversedHexValueWithNSString_(NSString *stringToConvert) {
  ComStSt25sdkHelper_initialize();
  jint value;
  jint length = [((NSString *) nil_chk(stringToConvert)) java_length];
  if ((length < 1) || (length > 4)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jchar firstChar = [stringToConvert charAtWithInt:0];
  jbyte firstByte = (jbyte) firstChar;
  value = (firstByte);
  if (length >= 2) {
    jchar secondChar = [stringToConvert charAtWithInt:1];
    jbyte secondByte = (jbyte) secondChar;
    JrePlusAssignIntD(&value, (secondByte) * JavaLangMath_powWithDouble_withDouble_(2, 8));
  }
  if (length >= 3) {
    jchar thirdChar = [stringToConvert charAtWithInt:2];
    jbyte thirdByte = (jbyte) thirdChar;
    JrePlusAssignIntD(&value, (thirdByte) * JavaLangMath_powWithDouble_withDouble_(2, 16));
  }
  if (length >= 4) {
    jchar fourthChar = [stringToConvert charAtWithInt:3];
    jbyte fourthByte = (jbyte) fourthChar;
    JrePlusAssignIntD(&value, (fourthByte) * JavaLangMath_powWithDouble_withDouble_(2, 24));
  }
  return value;
}

NSString *ComStSt25sdkHelper_convertHexByteToAsciiStringWithByte_(jbyte myByte) {
  ComStSt25sdkHelper_initialize();
  NSString *result;
  if ((myByte >= (jint) 0x20) && (myByte < (jint) 0x7F)) {
    jchar myChar = (jchar) (myByte & (jint) 0xFF);
    result = JavaLangCharacter_toStringWithChar_(myChar);
  }
  else {
    result = @".";
  }
  return result;
}

NSString *ComStSt25sdkHelper_convertHexByteArrayToAsciiStringWithByteArray_(IOSByteArray *myByteArray) {
  ComStSt25sdkHelper_initialize();
  NSString *result = @"";
  if (myByteArray == nil) {
    return result;
  }
  for (jint i = 0; i < myByteArray->size_; i++) {
    (void) JreStrAppendStrong(&result, "$", ComStSt25sdkHelper_convertHexByteToAsciiStringWithByte_(IOSByteArray_Get(myByteArray, i)));
  }
  return result;
}

jint ComStSt25sdkHelper_findSubArrayPositionWithByteArray_withByteArray_(IOSByteArray *arrayToSearch, IOSByteArray *patternToFind) {
  ComStSt25sdkHelper_initialize();
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(arrayToSearch))->size_ - ((IOSByteArray *) nil_chk(patternToFind))->size_ + 1; ++i) {
    jboolean found = true;
    for (jint j = 0; j < patternToFind->size_; ++j) {
      if (IOSByteArray_Get(arrayToSearch, i + j) != IOSByteArray_Get(patternToFind, j)) {
        found = false;
        break;
      }
    }
    if (found) {
      return i;
    }
  }
  return -1;
}

jboolean ComStSt25sdkHelper_isStringInST25AsciiTableWithNSString_(NSString *txt) {
  ComStSt25sdkHelper_initialize();
  {
    IOSCharArray *a__ = [((NSString *) nil_chk(txt)) java_toCharArray];
    jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar myChar = *b__++;
      if (!ComStSt25sdkHelper_isCharacterInST25AsciiTableWithChar_(myChar)) {
        return false;
      }
    }
  }
  return true;
}

jboolean ComStSt25sdkHelper_isCharacterInST25AsciiTableWithChar_(jchar myChar) {
  ComStSt25sdkHelper_initialize();
  jboolean isCharacterPortable;
  if (myChar < (jint) 0x20) {
    return false;
  }
  switch (myChar) {
    case (jint) 0x20:
    case (jint) 0x22:
    case (jint) 0x26:
    case (jint) 0x27:
    case (jint) 0x3A:
    case (jint) 0x3B:
    case (jint) 0x3C:
    case (jint) 0x3D:
    case (jint) 0x3E:
    case (jint) 0x3F:
    case (jint) 0x40:
    case (jint) 0x5B:
    case (jint) 0x5D:
    case (jint) 0x5E:
    case (jint) 0x60:
    case (jint) 0x7B:
    case (jint) 0x7C:
    case (jint) 0x7D:
    case (jint) 0x7F:
    isCharacterPortable = false;
    break;
    default:
    isCharacterPortable = true;
    break;
  }
  return isCharacterPortable;
}

IOSByteArray *ComStSt25sdkHelper_computeCrcWithByteArray_(IOSByteArray *data) {
  ComStSt25sdkHelper_initialize();
  jlong crcValue;
  IOSByteArray *crc = [IOSByteArray newArrayWithLength:4];
  if ((((IOSByteArray *) nil_chk(data))->size_ % 4) != 0) {
    jint newDataLength = ComStSt25sdkHelper_divisionRoundedUpWithInt_withInt_(data->size_, 4) * 4;
    IOSByteArray *newData = [IOSByteArray newArrayWithLength:newDataLength];
    JavaUtilArrays_fillWithByteArray_withByte_(newData, (jbyte) 0);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, newData, 0, data->size_);
    crcValue = ComStSt25sdkCrc_CRCWithByteArray_(newData);
  }
  else {
    crcValue = ComStSt25sdkCrc_CRCWithByteArray_(data);
  }
  *IOSByteArray_GetRef(crc, 0) = (jbyte) (JreRShift64((crcValue & (jint) 0xFF000000), 24));
  *IOSByteArray_GetRef(crc, 1) = (jbyte) (JreRShift64((crcValue & (jint) 0x00FF0000), 16));
  *IOSByteArray_GetRef(crc, 2) = (jbyte) (JreRShift64((crcValue & (jint) 0x0000FF00), 8));
  *IOSByteArray_GetRef(crc, 3) = (jbyte) ((crcValue & (jint) 0x000000FF));
  return crc;
}

jboolean ComStSt25sdkHelper_isPowerOfTwoWithInt_(jint n) {
  ComStSt25sdkHelper_initialize();
  return JreFpToInt((JavaLangMath_ceilWithDouble_((JavaLangMath_logWithDouble_(n) / JavaLangMath_logWithDouble_(2))))) == JreFpToInt((JavaLangMath_floorWithDouble_(((JavaLangMath_logWithDouble_(n) / JavaLangMath_logWithDouble_(2))))));
}

IOSObjectArray *ComStSt25sdkHelper__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkHelper)
