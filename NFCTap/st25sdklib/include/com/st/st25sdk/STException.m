//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/STException.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/STException.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Throwable.h"
#include "java/util/Arrays.h"

@interface ComStSt25sdkSTException () {
 @public
  ComStSt25sdkSTException_STExceptionCode *mErrorCode_;
  IOSByteArray *mErrorData_;
}

@end

J2OBJC_FIELD_SETTER(ComStSt25sdkSTException, mErrorCode_, ComStSt25sdkSTException_STExceptionCode *)
J2OBJC_FIELD_SETTER(ComStSt25sdkSTException, mErrorData_, IOSByteArray *)

__attribute__((unused)) static void ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(ComStSt25sdkSTException_STExceptionCode *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComStSt25sdkSTException_STExceptionCode *new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation ComStSt25sdkSTException

- (instancetype)initWithNSString:(NSString *)msg {
  ComStSt25sdkSTException_initWithNSString_(self, msg);
  return self;
}

- (instancetype)initWithJavaLangException:(JavaLangException *)e {
  ComStSt25sdkSTException_initWithJavaLangException_(self, e);
  return self;
}

- (instancetype)initWithComStSt25sdkSTException_STExceptionCode:(ComStSt25sdkSTException_STExceptionCode *)errorCode {
  ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(self, errorCode);
  return self;
}

- (instancetype)initWithComStSt25sdkSTException_STExceptionCode:(ComStSt25sdkSTException_STExceptionCode *)errorCode
                                                  withByteArray:(IOSByteArray *)errorData {
  ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(self, errorCode, errorData);
  return self;
}

- (NSString *)getMessage {
  if (mException_ != nil) {
    return [mException_ getMessage];
  }
  return JreStrcat("$@", @"Error ", mErrorCode_);
}

- (ComStSt25sdkSTException_STExceptionCode *)getError {
  return mErrorCode_;
}

- (IOSByteArray *)getErrorData {
  return mErrorData_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkSTException_STExceptionCode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithJavaLangException:);
  methods[2].selector = @selector(initWithComStSt25sdkSTException_STExceptionCode:);
  methods[3].selector = @selector(initWithComStSt25sdkSTException_STExceptionCode:withByteArray:);
  methods[4].selector = @selector(getMessage);
  methods[5].selector = @selector(getError);
  methods[6].selector = @selector(getErrorData);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mException_", "LJavaLangException;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mErrorCode_", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mErrorData_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaLangException;", "LComStSt25sdkSTException_STExceptionCode;", "LComStSt25sdkSTException_STExceptionCode;[B" };
  static const J2ObjcClassInfo _ComStSt25sdkSTException = { "STException", "com.st.st25sdk", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, 2, -1, -1, -1 };
  return &_ComStSt25sdkSTException;
}

@end

void ComStSt25sdkSTException_initWithNSString_(ComStSt25sdkSTException *self, NSString *msg) {
  JavaLangThrowable_init(self);
  self->mErrorCode_ = JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_ERROR_CODE);
  self->mErrorData_ = nil;
  self->mException_ = new_JavaLangException_initWithNSString_((msg));
}

ComStSt25sdkSTException *new_ComStSt25sdkSTException_initWithNSString_(NSString *msg) {
  J2OBJC_NEW_IMPL(ComStSt25sdkSTException, initWithNSString_, msg)
}

ComStSt25sdkSTException *create_ComStSt25sdkSTException_initWithNSString_(NSString *msg) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkSTException, initWithNSString_, msg)
}

void ComStSt25sdkSTException_initWithJavaLangException_(ComStSt25sdkSTException *self, JavaLangException *e) {
  JavaLangThrowable_initWithJavaLangThrowable_(self, e);
  self->mErrorCode_ = JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_ERROR_CODE);
  self->mErrorData_ = nil;
  self->mException_ = e;
}

ComStSt25sdkSTException *new_ComStSt25sdkSTException_initWithJavaLangException_(JavaLangException *e) {
  J2OBJC_NEW_IMPL(ComStSt25sdkSTException, initWithJavaLangException_, e)
}

ComStSt25sdkSTException *create_ComStSt25sdkSTException_initWithJavaLangException_(JavaLangException *e) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkSTException, initWithJavaLangException_, e)
}

void ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(ComStSt25sdkSTException *self, ComStSt25sdkSTException_STExceptionCode *errorCode) {
  JavaLangThrowable_init(self);
  self->mErrorCode_ = JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_ERROR_CODE);
  self->mErrorData_ = nil;
  self->mException_ = nil;
  self->mErrorCode_ = errorCode;
}

ComStSt25sdkSTException *new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(ComStSt25sdkSTException_STExceptionCode *errorCode) {
  J2OBJC_NEW_IMPL(ComStSt25sdkSTException, initWithComStSt25sdkSTException_STExceptionCode_, errorCode)
}

ComStSt25sdkSTException *create_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(ComStSt25sdkSTException_STExceptionCode *errorCode) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkSTException, initWithComStSt25sdkSTException_STExceptionCode_, errorCode)
}

void ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(ComStSt25sdkSTException *self, ComStSt25sdkSTException_STExceptionCode *errorCode, IOSByteArray *errorData) {
  ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(self, errorCode);
  if (errorData == nil) {
    self->mErrorData_ = nil;
  }
  else {
    self->mErrorData_ = JavaUtilArrays_copyOfWithByteArray_withInt_(errorData, errorData->size_);
  }
}

ComStSt25sdkSTException *new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(ComStSt25sdkSTException_STExceptionCode *errorCode, IOSByteArray *errorData) {
  J2OBJC_NEW_IMPL(ComStSt25sdkSTException, initWithComStSt25sdkSTException_STExceptionCode_withByteArray_, errorCode, errorData)
}

ComStSt25sdkSTException *create_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(ComStSt25sdkSTException_STExceptionCode *errorCode, IOSByteArray *errorData) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkSTException, initWithComStSt25sdkSTException_STExceptionCode_withByteArray_, errorCode, errorData)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkSTException)

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkSTException_STExceptionCode)

ComStSt25sdkSTException_STExceptionCode *ComStSt25sdkSTException_STExceptionCode_values_[63];

@implementation ComStSt25sdkSTException_STExceptionCode

+ (ComStSt25sdkSTException_STExceptionCode *)INVALID_ERROR_CODE {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_ERROR_CODE);
}

+ (ComStSt25sdkSTException_STExceptionCode *)INVALID_DATA {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA);
}

+ (ComStSt25sdkSTException_STExceptionCode *)INVALID_CCFILE {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE);
}

+ (ComStSt25sdkSTException_STExceptionCode *)INVALID_NDEF_DATA {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_NDEF_DATA);
}

+ (ComStSt25sdkSTException_STExceptionCode *)NDEF_MESSAGE_TOO_BIG {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, NDEF_MESSAGE_TOO_BIG);
}

+ (ComStSt25sdkSTException_STExceptionCode *)BAD_PARAMETER {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER);
}

+ (ComStSt25sdkSTException_STExceptionCode *)TAG_CMD_CALLED_FROM_UI_THREAD {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, TAG_CMD_CALLED_FROM_UI_THREAD);
}

+ (ComStSt25sdkSTException_STExceptionCode *)TAG_NOT_IN_THE_FIELD {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, TAG_NOT_IN_THE_FIELD);
}

+ (ComStSt25sdkSTException_STExceptionCode *)CONFIG_PASSWORD_NEEDED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, CONFIG_PASSWORD_NEEDED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)INVALID_BLOCK_ADDRESS {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_BLOCK_ADDRESS);
}

+ (ComStSt25sdkSTException_STExceptionCode *)MEMORY_ALLOCATION_FAILURE {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, MEMORY_ALLOCATION_FAILURE);
}

+ (ComStSt25sdkSTException_STExceptionCode *)CMD_FAILED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)FILE_EMPTY {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, FILE_EMPTY);
}

+ (ComStSt25sdkSTException_STExceptionCode *)CONNECTION_ERROR {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, CONNECTION_ERROR);
}

+ (ComStSt25sdkSTException_STExceptionCode *)NOT_IMPLEMENTED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)NOT_SUPPORTED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)CRC_ERROR {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, CRC_ERROR);
}

+ (ComStSt25sdkSTException_STExceptionCode *)RFREADER_FAILURE {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_FAILURE);
}

+ (ComStSt25sdkSTException_STExceptionCode *)BLOCK_LOCKED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, BLOCK_LOCKED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)ISO15693_CMD_NOT_SUPPORTED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_CMD_NOT_SUPPORTED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)ISO15693_CMD_NOT_RECOGNIZED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_CMD_NOT_RECOGNIZED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)ISO15693_CMD_OPTION_NOT_SUPPORTED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_CMD_OPTION_NOT_SUPPORTED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)ISO15693_ERROR_WITH_NO_INFORMATION {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_ERROR_WITH_NO_INFORMATION);
}

+ (ComStSt25sdkSTException_STExceptionCode *)ISO15693_BLOCK_NOT_AVAILABLE {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_NOT_AVAILABLE);
}

+ (ComStSt25sdkSTException_STExceptionCode *)ISO15693_BLOCK_ALREADY_LOCKED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_ALREADY_LOCKED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)ISO15693_BLOCK_IS_LOCKED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_IS_LOCKED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)ISO15693_BLOCK_PROGRAMMING_FAILED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_PROGRAMMING_FAILED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)ISO15693_BLOCK_LOCKING_FAILED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_LOCKING_FAILED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)ISO15693_BLOCK_PROTECTED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_PROTECTED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)ISO15693_GENERIC_CRYPTOGRAPHIC_ERROR {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_GENERIC_CRYPTOGRAPHIC_ERROR);
}

+ (ComStSt25sdkSTException_STExceptionCode *)RFREADER_NO_RESPONSE {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_NO_RESPONSE);
}

+ (ComStSt25sdkSTException_STExceptionCode *)INS_FIELD_NOT_SUPPORTED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, INS_FIELD_NOT_SUPPORTED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)CLASS_NOT_SUPPORTED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, CLASS_NOT_SUPPORTED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)INVALID_P1_P2 {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_P1_P2);
}

+ (ComStSt25sdkSTException_STExceptionCode *)FILE_APPLICATION_NOT_SUPPORTED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, FILE_APPLICATION_NOT_SUPPORTED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)INVALID_CMD_PARAM {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CMD_PARAM);
}

+ (ComStSt25sdkSTException_STExceptionCode *)INVALID_DATA_PARAM {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA_PARAM);
}

+ (ComStSt25sdkSTException_STExceptionCode *)DATA_NOT_USABLE {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, DATA_NOT_USABLE);
}

+ (ComStSt25sdkSTException_STExceptionCode *)WRONG_SECURITY_STATUS {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, WRONG_SECURITY_STATUS);
}

+ (ComStSt25sdkSTException_STExceptionCode *)INVALID_CMD_FOR_FILE {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CMD_FOR_FILE);
}

+ (ComStSt25sdkSTException_STExceptionCode *)INVALID_USE_CONTEXT {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_USE_CONTEXT);
}

+ (ComStSt25sdkSTException_STExceptionCode *)WRONG_LENGTH {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, WRONG_LENGTH);
}

+ (ComStSt25sdkSTException_STExceptionCode *)UPDATE_ERROR {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, UPDATE_ERROR);
}

+ (ComStSt25sdkSTException_STExceptionCode *)WRONG_PASSWORD {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, WRONG_PASSWORD);
}

+ (ComStSt25sdkSTException_STExceptionCode *)PASSWORD_NEEDED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, PASSWORD_NEEDED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)EOF_ {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, EOF);
}

+ (ComStSt25sdkSTException_STExceptionCode *)FILE_OVERFLOW {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, FILE_OVERFLOW);
}

+ (ComStSt25sdkSTException_STExceptionCode *)UNKNOWN_ANSWER {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, UNKNOWN_ANSWER);
}

+ (ComStSt25sdkSTException_STExceptionCode *)NFC_TYPE2_NACK {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE2_NACK);
}

+ (ComStSt25sdkSTException_STExceptionCode *)NFC_TYPE2_WRONG_ACK_NACK {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE2_WRONG_ACK_NACK);
}

+ (ComStSt25sdkSTException_STExceptionCode *)NFC_TYPE2_STATIC_LOCK_INVALID_VALUES {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE2_STATIC_LOCK_INVALID_VALUES);
}

+ (ComStSt25sdkSTException_STExceptionCode *)NFC_TYPE2_STATIC_LOCK_LOCKED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE2_STATIC_LOCK_LOCKED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)NFC_TYPE3_ERROR_OUT_OF_SCOPE {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_OUT_OF_SCOPE);
}

+ (ComStSt25sdkSTException_STExceptionCode *)NFC_TYPE3_ERROR_RFU {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_RFU);
}

+ (ComStSt25sdkSTException_STExceptionCode *)NFC_TYPE3_ERROR_MEMORY_ERROR {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_MEMORY_ERROR);
}

+ (ComStSt25sdkSTException_STExceptionCode *)NFC_TYPE3_ERROR_EXCESSIVE_WRITES {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_EXCESSIVE_WRITES);
}

+ (ComStSt25sdkSTException_STExceptionCode *)NFC_TYPE3_ERROR_PROPRIETARY_ERROR_CONDITIONS {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_PROPRIETARY_ERROR_CONDITIONS);
}

+ (ComStSt25sdkSTException_STExceptionCode *)NFC_TYPE3_NDEF_WRITE_NOT_FINISHED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_NDEF_WRITE_NOT_FINISHED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)PERMANENTLY_LOCKED {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, PERMANENTLY_LOCKED);
}

+ (ComStSt25sdkSTException_STExceptionCode *)TRANSCEIVE_EVAL_MODE {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, TRANSCEIVE_EVAL_MODE);
}

+ (ComStSt25sdkSTException_STExceptionCode *)IMPLEMENTED_IN_NDA_VERSION {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, IMPLEMENTED_IN_NDA_VERSION);
}

+ (ComStSt25sdkSTException_STExceptionCode *)MISSING_LIBRARY {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, MISSING_LIBRARY);
}

+ (ComStSt25sdkSTException_STExceptionCode *)OTP_MEMORY {
  return JreEnum(ComStSt25sdkSTException_STExceptionCode, OTP_MEMORY);
}

+ (IOSObjectArray *)values {
  return ComStSt25sdkSTException_STExceptionCode_values();
}

+ (ComStSt25sdkSTException_STExceptionCode *)valueOfWithNSString:(NSString *)name {
  return ComStSt25sdkSTException_STExceptionCode_valueOfWithNSString_(name);
}

- (ComStSt25sdkSTException_STExceptionCode_Enum)toNSEnum {
  return (ComStSt25sdkSTException_STExceptionCode_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComStSt25sdkSTException_STExceptionCode;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkSTException_STExceptionCode;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INVALID_ERROR_CODE", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "INVALID_DATA", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "INVALID_CCFILE", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "INVALID_NDEF_DATA", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "NDEF_MESSAGE_TOO_BIG", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "BAD_PARAMETER", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "TAG_CMD_CALLED_FROM_UI_THREAD", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "TAG_NOT_IN_THE_FIELD", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "CONFIG_PASSWORD_NEEDED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "INVALID_BLOCK_ADDRESS", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "MEMORY_ALLOCATION_FAILURE", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "CMD_FAILED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
    { "FILE_EMPTY", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 14, -1, -1 },
    { "CONNECTION_ERROR", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 15, -1, -1 },
    { "NOT_IMPLEMENTED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 16, -1, -1 },
    { "NOT_SUPPORTED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 17, -1, -1 },
    { "CRC_ERROR", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 18, -1, -1 },
    { "RFREADER_FAILURE", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 19, -1, -1 },
    { "BLOCK_LOCKED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 20, -1, -1 },
    { "ISO15693_CMD_NOT_SUPPORTED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 21, -1, -1 },
    { "ISO15693_CMD_NOT_RECOGNIZED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 22, -1, -1 },
    { "ISO15693_CMD_OPTION_NOT_SUPPORTED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 23, -1, -1 },
    { "ISO15693_ERROR_WITH_NO_INFORMATION", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 24, -1, -1 },
    { "ISO15693_BLOCK_NOT_AVAILABLE", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 25, -1, -1 },
    { "ISO15693_BLOCK_ALREADY_LOCKED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 26, -1, -1 },
    { "ISO15693_BLOCK_IS_LOCKED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 27, -1, -1 },
    { "ISO15693_BLOCK_PROGRAMMING_FAILED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 28, -1, -1 },
    { "ISO15693_BLOCK_LOCKING_FAILED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 29, -1, -1 },
    { "ISO15693_BLOCK_PROTECTED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 30, -1, -1 },
    { "ISO15693_GENERIC_CRYPTOGRAPHIC_ERROR", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 31, -1, -1 },
    { "RFREADER_NO_RESPONSE", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 32, -1, -1 },
    { "INS_FIELD_NOT_SUPPORTED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 33, -1, -1 },
    { "CLASS_NOT_SUPPORTED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 34, -1, -1 },
    { "INVALID_P1_P2", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 35, -1, -1 },
    { "FILE_APPLICATION_NOT_SUPPORTED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 36, -1, -1 },
    { "INVALID_CMD_PARAM", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 37, -1, -1 },
    { "INVALID_DATA_PARAM", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 38, -1, -1 },
    { "DATA_NOT_USABLE", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 39, -1, -1 },
    { "WRONG_SECURITY_STATUS", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 40, -1, -1 },
    { "INVALID_CMD_FOR_FILE", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 41, -1, -1 },
    { "INVALID_USE_CONTEXT", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 42, -1, -1 },
    { "WRONG_LENGTH", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 43, -1, -1 },
    { "UPDATE_ERROR", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 44, -1, -1 },
    { "WRONG_PASSWORD", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 45, -1, -1 },
    { "PASSWORD_NEEDED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 46, -1, -1 },
    { "EOF", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 47, -1, -1 },
    { "FILE_OVERFLOW", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 48, -1, -1 },
    { "UNKNOWN_ANSWER", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 49, -1, -1 },
    { "NFC_TYPE2_NACK", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 50, -1, -1 },
    { "NFC_TYPE2_WRONG_ACK_NACK", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 51, -1, -1 },
    { "NFC_TYPE2_STATIC_LOCK_INVALID_VALUES", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 52, -1, -1 },
    { "NFC_TYPE2_STATIC_LOCK_LOCKED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 53, -1, -1 },
    { "NFC_TYPE3_ERROR_OUT_OF_SCOPE", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 54, -1, -1 },
    { "NFC_TYPE3_ERROR_RFU", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 55, -1, -1 },
    { "NFC_TYPE3_ERROR_MEMORY_ERROR", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 56, -1, -1 },
    { "NFC_TYPE3_ERROR_EXCESSIVE_WRITES", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 57, -1, -1 },
    { "NFC_TYPE3_ERROR_PROPRIETARY_ERROR_CONDITIONS", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 58, -1, -1 },
    { "NFC_TYPE3_NDEF_WRITE_NOT_FINISHED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 59, -1, -1 },
    { "PERMANENTLY_LOCKED", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 60, -1, -1 },
    { "TRANSCEIVE_EVAL_MODE", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 61, -1, -1 },
    { "IMPLEMENTED_IN_NDA_VERSION", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 62, -1, -1 },
    { "MISSING_LIBRARY", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 63, -1, -1 },
    { "OTP_MEMORY", "LComStSt25sdkSTException_STExceptionCode;", .constantValue.asLong = 0, 0x4019, -1, 64, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_ERROR_CODE), &JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA), &JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE), &JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_NDEF_DATA), &JreEnum(ComStSt25sdkSTException_STExceptionCode, NDEF_MESSAGE_TOO_BIG), &JreEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER), &JreEnum(ComStSt25sdkSTException_STExceptionCode, TAG_CMD_CALLED_FROM_UI_THREAD), &JreEnum(ComStSt25sdkSTException_STExceptionCode, TAG_NOT_IN_THE_FIELD), &JreEnum(ComStSt25sdkSTException_STExceptionCode, CONFIG_PASSWORD_NEEDED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_BLOCK_ADDRESS), &JreEnum(ComStSt25sdkSTException_STExceptionCode, MEMORY_ALLOCATION_FAILURE), &JreEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, FILE_EMPTY), &JreEnum(ComStSt25sdkSTException_STExceptionCode, CONNECTION_ERROR), &JreEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, CRC_ERROR), &JreEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_FAILURE), &JreEnum(ComStSt25sdkSTException_STExceptionCode, BLOCK_LOCKED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_CMD_NOT_SUPPORTED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_CMD_NOT_RECOGNIZED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_CMD_OPTION_NOT_SUPPORTED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_ERROR_WITH_NO_INFORMATION), &JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_NOT_AVAILABLE), &JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_ALREADY_LOCKED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_IS_LOCKED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_PROGRAMMING_FAILED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_LOCKING_FAILED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_PROTECTED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_GENERIC_CRYPTOGRAPHIC_ERROR), &JreEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_NO_RESPONSE), &JreEnum(ComStSt25sdkSTException_STExceptionCode, INS_FIELD_NOT_SUPPORTED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, CLASS_NOT_SUPPORTED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_P1_P2), &JreEnum(ComStSt25sdkSTException_STExceptionCode, FILE_APPLICATION_NOT_SUPPORTED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CMD_PARAM), &JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA_PARAM), &JreEnum(ComStSt25sdkSTException_STExceptionCode, DATA_NOT_USABLE), &JreEnum(ComStSt25sdkSTException_STExceptionCode, WRONG_SECURITY_STATUS), &JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CMD_FOR_FILE), &JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_USE_CONTEXT), &JreEnum(ComStSt25sdkSTException_STExceptionCode, WRONG_LENGTH), &JreEnum(ComStSt25sdkSTException_STExceptionCode, UPDATE_ERROR), &JreEnum(ComStSt25sdkSTException_STExceptionCode, WRONG_PASSWORD), &JreEnum(ComStSt25sdkSTException_STExceptionCode, PASSWORD_NEEDED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, EOF), &JreEnum(ComStSt25sdkSTException_STExceptionCode, FILE_OVERFLOW), &JreEnum(ComStSt25sdkSTException_STExceptionCode, UNKNOWN_ANSWER), &JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE2_NACK), &JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE2_WRONG_ACK_NACK), &JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE2_STATIC_LOCK_INVALID_VALUES), &JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE2_STATIC_LOCK_LOCKED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_OUT_OF_SCOPE), &JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_RFU), &JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_MEMORY_ERROR), &JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_EXCESSIVE_WRITES), &JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_PROPRIETARY_ERROR_CONDITIONS), &JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_NDEF_WRITE_NOT_FINISHED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, PERMANENTLY_LOCKED), &JreEnum(ComStSt25sdkSTException_STExceptionCode, TRANSCEIVE_EVAL_MODE), &JreEnum(ComStSt25sdkSTException_STExceptionCode, IMPLEMENTED_IN_NDA_VERSION), &JreEnum(ComStSt25sdkSTException_STExceptionCode, MISSING_LIBRARY), &JreEnum(ComStSt25sdkSTException_STExceptionCode, OTP_MEMORY), "LComStSt25sdkSTException;", "Ljava/lang/Enum<Lcom/st/st25sdk/STException$STExceptionCode;>;" };
  static const J2ObjcClassInfo _ComStSt25sdkSTException_STExceptionCode = { "STExceptionCode", "com.st.st25sdk", ptrTable, methods, fields, 7, 0x4019, 2, 63, 65, -1, -1, 66, -1 };
  return &_ComStSt25sdkSTException_STExceptionCode;
}

+ (void)initialize {
  if (self == [ComStSt25sdkSTException_STExceptionCode class]) {
    JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_ERROR_CODE) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 0), 0);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 1), 1);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 2), 2);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_NDEF_DATA) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 3), 3);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, NDEF_MESSAGE_TOO_BIG) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 4), 4);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 5), 5);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, TAG_CMD_CALLED_FROM_UI_THREAD) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 6), 6);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, TAG_NOT_IN_THE_FIELD) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 7), 7);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, CONFIG_PASSWORD_NEEDED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 8), 8);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_BLOCK_ADDRESS) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 9), 9);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, MEMORY_ALLOCATION_FAILURE) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 10), 10);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 11), 11);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, FILE_EMPTY) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 12), 12);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, CONNECTION_ERROR) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 13), 13);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 14), 14);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 15), 15);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, CRC_ERROR) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 16), 16);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_FAILURE) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 17), 17);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, BLOCK_LOCKED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 18), 18);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_CMD_NOT_SUPPORTED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 19), 19);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_CMD_NOT_RECOGNIZED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 20), 20);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_CMD_OPTION_NOT_SUPPORTED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 21), 21);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_ERROR_WITH_NO_INFORMATION) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 22), 22);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_NOT_AVAILABLE) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 23), 23);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_ALREADY_LOCKED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 24), 24);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_IS_LOCKED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 25), 25);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_PROGRAMMING_FAILED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 26), 26);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_LOCKING_FAILED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 27), 27);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_BLOCK_PROTECTED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 28), 28);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, ISO15693_GENERIC_CRYPTOGRAPHIC_ERROR) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 29), 29);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, RFREADER_NO_RESPONSE) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 30), 30);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, INS_FIELD_NOT_SUPPORTED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 31), 31);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, CLASS_NOT_SUPPORTED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 32), 32);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_P1_P2) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 33), 33);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, FILE_APPLICATION_NOT_SUPPORTED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 34), 34);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CMD_PARAM) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 35), 35);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA_PARAM) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 36), 36);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, DATA_NOT_USABLE) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 37), 37);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, WRONG_SECURITY_STATUS) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 38), 38);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CMD_FOR_FILE) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 39), 39);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_USE_CONTEXT) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 40), 40);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, WRONG_LENGTH) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 41), 41);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, UPDATE_ERROR) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 42), 42);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, WRONG_PASSWORD) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 43), 43);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, PASSWORD_NEEDED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 44), 44);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, EOF) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 45), 45);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, FILE_OVERFLOW) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 46), 46);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, UNKNOWN_ANSWER) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 47), 47);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE2_NACK) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 48), 48);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE2_WRONG_ACK_NACK) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 49), 49);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE2_STATIC_LOCK_INVALID_VALUES) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 50), 50);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE2_STATIC_LOCK_LOCKED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 51), 51);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_OUT_OF_SCOPE) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 52), 52);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_RFU) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 53), 53);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_MEMORY_ERROR) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 54), 54);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_EXCESSIVE_WRITES) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 55), 55);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_ERROR_PROPRIETARY_ERROR_CONDITIONS) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 56), 56);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, NFC_TYPE3_NDEF_WRITE_NOT_FINISHED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 57), 57);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, PERMANENTLY_LOCKED) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 58), 58);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, TRANSCEIVE_EVAL_MODE) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 59), 59);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, IMPLEMENTED_IN_NDA_VERSION) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 60), 60);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, MISSING_LIBRARY) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 61), 61);
    JreEnum(ComStSt25sdkSTException_STExceptionCode, OTP_MEMORY) = new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTException_STExceptionCode_class_(), 62), 62);
    J2OBJC_SET_INITIALIZED(ComStSt25sdkSTException_STExceptionCode)
  }
}

@end

void ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(ComStSt25sdkSTException_STExceptionCode *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComStSt25sdkSTException_STExceptionCode *new_ComStSt25sdkSTException_STExceptionCode_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComStSt25sdkSTException_STExceptionCode, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComStSt25sdkSTException_STExceptionCode_values() {
  ComStSt25sdkSTException_STExceptionCode_initialize();
  return [IOSObjectArray arrayWithObjects:ComStSt25sdkSTException_STExceptionCode_values_ count:63 type:ComStSt25sdkSTException_STExceptionCode_class_()];
}

ComStSt25sdkSTException_STExceptionCode *ComStSt25sdkSTException_STExceptionCode_valueOfWithNSString_(NSString *name) {
  ComStSt25sdkSTException_STExceptionCode_initialize();
  for (int i = 0; i < 63; i++) {
    ComStSt25sdkSTException_STExceptionCode *e = ComStSt25sdkSTException_STExceptionCode_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComStSt25sdkSTException_STExceptionCode *ComStSt25sdkSTException_STExceptionCode_fromOrdinal(NSUInteger ordinal) {
  ComStSt25sdkSTException_STExceptionCode_initialize();
  if (ordinal >= 63) {
    return nil;
  }
  return ComStSt25sdkSTException_STExceptionCode_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkSTException_STExceptionCode)
