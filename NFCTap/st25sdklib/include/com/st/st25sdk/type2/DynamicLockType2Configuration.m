//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type2/DynamicLockType2Configuration.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/ControlTlv.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/type2/DynamicLockType2.h"
#include "com/st/st25sdk/type2/DynamicLockType2Configuration.h"

@implementation ComStSt25sdkType2DynamicLockType2Configuration

- (instancetype)initWithInt:(jint)t2tAreaSize {
  ComStSt25sdkType2DynamicLockType2Configuration_initWithInt_(self, t2tAreaSize);
  return self;
}

- (instancetype)initWithComStSt25sdkControlTlv:(ComStSt25sdkControlTlv *)lockControlTlv {
  ComStSt25sdkType2DynamicLockType2Configuration_initWithComStSt25sdkControlTlv_(self, lockControlTlv);
  return self;
}

- (jint)getDlaFirstByteAddress {
  return mDlaFirstByteAddress_;
}

- (jint)getDlaNbrBytesLockedPerBit {
  return mBytesLockedPerLockBit_;
}

- (jint)getDlaNbrLockBits {
  return mDlaNbrLockBits_;
}

- (jint)getDlaNbrBytes {
  return mDlaNbrBytes_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithComStSt25sdkControlTlv:);
  methods[2].selector = @selector(getDlaFirstByteAddress);
  methods[3].selector = @selector(getDlaNbrBytesLockedPerBit);
  methods[4].selector = @selector(getDlaNbrLockBits);
  methods[5].selector = @selector(getDlaNbrBytes);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mBytesLockedPerLockBit_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDlaFirstByteAddress_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDlaNbrLockBits_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDlaNbrBytes_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LComStSt25sdkSTException;", "LComStSt25sdkControlTlv;" };
  static const J2ObjcClassInfo _ComStSt25sdkType2DynamicLockType2Configuration = { "DynamicLockType2Configuration", "com.st.st25sdk.type2", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType2DynamicLockType2Configuration;
}

@end

void ComStSt25sdkType2DynamicLockType2Configuration_initWithInt_(ComStSt25sdkType2DynamicLockType2Configuration *self, jint t2tAreaSize) {
  NSObject_init(self);
  if (t2tAreaSize <= ComStSt25sdkType2DynamicLockType2_STATIC_AREA_USER_MEMORY_MAX_SIZE) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  self->mBytesLockedPerLockBit_ = 8;
  self->mDlaFirstByteAddress_ = t2tAreaSize + 16;
  self->mDlaNbrLockBits_ = (t2tAreaSize - ComStSt25sdkType2DynamicLockType2_STATIC_AREA_USER_MEMORY_MAX_SIZE) / self->mBytesLockedPerLockBit_;
  self->mDlaNbrBytes_ = ((self->mDlaNbrLockBits_ - 1) / 8) + 1;
}

ComStSt25sdkType2DynamicLockType2Configuration *new_ComStSt25sdkType2DynamicLockType2Configuration_initWithInt_(jint t2tAreaSize) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType2DynamicLockType2Configuration, initWithInt_, t2tAreaSize)
}

ComStSt25sdkType2DynamicLockType2Configuration *create_ComStSt25sdkType2DynamicLockType2Configuration_initWithInt_(jint t2tAreaSize) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType2DynamicLockType2Configuration, initWithInt_, t2tAreaSize)
}

void ComStSt25sdkType2DynamicLockType2Configuration_initWithComStSt25sdkControlTlv_(ComStSt25sdkType2DynamicLockType2Configuration *self, ComStSt25sdkControlTlv *lockControlTlv) {
  NSObject_init(self);
  if ([((ComStSt25sdkControlTlv *) nil_chk(lockControlTlv)) getTlvSize] != 5) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ([lockControlTlv getType] != ComStSt25sdkControlTlv_LOCK_CONTROL_TLV) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if ([lockControlTlv getLength] != 3) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  if (((IOSByteArray *) nil_chk([lockControlTlv getValue]))->size_ != 3) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *lockControlTlvBytes = [lockControlTlv getValue];
  jint nbrMajorOffsets = (JreRShift32((IOSByteArray_Get(nil_chk(lockControlTlvBytes), 0) & (jint) 0xF0), 4)) & (jint) 0xFF;
  jint nbrMinorOffsets = IOSByteArray_Get(lockControlTlvBytes, 0) & (jint) 0xF;
  self->mDlaNbrLockBits_ = IOSByteArray_Get(lockControlTlvBytes, 1) & (jint) 0xFF;
  if (self->mDlaNbrLockBits_ == 0) {
    self->mDlaNbrLockBits_ = 256;
  }
  jint mosDLA = IOSByteArray_Get(lockControlTlvBytes, 2) & (jint) 0xF;
  if ((mosDLA < 2) || (mosDLA > 15)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jint blplbIndex = (JreRShift32((IOSByteArray_Get(lockControlTlvBytes, 2) & (jint) 0xF0), 4)) & (jint) 0xFF;
  if ((blplbIndex < 2) || (blplbIndex > 10)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  self->mBytesLockedPerLockBit_ = (JreLShift32(1, blplbIndex));
  self->mDlaNbrBytes_ = self->mDlaNbrLockBits_ / 8;
  jint majorOffsetSize = (JreLShift32(1, mosDLA));
  self->mDlaFirstByteAddress_ = (nbrMajorOffsets * majorOffsetSize) + nbrMinorOffsets;
}

ComStSt25sdkType2DynamicLockType2Configuration *new_ComStSt25sdkType2DynamicLockType2Configuration_initWithComStSt25sdkControlTlv_(ComStSt25sdkControlTlv *lockControlTlv) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType2DynamicLockType2Configuration, initWithComStSt25sdkControlTlv_, lockControlTlv)
}

ComStSt25sdkType2DynamicLockType2Configuration *create_ComStSt25sdkType2DynamicLockType2Configuration_initWithComStSt25sdkControlTlv_(ComStSt25sdkControlTlv *lockControlTlv) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType2DynamicLockType2Configuration, initWithComStSt25sdkControlTlv_, lockControlTlv)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType2DynamicLockType2Configuration)
