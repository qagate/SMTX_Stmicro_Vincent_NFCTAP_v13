//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type2/STType2Register.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STRegister.h"
#include "com/st/st25sdk/command/Type2Command.h"
#include "com/st/st25sdk/type2/STType2Register.h"

@implementation ComStSt25sdkType2STType2Register

- (instancetype)initWithComStSt25sdkCommandType2Command:(ComStSt25sdkCommandType2Command *)type2Command
                                                withInt:(jint)blockNumber
                                           withNSString:(NSString *)registerName
                                           withNSString:(NSString *)registerContentDescription
        withComStSt25sdkSTRegister_RegisterAccessRights:(ComStSt25sdkSTRegister_RegisterAccessRights *)registerAccessRights
            withComStSt25sdkSTRegister_RegisterDataSize:(ComStSt25sdkSTRegister_RegisterDataSize *)registerDataSize {
  ComStSt25sdkType2STType2Register_initWithComStSt25sdkCommandType2Command_withInt_withNSString_withNSString_withComStSt25sdkSTRegister_RegisterAccessRights_withComStSt25sdkSTRegister_RegisterDataSize_(self, type2Command, blockNumber, registerName, registerContentDescription, registerAccessRights, registerDataSize);
  return self;
}

- (jint)readTagRegisterValue {
  IOSByteArray *response = [((ComStSt25sdkCommandType2Command *) nil_chk(mType2Command_)) readBlocksWithInt:mBlockNumber_ withInt:(jint) 0x01];
  switch ([mRegisterDataSize_ ordinal]) {
    case ComStSt25sdkSTRegister_RegisterDataSize_Enum_REGISTER_DATA_ON_32_BITS:
    if (((IOSByteArray *) nil_chk(response))->size_ == 4) {
      mRegisterValue_ = (JreLShift32(ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(response, 3)), 24)) + (JreLShift32(ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(response, 2)), 16)) + (JreLShift32(ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(response, 1)), 8)) + ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(response, 0));
    }
    else {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED), response);
    }
    break;
    default:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
  }
  mCacheInvalidated_ = false;
  return mRegisterValue_;
}

- (void)writeRegisterValueWithInt:(jint)value {
  IOSByteArray *registerValue;
  {
    jboolean allowWriteOfOtpBlocks;
    switch ([mRegisterDataSize_ ordinal]) {
      case ComStSt25sdkSTRegister_RegisterDataSize_Enum_REGISTER_DATA_ON_32_BITS:
      registerValue = ComStSt25sdkHelper_reverseByteArrayWithByteArray_(ComStSt25sdkHelper_convertIntTo4BytesHexaFormatWithInt_(value));
      allowWriteOfOtpBlocks = (mRegisterAccessRights_ == JreLoadEnum(ComStSt25sdkSTRegister_RegisterAccessRights, REGISTER_READ_WRITE_OTP));
      [((ComStSt25sdkCommandType2Command *) nil_chk(mType2Command_)) writeBlocksWithInt:mBlockNumber_ withByteArray:registerValue withBoolean:allowWriteOfOtpBlocks];
      break;
      default:
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkCommandType2Command:withInt:withNSString:withNSString:withComStSt25sdkSTRegister_RegisterAccessRights:withComStSt25sdkSTRegister_RegisterDataSize:);
  methods[1].selector = @selector(readTagRegisterValue);
  methods[2].selector = @selector(writeRegisterValueWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mType2Command_", "LComStSt25sdkCommandType2Command;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mBlockNumber_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkCommandType2Command;ILNSString;LNSString;LComStSt25sdkSTRegister_RegisterAccessRights;LComStSt25sdkSTRegister_RegisterDataSize;", "LComStSt25sdkSTException;", "writeRegisterValue", "I" };
  static const J2ObjcClassInfo _ComStSt25sdkType2STType2Register = { "STType2Register", "com.st.st25sdk.type2", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType2STType2Register;
}

@end

void ComStSt25sdkType2STType2Register_initWithComStSt25sdkCommandType2Command_withInt_withNSString_withNSString_withComStSt25sdkSTRegister_RegisterAccessRights_withComStSt25sdkSTRegister_RegisterDataSize_(ComStSt25sdkType2STType2Register *self, ComStSt25sdkCommandType2Command *type2Command, jint blockNumber, NSString *registerName, NSString *registerContentDescription, ComStSt25sdkSTRegister_RegisterAccessRights *registerAccessRights, ComStSt25sdkSTRegister_RegisterDataSize *registerDataSize) {
  ComStSt25sdkSTRegister_initWithInt_withNSString_withNSString_withComStSt25sdkSTRegister_RegisterAccessRights_withComStSt25sdkSTRegister_RegisterDataSize_(self, blockNumber, registerName, registerContentDescription, registerAccessRights, registerDataSize);
  self->mType2Command_ = type2Command;
  self->mBlockNumber_ = blockNumber;
}

ComStSt25sdkType2STType2Register *new_ComStSt25sdkType2STType2Register_initWithComStSt25sdkCommandType2Command_withInt_withNSString_withNSString_withComStSt25sdkSTRegister_RegisterAccessRights_withComStSt25sdkSTRegister_RegisterDataSize_(ComStSt25sdkCommandType2Command *type2Command, jint blockNumber, NSString *registerName, NSString *registerContentDescription, ComStSt25sdkSTRegister_RegisterAccessRights *registerAccessRights, ComStSt25sdkSTRegister_RegisterDataSize *registerDataSize) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType2STType2Register, initWithComStSt25sdkCommandType2Command_withInt_withNSString_withNSString_withComStSt25sdkSTRegister_RegisterAccessRights_withComStSt25sdkSTRegister_RegisterDataSize_, type2Command, blockNumber, registerName, registerContentDescription, registerAccessRights, registerDataSize)
}

ComStSt25sdkType2STType2Register *create_ComStSt25sdkType2STType2Register_initWithComStSt25sdkCommandType2Command_withInt_withNSString_withNSString_withComStSt25sdkSTRegister_RegisterAccessRights_withComStSt25sdkSTRegister_RegisterDataSize_(ComStSt25sdkCommandType2Command *type2Command, jint blockNumber, NSString *registerName, NSString *registerContentDescription, ComStSt25sdkSTRegister_RegisterAccessRights *registerAccessRights, ComStSt25sdkSTRegister_RegisterDataSize *registerDataSize) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType2STType2Register, initWithComStSt25sdkCommandType2Command_withInt_withNSString_withNSString_withComStSt25sdkSTRegister_RegisterAccessRights_withComStSt25sdkSTRegister_RegisterDataSize_, type2Command, blockNumber, registerName, registerContentDescription, registerAccessRights, registerDataSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType2STType2Register)
