//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type2/DynamicLockType2.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/type2/DynamicLockType2.h"
#include "com/st/st25sdk/type2/DynamicLockType2Configuration.h"

@implementation ComStSt25sdkType2DynamicLockType2

+ (jbyte)STATIC_AREA_MAX_SIZE {
  return ComStSt25sdkType2DynamicLockType2_STATIC_AREA_MAX_SIZE;
}

+ (jbyte)STATIC_AREA_USER_MEMORY_MAX_SIZE {
  return ComStSt25sdkType2DynamicLockType2_STATIC_AREA_USER_MEMORY_MAX_SIZE;
}

+ (jbyte)FIRST_MEM_ADD_MANAGED_BY_DYNAMIC_LOCK {
  return ComStSt25sdkType2DynamicLockType2_FIRST_MEM_ADD_MANAGED_BY_DYNAMIC_LOCK;
}

- (instancetype)initWithComStSt25sdkType2DynamicLockType2Configuration:(ComStSt25sdkType2DynamicLockType2Configuration *)dynamicLockConfig
                                                         withByteArray:(IOSByteArray *)lockAreaBuffer {
  ComStSt25sdkType2DynamicLockType2_initWithComStSt25sdkType2DynamicLockType2Configuration_withByteArray_(self, dynamicLockConfig, lockAreaBuffer);
  return self;
}

- (IOSByteArray *)getDynamicLockBitArray {
  if (mDlaBuffer_ == nil || mDlaBuffer_->size_ != [((ComStSt25sdkType2DynamicLockType2Configuration *) nil_chk(mDynamicLockConfig_)) getDlaNbrBytes]) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  IOSByteArray *dynamicLockBits = [IOSByteArray newArrayWithLength:[((ComStSt25sdkType2DynamicLockType2Configuration *) nil_chk(mDynamicLockConfig_)) getDlaNbrLockBits]];
  for (jint bitNumber = 0; bitNumber < [((ComStSt25sdkType2DynamicLockType2Configuration *) nil_chk(mDynamicLockConfig_)) getDlaNbrLockBits]; bitNumber++) {
    *IOSByteArray_GetRef(dynamicLockBits, bitNumber) = (jbyte) (JreRShift32(((IOSByteArray_Get(nil_chk(mDlaBuffer_), bitNumber / 8) & (jint) 0xFF) & (JreLShift32(1, (bitNumber % 8)))), (bitNumber % 8)));
  }
  return dynamicLockBits;
}

- (jbyte)getDynamicLockBitForMemoryAddressWithInt:(jint)memoryAddress {
  IOSByteArray *dynamicLockBits;
  jint bitNumber;
  if (memoryAddress < ComStSt25sdkType2DynamicLockType2_FIRST_MEM_ADD_MANAGED_BY_DYNAMIC_LOCK) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  dynamicLockBits = [self getDynamicLockBitArray];
  bitNumber = [self getLockBitNumberForMemoryAddressWithInt:memoryAddress];
  return IOSByteArray_Get(nil_chk(dynamicLockBits), bitNumber);
}

- (jboolean)isMemoryAddressLockedWithInt:(jint)memoryAddress {
  return [self getDynamicLockBitForMemoryAddressWithInt:memoryAddress] == 1;
}

- (IOSByteArray *)setDynamicLockBitWithInt:(jint)memoryAddress {
  if (memoryAddress < ComStSt25sdkType2DynamicLockType2_FIRST_MEM_ADD_MANAGED_BY_DYNAMIC_LOCK) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  jint bitNumber = [self getLockBitNumberForMemoryAddressWithInt:memoryAddress];
  *IOSByteArray_GetRef(nil_chk(mDlaBuffer_), bitNumber / 8) |= (JreLShift32(1, (bitNumber % 8)));
  return mDlaBuffer_;
}

- (IOSByteArray *)setAllDynamicLockBits {
  if (mDlaBuffer_ == nil || mDlaBuffer_->size_ != [((ComStSt25sdkType2DynamicLockType2Configuration *) nil_chk(mDynamicLockConfig_)) getDlaNbrBytes]) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  for (jint bitNumber = 0; bitNumber < [((ComStSt25sdkType2DynamicLockType2Configuration *) nil_chk(mDynamicLockConfig_)) getDlaNbrLockBits]; bitNumber++) {
    *IOSByteArray_GetRef(nil_chk(mDlaBuffer_), bitNumber / 8) |= (JreLShift32(1, (bitNumber % 8)));
  }
  return mDlaBuffer_;
}

- (jboolean)areAllDynamicLockBitsSet {
  if (mDlaBuffer_ == nil || mDlaBuffer_->size_ != [((ComStSt25sdkType2DynamicLockType2Configuration *) nil_chk(mDynamicLockConfig_)) getDlaNbrBytes]) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  for (jint bitNumber = 0; bitNumber < [((ComStSt25sdkType2DynamicLockType2Configuration *) nil_chk(mDynamicLockConfig_)) getDlaNbrLockBits]; bitNumber++) {
    if (((IOSByteArray_Get(nil_chk(mDlaBuffer_), bitNumber / 8) & (jint) 0xFF) & (JreLShift32(1, (bitNumber % 8)))) == (JreLShift32(1, (bitNumber % 8)))) return false;
  }
  return true;
}

- (jint)getLockBitNumberForMemoryAddressWithInt:(jint)memoryAddress {
  if (memoryAddress < ComStSt25sdkType2DynamicLockType2_FIRST_MEM_ADD_MANAGED_BY_DYNAMIC_LOCK) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  for (jint bitNumber = 0; bitNumber < [((ComStSt25sdkType2DynamicLockType2Configuration *) nil_chk(mDynamicLockConfig_)) getDlaNbrLockBits]; bitNumber++) {
    if (memoryAddress >= [self getStartAddressRangeForLockBitWithInt:bitNumber] && memoryAddress <= [self getEndAddressRangeForLockBitWithInt:bitNumber]) {
      return bitNumber;
    }
  }
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
}

- (jint)getStartAddressRangeForLockBitWithInt:(jint)lockBitNumber {
  return (ComStSt25sdkType2DynamicLockType2_FIRST_MEM_ADD_MANAGED_BY_DYNAMIC_LOCK + lockBitNumber * ([((ComStSt25sdkType2DynamicLockType2Configuration *) nil_chk(mDynamicLockConfig_)) getDlaNbrBytesLockedPerBit]));
}

- (jint)getEndAddressRangeForLockBitWithInt:(jint)lockBitNumber {
  return ([self getStartAddressRangeForLockBitWithInt:lockBitNumber] + [((ComStSt25sdkType2DynamicLockType2Configuration *) nil_chk(mDynamicLockConfig_)) getDlaNbrBytesLockedPerBit] - 1);
}

- (void)setDlaBufferWithByteArray:(IOSByteArray *)buffer {
  mDlaBuffer_ = buffer;
}

- (IOSByteArray *)getDlaBuffer {
  return mDlaBuffer_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 3, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 3, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkType2DynamicLockType2Configuration:withByteArray:);
  methods[1].selector = @selector(getDynamicLockBitArray);
  methods[2].selector = @selector(getDynamicLockBitForMemoryAddressWithInt:);
  methods[3].selector = @selector(isMemoryAddressLockedWithInt:);
  methods[4].selector = @selector(setDynamicLockBitWithInt:);
  methods[5].selector = @selector(setAllDynamicLockBits);
  methods[6].selector = @selector(areAllDynamicLockBitsSet);
  methods[7].selector = @selector(getLockBitNumberForMemoryAddressWithInt:);
  methods[8].selector = @selector(getStartAddressRangeForLockBitWithInt:);
  methods[9].selector = @selector(getEndAddressRangeForLockBitWithInt:);
  methods[10].selector = @selector(setDlaBufferWithByteArray:);
  methods[11].selector = @selector(getDlaBuffer);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mDynamicLockConfig_", "LComStSt25sdkType2DynamicLockType2Configuration;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDlaBuffer_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "STATIC_AREA_MAX_SIZE", "B", .constantValue.asChar = ComStSt25sdkType2DynamicLockType2_STATIC_AREA_MAX_SIZE, 0x19, -1, -1, -1, -1 },
    { "STATIC_AREA_USER_MEMORY_MAX_SIZE", "B", .constantValue.asChar = ComStSt25sdkType2DynamicLockType2_STATIC_AREA_USER_MEMORY_MAX_SIZE, 0x19, -1, -1, -1, -1 },
    { "FIRST_MEM_ADD_MANAGED_BY_DYNAMIC_LOCK", "B", .constantValue.asChar = ComStSt25sdkType2DynamicLockType2_FIRST_MEM_ADD_MANAGED_BY_DYNAMIC_LOCK, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkType2DynamicLockType2Configuration;[B", "LComStSt25sdkSTException;", "getDynamicLockBitForMemoryAddress", "I", "isMemoryAddressLocked", "setDynamicLockBit", "getLockBitNumberForMemoryAddress", "getStartAddressRangeForLockBit", "getEndAddressRangeForLockBit", "setDlaBuffer", "[B" };
  static const J2ObjcClassInfo _ComStSt25sdkType2DynamicLockType2 = { "DynamicLockType2", "com.st.st25sdk.type2", ptrTable, methods, fields, 7, 0x1, 12, 5, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType2DynamicLockType2;
}

@end

void ComStSt25sdkType2DynamicLockType2_initWithComStSt25sdkType2DynamicLockType2Configuration_withByteArray_(ComStSt25sdkType2DynamicLockType2 *self, ComStSt25sdkType2DynamicLockType2Configuration *dynamicLockConfig, IOSByteArray *lockAreaBuffer) {
  NSObject_init(self);
  self->mDynamicLockConfig_ = dynamicLockConfig;
  self->mDlaBuffer_ = lockAreaBuffer;
}

ComStSt25sdkType2DynamicLockType2 *new_ComStSt25sdkType2DynamicLockType2_initWithComStSt25sdkType2DynamicLockType2Configuration_withByteArray_(ComStSt25sdkType2DynamicLockType2Configuration *dynamicLockConfig, IOSByteArray *lockAreaBuffer) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType2DynamicLockType2, initWithComStSt25sdkType2DynamicLockType2Configuration_withByteArray_, dynamicLockConfig, lockAreaBuffer)
}

ComStSt25sdkType2DynamicLockType2 *create_ComStSt25sdkType2DynamicLockType2_initWithComStSt25sdkType2DynamicLockType2Configuration_withByteArray_(ComStSt25sdkType2DynamicLockType2Configuration *dynamicLockConfig, IOSByteArray *lockAreaBuffer) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType2DynamicLockType2, initWithComStSt25sdkType2DynamicLockType2Configuration_withByteArray_, dynamicLockConfig, lockAreaBuffer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType2DynamicLockType2)
