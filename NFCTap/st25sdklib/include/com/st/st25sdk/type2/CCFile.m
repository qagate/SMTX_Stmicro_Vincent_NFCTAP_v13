//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type2/CCFile.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/type2/CCFile.h"

@interface ComStSt25sdkType2CCFile ()

- (void)checkCache;

@end

__attribute__((unused)) static void ComStSt25sdkType2CCFile_checkCache(ComStSt25sdkType2CCFile *self);

@implementation ComStSt25sdkType2CCFile

+ (jbyte)CCFILE_SHORT_IDENTIFIER {
  return ComStSt25sdkType2CCFile_CCFILE_SHORT_IDENTIFIER;
}

+ (jint)CCFILE_DATA_AREA_SIZE_MULTIPLIER {
  return ComStSt25sdkType2CCFile_CCFILE_DATA_AREA_SIZE_MULTIPLIER;
}

- (IOSByteArray *)read {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)write {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)writeWithByteArray:(IOSByteArray *)buffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initEmptyCCFileWithInt:(jint)memSizeInBytes {
  mCCLength_ = 4;
  mMagicNumber_ = ComStSt25sdkType2CCFile_CCFILE_SHORT_IDENTIFIER;
  mMappingVersion_ = (jbyte) (jint) 0x10;
  mT2tAreaSize_ = (jbyte) (memSizeInBytes / ComStSt25sdkType2CCFile_CCFILE_DATA_AREA_SIZE_MULTIPLIER);
  mReadAccess_ = (jint) 0x00;
  mWriteAccess_ = (jint) 0x00;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComStSt25sdkType2CCFile_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getCCLength {
  ComStSt25sdkType2CCFile_checkCache(self);
  return mCCLength_;
}

- (jbyte)getMagicNumber {
  ComStSt25sdkType2CCFile_checkCache(self);
  return mMagicNumber_;
}

- (jbyte)getCCMappingVersion {
  ComStSt25sdkType2CCFile_checkCache(self);
  return mMappingVersion_;
}

- (jint)getT2TAreaSize {
  ComStSt25sdkType2CCFile_checkCache(self);
  return mT2tAreaSize_;
}

- (jbyte)getCCReadAccess {
  ComStSt25sdkType2CCFile_checkCache(self);
  return mReadAccess_;
}

- (jbyte)getCCWriteAccess {
  ComStSt25sdkType2CCFile_checkCache(self);
  return mWriteAccess_;
}

- (void)invalidateCache {
  mCacheInvalidated_ = true;
}

- (void)validateCache {
  mCacheInvalidated_ = false;
}

- (void)activateCache {
  mCacheActivated_ = true;
  mCacheInvalidated_ = true;
}

- (void)deactivateCache {
  mCacheActivated_ = false;
}

- (void)updateCache {
  if ([self isCacheActivated]) {
    [self invalidateCache];
    IOSByteArray *buffer = [self read];
    [self parseCCFileWithByteArray:buffer];
    mCacheInvalidated_ = false;
  }
}

- (jboolean)isCacheValid {
  return !mCacheInvalidated_;
}

- (jboolean)isCacheActivated {
  return mCacheActivated_;
}

- (void)parseCCFileWithByteArray:(IOSByteArray *)buffer {
  if (((IOSByteArray *) nil_chk(buffer))->size_ != 4) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE));
  }
  mCCLength_ = buffer->size_;
  mT2tAreaSize_ = ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(buffer, 2)) * ComStSt25sdkType2CCFile_CCFILE_DATA_AREA_SIZE_MULTIPLIER;
  mMagicNumber_ = IOSByteArray_Get(buffer, 0);
  mMappingVersion_ = IOSByteArray_Get(buffer, 1);
  mReadAccess_ = (jbyte) (IOSByteArray_Get(buffer, 3) & (jint) 0xF0);
  mWriteAccess_ = (jbyte) (IOSByteArray_Get(buffer, 3) & (jint) 0x0F);
}

- (IOSByteArray *)rebuildBuffer {
  if (mCCLength_ != 4) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE));
  }
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:mCCLength_];
  *IOSByteArray_GetRef(buffer, 0) = mMagicNumber_;
  *IOSByteArray_GetRef(buffer, 1) = mMappingVersion_;
  *IOSByteArray_GetRef(buffer, 2) = (jbyte) (mT2tAreaSize_ / ComStSt25sdkType2CCFile_CCFILE_DATA_AREA_SIZE_MULTIPLIER);
  *IOSByteArray_GetRef(buffer, 3) = (jbyte) (mReadAccess_ | mWriteAccess_);
  return buffer;
}

- (void)checkCache {
  ComStSt25sdkType2CCFile_checkCache(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[B", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 1, 2, 0, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, 0, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(read);
  methods[1].selector = @selector(write);
  methods[2].selector = @selector(writeWithByteArray:);
  methods[3].selector = @selector(initEmptyCCFileWithInt:);
  methods[4].selector = @selector(init);
  methods[5].selector = @selector(getCCLength);
  methods[6].selector = @selector(getMagicNumber);
  methods[7].selector = @selector(getCCMappingVersion);
  methods[8].selector = @selector(getT2TAreaSize);
  methods[9].selector = @selector(getCCReadAccess);
  methods[10].selector = @selector(getCCWriteAccess);
  methods[11].selector = @selector(invalidateCache);
  methods[12].selector = @selector(validateCache);
  methods[13].selector = @selector(activateCache);
  methods[14].selector = @selector(deactivateCache);
  methods[15].selector = @selector(updateCache);
  methods[16].selector = @selector(isCacheValid);
  methods[17].selector = @selector(isCacheActivated);
  methods[18].selector = @selector(parseCCFileWithByteArray:);
  methods[19].selector = @selector(rebuildBuffer);
  methods[20].selector = @selector(checkCache);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mCCLength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mMagicNumber_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mMappingVersion_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mT2tAreaSize_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mReadAccess_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mWriteAccess_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mBlockSize_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mCacheActivated_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mCacheInvalidated_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "CCFILE_SHORT_IDENTIFIER", "B", .constantValue.asChar = ComStSt25sdkType2CCFile_CCFILE_SHORT_IDENTIFIER, 0x19, -1, -1, -1, -1 },
    { "CCFILE_DATA_AREA_SIZE_MULTIPLIER", "I", .constantValue.asInt = ComStSt25sdkType2CCFile_CCFILE_DATA_AREA_SIZE_MULTIPLIER, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkSTException;", "write", "[B", "initEmptyCCFile", "I", "parseCCFile" };
  static const J2ObjcClassInfo _ComStSt25sdkType2CCFile = { "CCFile", "com.st.st25sdk.type2", ptrTable, methods, fields, 7, 0x401, 21, 11, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType2CCFile;
}

@end

void ComStSt25sdkType2CCFile_init(ComStSt25sdkType2CCFile *self) {
  NSObject_init(self);
  self->mCacheActivated_ = true;
  self->mCacheInvalidated_ = true;
}

void ComStSt25sdkType2CCFile_checkCache(ComStSt25sdkType2CCFile *self) {
  if (![self isCacheActivated]) {
    IOSByteArray *buffer = [self read];
    [self parseCCFileWithByteArray:buffer];
  }
  else if (![self isCacheValid]) {
    [self updateCache];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType2CCFile)
