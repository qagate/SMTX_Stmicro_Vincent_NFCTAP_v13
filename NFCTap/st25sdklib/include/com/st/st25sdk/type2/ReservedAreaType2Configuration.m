//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type2/ReservedAreaType2Configuration.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/ControlTlv.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/type2/ReservedAreaType2Configuration.h"

@implementation ComStSt25sdkType2ReservedAreaType2Configuration

- (instancetype)initWithComStSt25sdkControlTlv:(ComStSt25sdkControlTlv *)memoryControlTlv {
  ComStSt25sdkType2ReservedAreaType2Configuration_initWithComStSt25sdkControlTlv_(self, memoryControlTlv);
  return self;
}

- (jint)getRaFirstByteAddress {
  return mRaFirstByteAddress_;
}

- (jint)getRaSize {
  return mRaSize_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkControlTlv:);
  methods[1].selector = @selector(getRaFirstByteAddress);
  methods[2].selector = @selector(getRaSize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mRaFirstByteAddress_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRaSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkControlTlv;", "LComStSt25sdkSTException;" };
  static const J2ObjcClassInfo _ComStSt25sdkType2ReservedAreaType2Configuration = { "ReservedAreaType2Configuration", "com.st.st25sdk.type2", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType2ReservedAreaType2Configuration;
}

@end

void ComStSt25sdkType2ReservedAreaType2Configuration_initWithComStSt25sdkControlTlv_(ComStSt25sdkType2ReservedAreaType2Configuration *self, ComStSt25sdkControlTlv *memoryControlTlv) {
  NSObject_init(self);
  if ([((ComStSt25sdkControlTlv *) nil_chk(memoryControlTlv)) getTlvSize] != 5) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  if ([memoryControlTlv getType] != ComStSt25sdkControlTlv_MEMORY_CONTROL_TLV) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  if ([memoryControlTlv getLength] != 3) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  if (((IOSByteArray *) nil_chk([memoryControlTlv getValue]))->size_ != 3) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  IOSByteArray *memoryControlTlvBytes = [memoryControlTlv getValue];
  jint nbrMajorOffsets = (JreRShift32((IOSByteArray_Get(nil_chk(memoryControlTlvBytes), 0) & (jint) 0xF0), 4)) & (jint) 0xFF;
  jint nbrMinorOffsets = IOSByteArray_Get(memoryControlTlvBytes, 0) & (jint) 0xF;
  jint mos = IOSByteArray_Get(memoryControlTlvBytes, 2) & (jint) 0xF;
  if ((mos < 2) || (mos > 15)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  jint majorOffsetSize = (JreLShift32(1, mos));
  self->mRaFirstByteAddress_ = (nbrMajorOffsets * majorOffsetSize) + nbrMinorOffsets;
  self->mRaSize_ = IOSByteArray_Get(memoryControlTlvBytes, 1) & (jint) 0xFF;
  if (self->mRaSize_ == 0) {
    self->mRaSize_ = 256;
  }
}

ComStSt25sdkType2ReservedAreaType2Configuration *new_ComStSt25sdkType2ReservedAreaType2Configuration_initWithComStSt25sdkControlTlv_(ComStSt25sdkControlTlv *memoryControlTlv) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType2ReservedAreaType2Configuration, initWithComStSt25sdkControlTlv_, memoryControlTlv)
}

ComStSt25sdkType2ReservedAreaType2Configuration *create_ComStSt25sdkType2ReservedAreaType2Configuration_initWithComStSt25sdkControlTlv_(ComStSt25sdkControlTlv *memoryControlTlv) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType2ReservedAreaType2Configuration, initWithComStSt25sdkControlTlv_, memoryControlTlv)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType2ReservedAreaType2Configuration)
