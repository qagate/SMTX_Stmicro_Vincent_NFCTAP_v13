//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type2/CCFileType2.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/command/Type2Command.h"
#include "com/st/st25sdk/type2/CCFile.h"
#include "com/st/st25sdk/type2/CCFileType2.h"
#include "java/nio/ByteBuffer.h"

@implementation ComStSt25sdkType2CCFileType2

- (instancetype)initWithComStSt25sdkCommandType2Command:(ComStSt25sdkCommandType2Command *)type2Command {
  ComStSt25sdkType2CCFileType2_initWithComStSt25sdkCommandType2Command_(self, type2Command);
  return self;
}

- (IOSByteArray *)read {
  if (!mCacheActivated_ || mCacheInvalidated_) {
    IOSByteArray *readResponse;
    readResponse = [((ComStSt25sdkCommandType2Command *) nil_chk(mType2Command_)) readBlocksWithInt:(jint) 0x03 withInt:(jint) 0x01];
    if (IOSByteArray_Get(nil_chk(readResponse), 0) == ComStSt25sdkType2CCFile_CCFILE_SHORT_IDENTIFIER) {
      mCCLength_ = 4;
    }
    else {
      @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_withByteArray_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_CCFILE), readResponse);
    }
    JavaNioByteBuffer *ccFileContent = JavaNioByteBuffer_allocateWithInt_(mCCLength_);
    mBlockSize_ = 4;
    (void) [((JavaNioByteBuffer *) nil_chk(ccFileContent)) putWithByteArray:readResponse withInt:0 withInt:mBlockSize_];
    [self parseCCFileWithByteArray:[ccFileContent array]];
    return [ccFileContent array];
  }
  return [self rebuildBuffer];
}

- (void)write {
  [((ComStSt25sdkCommandType2Command *) nil_chk(mType2Command_)) writeBlocksWithInt:3 withByteArray:[self rebuildBuffer] withBoolean:true];
}

- (void)writeWithByteArray:(IOSByteArray *)newCCFile {
  if ((((IOSByteArray *) nil_chk(newCCFile))->size_ != 4) || (IOSByteArray_Get(newCCFile, 0) != ComStSt25sdkType2CCFile_CCFILE_SHORT_IDENTIFIER)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  IOSByteArray *currentCCFile = [self rebuildBuffer];
  *IOSByteArray_GetRef(newCCFile, 0) |= IOSByteArray_Get(nil_chk(currentCCFile), 0);
  *IOSByteArray_GetRef(newCCFile, 1) |= IOSByteArray_Get(currentCCFile, 1);
  *IOSByteArray_GetRef(newCCFile, 2) |= IOSByteArray_Get(currentCCFile, 2);
  *IOSByteArray_GetRef(newCCFile, 3) |= IOSByteArray_Get(currentCCFile, 3);
  [self parseCCFileWithByteArray:newCCFile];
  [self write];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkCommandType2Command:);
  methods[1].selector = @selector(read);
  methods[2].selector = @selector(write);
  methods[3].selector = @selector(writeWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mType2Command_", "LComStSt25sdkCommandType2Command;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkCommandType2Command;", "LComStSt25sdkSTException;", "write", "[B" };
  static const J2ObjcClassInfo _ComStSt25sdkType2CCFileType2 = { "CCFileType2", "com.st.st25sdk.type2", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType2CCFileType2;
}

@end

void ComStSt25sdkType2CCFileType2_initWithComStSt25sdkCommandType2Command_(ComStSt25sdkType2CCFileType2 *self, ComStSt25sdkCommandType2Command *type2Command) {
  ComStSt25sdkType2CCFile_init(self);
  self->mType2Command_ = type2Command;
}

ComStSt25sdkType2CCFileType2 *new_ComStSt25sdkType2CCFileType2_initWithComStSt25sdkCommandType2Command_(ComStSt25sdkCommandType2Command *type2Command) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType2CCFileType2, initWithComStSt25sdkCommandType2Command_, type2Command)
}

ComStSt25sdkType2CCFileType2 *create_ComStSt25sdkType2CCFileType2_initWithComStSt25sdkCommandType2Command_(ComStSt25sdkCommandType2Command *type2Command) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType2CCFileType2, initWithComStSt25sdkCommandType2Command_, type2Command)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType2CCFileType2)
