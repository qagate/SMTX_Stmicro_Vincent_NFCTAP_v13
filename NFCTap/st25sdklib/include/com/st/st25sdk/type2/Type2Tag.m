//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type2/Type2Tag.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/ControlTlv.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/NFCTag.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/TagCache.h"
#include "com/st/st25sdk/command/NdefType2Command.h"
#include "com/st/st25sdk/command/Type2Command.h"
#include "com/st/st25sdk/command/Type2CustomCommand.h"
#include "com/st/st25sdk/ndef/NDEFMsg.h"
#include "com/st/st25sdk/type2/CCFileType2.h"
#include "com/st/st25sdk/type2/DynamicLockType2Configuration.h"
#include "com/st/st25sdk/type2/ReservedAreaType2Configuration.h"
#include "com/st/st25sdk/type2/Type2Tag.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@interface ComStSt25sdkType2Type2Tag ()

- (void)addAreaToSkipWithJavaUtilList:(id<JavaUtilList>)myList
                              withInt:(jint)offsetInBytes
                              withInt:(jint)sizeInBytes;

- (void)computeDynamicLockAreaLocation;

@end

__attribute__((unused)) static void ComStSt25sdkType2Type2Tag_addAreaToSkipWithJavaUtilList_withInt_withInt_(ComStSt25sdkType2Type2Tag *self, id<JavaUtilList> myList, jint offsetInBytes, jint sizeInBytes);

__attribute__((unused)) static void ComStSt25sdkType2Type2Tag_computeDynamicLockAreaLocation(ComStSt25sdkType2Type2Tag *self);

__attribute__((unused)) static void ComStSt25sdkType2Type2Tag_Type2FileType_initWithNSString_withInt_(ComStSt25sdkType2Type2Tag_Type2FileType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComStSt25sdkType2Type2Tag_Type2FileType *new_ComStSt25sdkType2Type2Tag_Type2FileType_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation ComStSt25sdkType2Type2Tag

+ (jint)T2T_MEMORY_HEADER_NUMBER_OF_BYTES {
  return ComStSt25sdkType2Type2Tag_T2T_MEMORY_HEADER_NUMBER_OF_BYTES;
}

+ (jbyte)T2T_AREA_FIRST_BYTE_ADDRESS {
  return ComStSt25sdkType2Type2Tag_T2T_AREA_FIRST_BYTE_ADDRESS;
}

+ (jint)TYPE2_STATLOCK_BLOCK_ADDRESS {
  return ComStSt25sdkType2Type2Tag_TYPE2_STATLOCK_BLOCK_ADDRESS;
}

+ (jint)TYPE2_CCFILE_BLOCK_ADDRESS {
  return ComStSt25sdkType2Type2Tag_TYPE2_CCFILE_BLOCK_ADDRESS;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)readerInterface
                                        withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkType2Type2Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  return self;
}

- (ComStSt25sdkCommandType2Command *)getType2Command {
  return mType2Cmd_;
}

- (jint)getBlockSizeInBytes {
  return [((ComStSt25sdkCommandType2CustomCommand *) nil_chk(mType2Cmd_)) getBlockSize];
}

- (id<JavaUtilList>)getOtpBlocksList {
  return mOtpBlocksList_;
}

- (void)computeT2TAreaSizeInBytes {
  mT2TAreaSizeInBytes_ = [((ComStSt25sdkType2CCFileType2 *) nil_chk(mCCFile_)) getT2TAreaSize];
}

- (void)computeTlvsAreaSizeInBytes {
  id<JavaUtilList> tlvList = [self parseMemoryForTlv];
  if ((tlvList == nil) || [((id<JavaUtilList>) nil_chk(tlvList)) isEmpty]) {
    mTlvsAreaSizeInBytes_ = mT2TAreaSizeInBytes_;
    return;
  }
  mTlvsAreaSizeInBytes_ = mT2TAreaSizeInBytes_;
  id<JavaUtilList> areasToSkip = [self computeLockControlAndReservedAreaWithJavaUtilList:tlvList];
  for (IOSIntArray * __strong areaToSkip in nil_chk(areasToSkip)) {
    mTlvsAreaSizeInBytes_ -= IOSIntArray_Get(nil_chk(areaToSkip), 1);
  }
  if (mTlvsAreaSizeInBytes_ < 0) {
    ComStSt25sdkSTLog_eWithNSString_(@"Invalid TLVs leading to negative TLVs_Area size!");
    mTlvsAreaSizeInBytes_ = 0;
  }
}

- (jint)getReadDataSizeInBytes {
  return [((ComStSt25sdkCommandType2CustomCommand *) nil_chk(mType2Cmd_)) getReadDataSize];
}

- (jint)getWriteDataSizeInBytes {
  return [((ComStSt25sdkCommandType2CustomCommand *) nil_chk(mType2Cmd_)) getWriteDataSize];
}

- (IOSByteArray *)readCCFile {
  return [((ComStSt25sdkType2CCFileType2 *) nil_chk(mCCFile_)) read];
}

- (void)writeCCFile {
  [((ComStSt25sdkType2CCFileType2 *) nil_chk(mCCFile_)) write];
}

- (void)writeCCFileWithByteArray:(IOSByteArray *)buffer {
  [((ComStSt25sdkType2CCFileType2 *) nil_chk(mCCFile_)) writeWithByteArray:buffer];
}

- (void)initEmptyCCFile {
  jint memSize = [self getMemSizeInBytes];
  [((ComStSt25sdkType2CCFileType2 *) nil_chk(mCCFile_)) initEmptyCCFileWithInt:memSize];
}

- (jint)getCCFileLength {
  return [((ComStSt25sdkType2CCFileType2 *) nil_chk(mCCFile_)) getCCLength];
}

- (jbyte)getCCMagicNumber {
  return [((ComStSt25sdkType2CCFileType2 *) nil_chk(mCCFile_)) getMagicNumber];
}

- (jbyte)getCCMappingVersion {
  return [((ComStSt25sdkType2CCFileType2 *) nil_chk(mCCFile_)) getCCMappingVersion];
}

- (jint)getMemSizeInBytes {
  return ([self getCCMemorySize] + ComStSt25sdkType2Type2Tag_T2T_MEMORY_HEADER_NUMBER_OF_BYTES);
}

- (jint)getCCMemorySize {
  return [((ComStSt25sdkType2CCFileType2 *) nil_chk(mCCFile_)) getT2TAreaSize];
}

- (jbyte)getCCReadAccess {
  return [((ComStSt25sdkType2CCFileType2 *) nil_chk(mCCFile_)) getCCReadAccess];
}

- (jbyte)getCCWriteAccess {
  return [((ComStSt25sdkType2CCFileType2 *) nil_chk(mCCFile_)) getCCWriteAccess];
}

- (IOSByteArray *)readWithByte:(jbyte)blockNumber {
  return [((ComStSt25sdkCommandType2CustomCommand *) nil_chk(mType2Cmd_)) readWithByte:blockNumber];
}

- (IOSByteArray *)writeWithByte:(jbyte)blockNumber
                  withByteArray:(IOSByteArray *)data {
  return [self writeWithByte:blockNumber withByteArray:data withBoolean:false];
}

- (IOSByteArray *)writeWithByte:(jbyte)blockNumber
                  withByteArray:(IOSByteArray *)data
                    withBoolean:(jboolean)allowWriteOfOtpBlocks {
  return [((ComStSt25sdkCommandType2CustomCommand *) nil_chk(mType2Cmd_)) writeWithByte:blockNumber withByteArray:data withBoolean:allowWriteOfOtpBlocks];
}

- (IOSByteArray *)sectorSelectCmdPacket1 {
  return [((ComStSt25sdkCommandType2CustomCommand *) nil_chk(mType2Cmd_)) sectorSelectCmdPacket1];
}

- (IOSByteArray *)sectorSelectCmdPacket2WithByte:(jbyte)sectorNumber {
  return [((ComStSt25sdkCommandType2CustomCommand *) nil_chk(mType2Cmd_)) sectorSelectCmdPacket2WithByte:sectorNumber];
}

- (IOSByteArray *)sectorSelectWithByte:(jbyte)sectorNumber {
  return [((ComStSt25sdkCommandType2CustomCommand *) nil_chk(mType2Cmd_)) sectorSelectWithByte:sectorNumber];
}

- (void)invalidateCache {
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) invalidateCache];
}

- (void)validateCache {
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) validateCache];
}

- (void)activateCache {
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) activateCache];
}

- (void)deactivateCache {
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) deactivateCache];
}

- (void)updateCache {
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) updateCache];
}

- (jboolean)isCacheValid {
  return [((ComStSt25sdkTagCache *) nil_chk(mCache_)) isCacheValid];
}

- (jboolean)isCacheActivated {
  return [((ComStSt25sdkTagCache *) nil_chk(mCache_)) isCacheActivated];
}

- (IOSByteArray *)readBlocksWithInt:(jint)firstBlockAddress
                            withInt:(jint)sizeInBlocks {
  return [((ComStSt25sdkCommandType2CustomCommand *) nil_chk(mType2Cmd_)) readBlocksWithInt:firstBlockAddress withInt:sizeInBlocks];
}

- (void)writeBlocksWithInt:(jint)firstBlockAddress
             withByteArray:(IOSByteArray *)data {
  [self writeBlocksWithInt:firstBlockAddress withByteArray:data withBoolean:false];
}

- (void)writeBlocksWithInt:(jint)firstBlockAddress
             withByteArray:(IOSByteArray *)data
               withBoolean:(jboolean)allowWriteOfOtpBlocks {
  [((ComStSt25sdkCommandType2CustomCommand *) nil_chk(mType2Cmd_)) writeBlocksWithInt:firstBlockAddress withByteArray:data withBoolean:allowWriteOfOtpBlocks];
}

- (IOSByteArray *)readBytesWithInt:(jint)byteAddress
                           withInt:(jint)sizeInBytes {
  return [((ComStSt25sdkCommandType2CustomCommand *) nil_chk(mType2Cmd_)) readBytesWithInt:byteAddress withInt:sizeInBytes];
}

- (void)writeBytesWithInt:(jint)byteAddress
            withByteArray:(IOSByteArray *)data {
  [self writeBytesWithInt:byteAddress withByteArray:data withBoolean:false];
}

- (void)writeBytesWithInt:(jint)byteAddress
            withByteArray:(IOSByteArray *)data
              withBoolean:(jboolean)allowWriteOfOtpBlocks {
  [((ComStSt25sdkCommandType2CustomCommand *) nil_chk(mType2Cmd_)) writeBytesWithInt:byteAddress withByteArray:data withBoolean:allowWriteOfOtpBlocks];
}

- (IOSByteArray *)readSysFile {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
}

- (jint)getSysFileLength {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
}

- (void)writeNdefMessageWithComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg {
  if (msg == nil) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_DATA_PARAM));
  }
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) removeWithId:mNdefMsg_];
  id<JavaUtilList> tlvList = [self parseMemoryForTlv];
  jint ndefStartAddress = [self findNdefMsgStartAddressWithJavaUtilList:tlvList];
  id<JavaUtilList> areasToSkip = [self computeMemoryAreasToSkip];
  [((ComStSt25sdkCommandNdefType2Command *) nil_chk(mNdefCmd_)) writeNdefMessageWithInt:ndefStartAddress withComStSt25sdkNdefNDEFMsg:msg withJavaUtilList:areasToSkip];
  mNdefMsg_ = [msg copy__];
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) addWithId:mNdefMsg_];
}

- (ComStSt25sdkNdefNDEFMsg *)readNdefMessage {
  if ([((ComStSt25sdkTagCache *) nil_chk(mCache_)) isCacheActivated] && [((ComStSt25sdkTagCache *) nil_chk(mCache_)) isCacheValidWithId:mNdefMsg_]) {
    return [((ComStSt25sdkNdefNDEFMsg *) nil_chk(mNdefMsg_)) copy__];
  }
  [((ComStSt25sdkTagCache *) nil_chk(mCache_)) removeWithId:mNdefMsg_];
  id<JavaUtilList> tlvList = [self parseMemoryForTlv];
  jint ndefStartAddress = [self findNdefMsgStartAddressWithJavaUtilList:tlvList];
  id<JavaUtilList> areasToSkip = [self computeMemoryAreasToSkip];
  mNdefMsg_ = [((ComStSt25sdkCommandNdefType2Command *) nil_chk(mNdefCmd_)) readNdefMessageWithInt:ndefStartAddress withJavaUtilList:areasToSkip];
  if (mNdefMsg_ != nil) {
    [((ComStSt25sdkTagCache *) nil_chk(mCache_)) addWithId:mNdefMsg_];
    return mNdefMsg_;
  }
  return nil;
}

- (id<JavaUtilList>)computeMemoryAreasToSkip {
  jint controlTlvSize = 0;
  id<JavaUtilList> tlvList = [self parseMemoryForTlv];
  if ((tlvList == nil) || [((id<JavaUtilList>) nil_chk(tlvList)) isEmpty]) {
    return nil;
  }
  id<JavaUtilList> areasToSkip = [self computeLockControlAndReservedAreaWithJavaUtilList:tlvList];
  for (ComStSt25sdkControlTlv * __strong tlv in nil_chk(tlvList)) {
    jbyte tlvType = [((ComStSt25sdkControlTlv *) nil_chk(tlv)) getType];
    jint tlvSize = [tlv getTlvSize];
    if ((tlvType == ComStSt25sdkControlTlv_LOCK_CONTROL_TLV) || (tlvType == ComStSt25sdkControlTlv_MEMORY_CONTROL_TLV) || (tlvType == ComStSt25sdkControlTlv_NULL_TLV)) {
      controlTlvSize += tlvSize;
    }
    if (tlvType == ComStSt25sdkControlTlv_NDEF_MESSAGE_TLV) {
      break;
    }
  }
  ComStSt25sdkType2Type2Tag_addAreaToSkipWithJavaUtilList_withInt_withInt_(self, areasToSkip, ComStSt25sdkType2Type2Tag_T2T_MEMORY_HEADER_NUMBER_OF_BYTES, controlTlvSize);
  return areasToSkip;
}

- (id<JavaUtilList>)computeLockControlAndReservedAreaWithJavaUtilList:(id<JavaUtilList>)listOfTlv {
  id<JavaUtilList> myList = new_JavaUtilArrayList_init();
  if (listOfTlv == nil) {
    return nil;
  }
  for (jint index = 0; index < [listOfTlv size]; index++) {
    if ([((ComStSt25sdkControlTlv *) nil_chk([listOfTlv getWithInt:index])) getType] == ComStSt25sdkControlTlv_LOCK_CONTROL_TLV) {
      ComStSt25sdkType2DynamicLockType2Configuration *tlv = new_ComStSt25sdkType2DynamicLockType2Configuration_initWithComStSt25sdkControlTlv_([listOfTlv getWithInt:index]);
      jint offsetInBytes = [tlv getDlaFirstByteAddress];
      jint sizeInBytes = [tlv getDlaNbrBytes];
      sizeInBytes = 4 * ComStSt25sdkHelper_divisionRoundedUpWithInt_withInt_(sizeInBytes, 4);
      ComStSt25sdkType2Type2Tag_addAreaToSkipWithJavaUtilList_withInt_withInt_(self, myList, offsetInBytes, sizeInBytes);
    }
    else if ([((ComStSt25sdkControlTlv *) nil_chk([listOfTlv getWithInt:index])) getType] == ComStSt25sdkControlTlv_MEMORY_CONTROL_TLV) {
      ComStSt25sdkType2ReservedAreaType2Configuration *tlv = new_ComStSt25sdkType2ReservedAreaType2Configuration_initWithComStSt25sdkControlTlv_([listOfTlv getWithInt:index]);
      ComStSt25sdkType2Type2Tag_addAreaToSkipWithJavaUtilList_withInt_withInt_(self, myList, [tlv getRaFirstByteAddress], [tlv getRaSize]);
    }
  }
  return myList;
}

- (void)addAreaToSkipWithJavaUtilList:(id<JavaUtilList>)myList
                              withInt:(jint)offsetInBytes
                              withInt:(jint)sizeInBytes {
  ComStSt25sdkType2Type2Tag_addAreaToSkipWithJavaUtilList_withInt_withInt_(self, myList, offsetInBytes, sizeInBytes);
}

- (jint)findNdefMsgStartAddress {
  jint address = ComStSt25sdkType2Type2Tag_T2T_AREA_FIRST_BYTE_ADDRESS;
  jint tlvSize;
  ComStSt25sdkControlTlv *tlv;
  do {
    tlv = [self decodeTlvFromTagWithInt:address];
    tlvSize = [((ComStSt25sdkControlTlv *) nil_chk(tlv)) getTlvSize];
    if (tlvSize > 0) {
      if ([tlv getType] == ComStSt25sdkControlTlv_NULL_TLV && ((address == ComStSt25sdkType2Type2Tag_T2T_AREA_FIRST_BYTE_ADDRESS) || (address % ComStSt25sdkCommandType2Command_DEFAULT_NBR_OF_BYTES_PER_BLOCK == 0))) {
        return address;
      }
      else if (IOSByteArray_Get(nil_chk([self readBytesWithInt:address withInt:1]), 0) == ComStSt25sdkControlTlv_NDEF_MESSAGE_TLV) {
        return address;
      }
    }
    address += tlvSize;
  }
  while (tlvSize > 0);
  return address;
}

- (jint)findNdefMsgStartAddressWithJavaUtilList:(id<JavaUtilList>)listOfTlv {
  jint address = ComStSt25sdkType2Type2Tag_T2T_AREA_FIRST_BYTE_ADDRESS;
  jint index = 0;
  jint tlvSize = 0;
  jbyte tlvType;
  if ([((id<JavaUtilList>) nil_chk(listOfTlv)) isEmpty]) {
    return address;
  }
  do {
    ComStSt25sdkControlTlv *tlv = [listOfTlv getWithInt:index];
    tlvSize = [((ComStSt25sdkControlTlv *) nil_chk(tlv)) getTlvSize];
    tlvType = [tlv getType];
    switch (tlvType) {
      case ComStSt25sdkControlTlv_NDEF_MESSAGE_TLV:
      return address;
      case ComStSt25sdkControlTlv_TERMINATOR_TLV:
      return address;
      default:
      index++;
      address += tlvSize;
      break;
    }
  }
  while (index < [listOfTlv size] && tlvSize > 0);
  return address;
}

- (ComStSt25sdkControlTlv *)decodeTlvFromTagWithInt:(jint)byteAddress {
  IOSByteArray *buffer = [self readBytesWithInt:byteAddress withInt:5];
  return new_ComStSt25sdkControlTlv_initWithByteArray_(buffer);
}

- (jint)computeTlvSizeWithInt:(jint)byteAddress {
  IOSByteArray *buffer = [self readBytesWithInt:byteAddress withInt:5];
  ComStSt25sdkControlTlv *discoveredTlv = new_ComStSt25sdkControlTlv_initWithByteArray_(buffer);
  return [discoveredTlv getTlvSize];
}

- (id<JavaUtilList>)parseBufferForTlvListWithByteArray:(IOSByteArray *)buffer {
  return [self parseBufferForTlvListWithByteArray:buffer withInt:(jint) 0x00];
}

- (id<JavaUtilList>)parseBufferForTlvListWithByteArray:(IOSByteArray *)buffer
                                               withInt:(jint)offsetAddress {
  jint offset = offsetAddress;
  id<JavaUtilList> tlvList = new_JavaUtilArrayList_init();
  while (((IOSByteArray *) nil_chk(buffer))->size_ > offset) {
    ComStSt25sdkControlTlv *discoveredTlv = new_ComStSt25sdkControlTlv_initWithByteArray_withInt_(buffer, offset);
    jint tlvSize = [discoveredTlv getTlvSize];
    if (tlvSize == 0) {
      return tlvList;
    }
    [tlvList addWithId:discoveredTlv];
    offset += tlvSize;
  }
  return tlvList;
}

- (id<JavaUtilList>)parseMemoryForTlv {
  jint offsetAddress = ComStSt25sdkType2Type2Tag_T2T_AREA_FIRST_BYTE_ADDRESS;
  jint tlvSize = 0;
  id<JavaUtilList> tlvList = new_JavaUtilArrayList_init();
  do {
    ComStSt25sdkControlTlv *discoveredTlv = [self decodeTlvFromTagWithInt:offsetAddress];
    tlvSize = [((ComStSt25sdkControlTlv *) nil_chk(discoveredTlv)) getTlvSize];
    jbyte tlvType = [discoveredTlv getType];
    if (tlvSize > 0) {
      if (tlvType == ComStSt25sdkControlTlv_TERMINATOR_TLV) {
        [tlvList addWithId:discoveredTlv];
        return tlvList;
      }
      else if (tlvType == ComStSt25sdkControlTlv_NULL_TLV && [tlvList isEmpty]) {
        return tlvList;
      }
      else {
        [tlvList addWithId:discoveredTlv];
      }
    }
    offsetAddress += tlvSize;
  }
  while (tlvSize > 0);
  return tlvList;
}

- (IOSByteArray *)getCurrentTlvs {
  IOSByteArray *tlvData = [IOSByteArray newArrayWithLength:0];
  id<JavaUtilList> tlvList = [self parseMemoryForTlv];
  for (ComStSt25sdkControlTlv * __strong tlv in nil_chk(tlvList)) {
    tlvData = ComStSt25sdkHelper_concatenateByteArraysWithByteArray_withByteArray_(tlvData, [((ComStSt25sdkControlTlv *) nil_chk(tlv)) rebuildBufferFromTlv]);
  }
  return tlvData;
}

- (void)writeBytesInT2TAreaWithInt:(jint)byteAddress
                     withByteArray:(IOSByteArray *)data {
  id<JavaUtilList> areasToSkip = [self computeMemoryAreasToSkip];
  [((ComStSt25sdkCommandNdefType2Command *) nil_chk(mNdefCmd_)) writeBytesInTlvsAreaWithInt:byteAddress withByteArray:data withJavaUtilList:areasToSkip];
}

- (IOSByteArray *)readBytesFromT2TAreaWithInt:(jint)byteAddress
                                      withInt:(jint)nbOfBytesToRead {
  id<JavaUtilList> areasToSkip = [self computeMemoryAreasToSkip];
  return [((ComStSt25sdkCommandNdefType2Command *) nil_chk(mNdefCmd_)) readBytesFromTlvsAreaWithInt:byteAddress withInt:nbOfBytesToRead withJavaUtilList:areasToSkip];
}

- (jint)getT2TAreaSizeInBytes {
  return mT2TAreaSizeInBytes_;
}

- (jint)getTlvsAreaSizeInBytes {
  return mTlvsAreaSizeInBytes_;
}

- (void)computeDynamicLockAreaLocation {
  ComStSt25sdkType2Type2Tag_computeDynamicLockAreaLocation(self);
}

- (jint)getDynamicLockAreaBlockOffset {
  return mDynamicLockAreaBlockOffset_;
}

- (jboolean)errorDuringTlvParsing {
  return mErrorDuringTlvParsing_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkCommandType2Command;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 7, 8, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 7, 9, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 6, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 6, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 13, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 16, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 17, 13, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 15, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 16, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkNdefNDEFMsg;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, -1, -1, 1, 21, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 22, 23, 1, 24, -1, -1 },
    { NULL, "V", 0x2, 25, 26, -1, 27, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 28, 23, 1, 29, -1, -1 },
    { NULL, "LComStSt25sdkControlTlv;", 0x1, 30, 31, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 32, 31, 1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 33, 4, 1, 34, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 33, 35, 1, 36, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, 1, 37, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 15, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 39, 13, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[1].selector = @selector(getType2Command);
  methods[2].selector = @selector(getBlockSizeInBytes);
  methods[3].selector = @selector(getOtpBlocksList);
  methods[4].selector = @selector(computeT2TAreaSizeInBytes);
  methods[5].selector = @selector(computeTlvsAreaSizeInBytes);
  methods[6].selector = @selector(getReadDataSizeInBytes);
  methods[7].selector = @selector(getWriteDataSizeInBytes);
  methods[8].selector = @selector(readCCFile);
  methods[9].selector = @selector(writeCCFile);
  methods[10].selector = @selector(writeCCFileWithByteArray:);
  methods[11].selector = @selector(initEmptyCCFile);
  methods[12].selector = @selector(getCCFileLength);
  methods[13].selector = @selector(getCCMagicNumber);
  methods[14].selector = @selector(getCCMappingVersion);
  methods[15].selector = @selector(getMemSizeInBytes);
  methods[16].selector = @selector(getCCMemorySize);
  methods[17].selector = @selector(getCCReadAccess);
  methods[18].selector = @selector(getCCWriteAccess);
  methods[19].selector = @selector(readWithByte:);
  methods[20].selector = @selector(writeWithByte:withByteArray:);
  methods[21].selector = @selector(writeWithByte:withByteArray:withBoolean:);
  methods[22].selector = @selector(sectorSelectCmdPacket1);
  methods[23].selector = @selector(sectorSelectCmdPacket2WithByte:);
  methods[24].selector = @selector(sectorSelectWithByte:);
  methods[25].selector = @selector(invalidateCache);
  methods[26].selector = @selector(validateCache);
  methods[27].selector = @selector(activateCache);
  methods[28].selector = @selector(deactivateCache);
  methods[29].selector = @selector(updateCache);
  methods[30].selector = @selector(isCacheValid);
  methods[31].selector = @selector(isCacheActivated);
  methods[32].selector = @selector(readBlocksWithInt:withInt:);
  methods[33].selector = @selector(writeBlocksWithInt:withByteArray:);
  methods[34].selector = @selector(writeBlocksWithInt:withByteArray:withBoolean:);
  methods[35].selector = @selector(readBytesWithInt:withInt:);
  methods[36].selector = @selector(writeBytesWithInt:withByteArray:);
  methods[37].selector = @selector(writeBytesWithInt:withByteArray:withBoolean:);
  methods[38].selector = @selector(readSysFile);
  methods[39].selector = @selector(getSysFileLength);
  methods[40].selector = @selector(writeNdefMessageWithComStSt25sdkNdefNDEFMsg:);
  methods[41].selector = @selector(readNdefMessage);
  methods[42].selector = @selector(computeMemoryAreasToSkip);
  methods[43].selector = @selector(computeLockControlAndReservedAreaWithJavaUtilList:);
  methods[44].selector = @selector(addAreaToSkipWithJavaUtilList:withInt:withInt:);
  methods[45].selector = @selector(findNdefMsgStartAddress);
  methods[46].selector = @selector(findNdefMsgStartAddressWithJavaUtilList:);
  methods[47].selector = @selector(decodeTlvFromTagWithInt:);
  methods[48].selector = @selector(computeTlvSizeWithInt:);
  methods[49].selector = @selector(parseBufferForTlvListWithByteArray:);
  methods[50].selector = @selector(parseBufferForTlvListWithByteArray:withInt:);
  methods[51].selector = @selector(parseMemoryForTlv);
  methods[52].selector = @selector(getCurrentTlvs);
  methods[53].selector = @selector(writeBytesInT2TAreaWithInt:withByteArray:);
  methods[54].selector = @selector(readBytesFromT2TAreaWithInt:withInt:);
  methods[55].selector = @selector(getT2TAreaSizeInBytes);
  methods[56].selector = @selector(getTlvsAreaSizeInBytes);
  methods[57].selector = @selector(computeDynamicLockAreaLocation);
  methods[58].selector = @selector(getDynamicLockAreaBlockOffset);
  methods[59].selector = @selector(errorDuringTlvParsing);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mType2Cmd_", "LComStSt25sdkCommandType2CustomCommand;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mCCFile_", "LComStSt25sdkType2CCFileType2;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mCache_", "LComStSt25sdkTagCache;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mNdefCmd_", "LComStSt25sdkCommandNdefType2Command;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mT2TAreaOffsetInBytes_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mT2TAreaSizeInBytes_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mTlvsAreaSizeInBytes_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mDynamicLockAreaBlockOffset_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mErrorDuringTlvParsing_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mOtpBlocksList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 40, -1 },
    { "T2T_MEMORY_HEADER_NUMBER_OF_BYTES", "I", .constantValue.asInt = ComStSt25sdkType2Type2Tag_T2T_MEMORY_HEADER_NUMBER_OF_BYTES, 0x19, -1, -1, -1, -1 },
    { "T2T_AREA_FIRST_BYTE_ADDRESS", "B", .constantValue.asChar = ComStSt25sdkType2Type2Tag_T2T_AREA_FIRST_BYTE_ADDRESS, 0x19, -1, -1, -1, -1 },
    { "TYPE2_STATLOCK_BLOCK_ADDRESS", "I", .constantValue.asInt = ComStSt25sdkType2Type2Tag_TYPE2_STATLOCK_BLOCK_ADDRESS, 0x19, -1, -1, -1, -1 },
    { "TYPE2_CCFILE_BLOCK_ADDRESS", "I", .constantValue.asInt = ComStSt25sdkType2Type2Tag_TYPE2_CCFILE_BLOCK_ADDRESS, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[B", "LComStSt25sdkSTException;", "()Ljava/util/List<Ljava/lang/Integer;>;", "writeCCFile", "[B", "read", "B", "write", "B[B", "B[BZ", "sectorSelectCmdPacket2", "sectorSelect", "readBlocks", "II", "writeBlocks", "I[B", "I[BZ", "readBytes", "writeBytes", "writeNdefMessage", "LComStSt25sdkNdefNDEFMsg;", "()Ljava/util/List<[I>;", "computeLockControlAndReservedArea", "LJavaUtilList;", "(Ljava/util/List<Lcom/st/st25sdk/ControlTlv;>;)Ljava/util/List<[I>;", "addAreaToSkip", "LJavaUtilList;II", "(Ljava/util/List<[I>;II)V", "findNdefMsgStartAddress", "(Ljava/util/List<Lcom/st/st25sdk/ControlTlv;>;)I", "decodeTlvFromTag", "I", "computeTlvSize", "parseBufferForTlvList", "([B)Ljava/util/List<Lcom/st/st25sdk/ControlTlv;>;", "[BI", "([BI)Ljava/util/List<Lcom/st/st25sdk/ControlTlv;>;", "()Ljava/util/List<Lcom/st/st25sdk/ControlTlv;>;", "writeBytesInT2TArea", "readBytesFromT2TArea", "Ljava/util/List<Ljava/lang/Integer;>;", "LComStSt25sdkType2Type2Tag_Type2FileType;" };
  static const J2ObjcClassInfo _ComStSt25sdkType2Type2Tag = { "Type2Tag", "com.st.st25sdk.type2", ptrTable, methods, fields, 7, 0x1, 60, 14, -1, 41, -1, -1, -1 };
  return &_ComStSt25sdkType2Type2Tag;
}

@end

void ComStSt25sdkType2Type2Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkType2Type2Tag *self, id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  ComStSt25sdkNFCTag_initWithComStSt25sdkRFReaderInterface_(self, readerInterface);
  self->mErrorDuringTlvParsing_ = false;
  self->mName_ = @"NFC type2 tag";
  self->mDescription_ = @"NFC type2 - ISO/IEC 14443A";
  self->mType2Cmd_ = new_ComStSt25sdkCommandType2CustomCommand_initWithComStSt25sdkRFReaderInterface_(readerInterface);
  self->mUid_ = JavaUtilArrays_copyOfWithByteArray_withInt_(uid, ((IOSByteArray *) nil_chk(uid))->size_);
  self->mCCFile_ = new_ComStSt25sdkType2CCFileType2_initWithComStSt25sdkCommandType2Command_(self->mType2Cmd_);
  self->mT2TAreaOffsetInBytes_ = ComStSt25sdkType2Type2Tag_T2T_MEMORY_HEADER_NUMBER_OF_BYTES;
  [self computeT2TAreaSizeInBytes];
  self->mCache_ = new_ComStSt25sdkTagCache_init();
  [self->mCache_ addWithId:self->mCCFile_];
  self->mNdefCmd_ = new_ComStSt25sdkCommandNdefType2Command_initWithComStSt25sdkRFReaderInterface_(readerInterface);
  @try {
    ComStSt25sdkType2Type2Tag_computeDynamicLockAreaLocation(self);
    [self computeTlvsAreaSizeInBytes];
  }
  @catch (ComStSt25sdkSTException *e) {
    [e printStackTrace];
    self->mErrorDuringTlvParsing_ = true;
    self->mDynamicLockAreaBlockOffset_ = (self->mT2TAreaOffsetInBytes_ + self->mT2TAreaSizeInBytes_) / [self getBlockSizeInBytes];
    self->mTlvsAreaSizeInBytes_ = self->mT2TAreaSizeInBytes_;
  }
  self->mOtpBlocksList_ = new_JavaUtilArrayList_init();
  [self->mOtpBlocksList_ addWithId:JavaLangInteger_valueOfWithInt_(ComStSt25sdkType2Type2Tag_TYPE2_STATLOCK_BLOCK_ADDRESS)];
  [((id<JavaUtilList>) nil_chk(self->mOtpBlocksList_)) addWithId:JavaLangInteger_valueOfWithInt_(ComStSt25sdkType2Type2Tag_TYPE2_CCFILE_BLOCK_ADDRESS)];
  [((id<JavaUtilList>) nil_chk(self->mOtpBlocksList_)) addWithId:JavaLangInteger_valueOfWithInt_(self->mDynamicLockAreaBlockOffset_)];
  [((ComStSt25sdkCommandType2CustomCommand *) nil_chk(self->mType2Cmd_)) setOtpBlocksListWithJavaUtilList:self->mOtpBlocksList_];
}

ComStSt25sdkType2Type2Tag *new_ComStSt25sdkType2Type2Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType2Type2Tag, initWithComStSt25sdkRFReaderInterface_withByteArray_, readerInterface, uid)
}

ComStSt25sdkType2Type2Tag *create_ComStSt25sdkType2Type2Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType2Type2Tag, initWithComStSt25sdkRFReaderInterface_withByteArray_, readerInterface, uid)
}

void ComStSt25sdkType2Type2Tag_addAreaToSkipWithJavaUtilList_withInt_withInt_(ComStSt25sdkType2Type2Tag *self, id<JavaUtilList> myList, jint offsetInBytes, jint sizeInBytes) {
  jint i = 0;
  IOSIntArray *areaConfig = [IOSIntArray newArrayWithLength:2];
  *IOSIntArray_GetRef(areaConfig, 0) = offsetInBytes;
  *IOSIntArray_GetRef(areaConfig, 1) = sizeInBytes;
  while (i < [((id<JavaUtilList>) nil_chk(myList)) size] && offsetInBytes > IOSIntArray_Get(nil_chk([myList getWithInt:i]), 0)) {
    i++;
  }
  [myList addWithInt:i withId:areaConfig];
  jint currentIndex = 0;
  while ((currentIndex + 1) < [myList size]) {
    jint currentOffsetInBytes = IOSIntArray_Get(nil_chk([myList getWithInt:currentIndex]), 0);
    jint currentSizeInBytes = IOSIntArray_Get(nil_chk([myList getWithInt:currentIndex]), 1);
    jint nextOffsetInBytes = IOSIntArray_Get(nil_chk([myList getWithInt:currentIndex + 1]), 0);
    jint nextSizeInBytes = IOSIntArray_Get(nil_chk([myList getWithInt:currentIndex + 1]), 1);
    if ((currentOffsetInBytes + currentSizeInBytes - 1) >= (nextOffsetInBytes + nextSizeInBytes - 1)) {
      (void) [myList removeWithInt:currentIndex + 1];
    }
    else if ((currentOffsetInBytes + currentSizeInBytes - 1) >= nextOffsetInBytes) {
      *IOSIntArray_GetRef(nil_chk([myList getWithInt:currentIndex]), 1) = nextOffsetInBytes + nextSizeInBytes - currentOffsetInBytes;
      (void) [myList removeWithInt:currentIndex + 1];
    }
    else {
      currentIndex++;
    }
  }
}

void ComStSt25sdkType2Type2Tag_computeDynamicLockAreaLocation(ComStSt25sdkType2Type2Tag *self) {
  id<JavaUtilList> tlvList = [self parseMemoryForTlv];
  if ((tlvList != nil) && (![((id<JavaUtilList>) nil_chk(tlvList)) isEmpty])) {
    for (ComStSt25sdkControlTlv * __strong tlv in nil_chk(tlvList)) {
      if ([((ComStSt25sdkControlTlv *) nil_chk(tlv)) getType] == ComStSt25sdkControlTlv_LOCK_CONTROL_TLV) {
        ComStSt25sdkType2DynamicLockType2Configuration *dynamicLockConf = new_ComStSt25sdkType2DynamicLockType2Configuration_initWithComStSt25sdkControlTlv_(tlv);
        jint offsetInBytes = [dynamicLockConf getDlaFirstByteAddress];
        self->mDynamicLockAreaBlockOffset_ = offsetInBytes / [self getBlockSizeInBytes];
        return;
      }
    }
  }
  self->mDynamicLockAreaBlockOffset_ = (self->mT2TAreaOffsetInBytes_ + self->mT2TAreaSizeInBytes_) / [self getBlockSizeInBytes];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType2Type2Tag)

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkType2Type2Tag_Type2FileType)

ComStSt25sdkType2Type2Tag_Type2FileType *ComStSt25sdkType2Type2Tag_Type2FileType_values_[1];

@implementation ComStSt25sdkType2Type2Tag_Type2FileType

+ (ComStSt25sdkType2Type2Tag_Type2FileType *)NDEF_FILE {
  return JreEnum(ComStSt25sdkType2Type2Tag_Type2FileType, NDEF_FILE);
}

+ (IOSObjectArray *)values {
  return ComStSt25sdkType2Type2Tag_Type2FileType_values();
}

+ (ComStSt25sdkType2Type2Tag_Type2FileType *)valueOfWithNSString:(NSString *)name {
  return ComStSt25sdkType2Type2Tag_Type2FileType_valueOfWithNSString_(name);
}

- (ComStSt25sdkType2Type2Tag_Type2FileType_Enum)toNSEnum {
  return (ComStSt25sdkType2Type2Tag_Type2FileType_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComStSt25sdkType2Type2Tag_Type2FileType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkType2Type2Tag_Type2FileType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NDEF_FILE", "LComStSt25sdkType2Type2Tag_Type2FileType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComStSt25sdkType2Type2Tag_Type2FileType, NDEF_FILE), "LComStSt25sdkType2Type2Tag;", "Ljava/lang/Enum<Lcom/st/st25sdk/type2/Type2Tag$Type2FileType;>;" };
  static const J2ObjcClassInfo _ComStSt25sdkType2Type2Tag_Type2FileType = { "Type2FileType", "com.st.st25sdk.type2", ptrTable, methods, fields, 7, 0x4019, 2, 1, 3, -1, -1, 4, -1 };
  return &_ComStSt25sdkType2Type2Tag_Type2FileType;
}

+ (void)initialize {
  if (self == [ComStSt25sdkType2Type2Tag_Type2FileType class]) {
    JreEnum(ComStSt25sdkType2Type2Tag_Type2FileType, NDEF_FILE) = new_ComStSt25sdkType2Type2Tag_Type2FileType_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkType2Type2Tag_Type2FileType_class_(), 0), 0);
    J2OBJC_SET_INITIALIZED(ComStSt25sdkType2Type2Tag_Type2FileType)
  }
}

@end

void ComStSt25sdkType2Type2Tag_Type2FileType_initWithNSString_withInt_(ComStSt25sdkType2Type2Tag_Type2FileType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComStSt25sdkType2Type2Tag_Type2FileType *new_ComStSt25sdkType2Type2Tag_Type2FileType_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType2Type2Tag_Type2FileType, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComStSt25sdkType2Type2Tag_Type2FileType_values() {
  ComStSt25sdkType2Type2Tag_Type2FileType_initialize();
  return [IOSObjectArray arrayWithObjects:ComStSt25sdkType2Type2Tag_Type2FileType_values_ count:1 type:ComStSt25sdkType2Type2Tag_Type2FileType_class_()];
}

ComStSt25sdkType2Type2Tag_Type2FileType *ComStSt25sdkType2Type2Tag_Type2FileType_valueOfWithNSString_(NSString *name) {
  ComStSt25sdkType2Type2Tag_Type2FileType_initialize();
  for (int i = 0; i < 1; i++) {
    ComStSt25sdkType2Type2Tag_Type2FileType *e = ComStSt25sdkType2Type2Tag_Type2FileType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComStSt25sdkType2Type2Tag_Type2FileType *ComStSt25sdkType2Type2Tag_Type2FileType_fromOrdinal(NSUInteger ordinal) {
  ComStSt25sdkType2Type2Tag_Type2FileType_initialize();
  if (ordinal >= 1) {
    return nil;
  }
  return ComStSt25sdkType2Type2Tag_Type2FileType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType2Type2Tag_Type2FileType)
