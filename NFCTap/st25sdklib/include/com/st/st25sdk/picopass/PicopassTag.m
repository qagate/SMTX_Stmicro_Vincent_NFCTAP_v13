//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/picopass/PicopassTag.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/NFCTag.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/command/PicopassCommand.h"
#include "com/st/st25sdk/ndef/NDEFMsg.h"
#include "com/st/st25sdk/picopass/PicopassTag.h"
#include "java/util/Arrays.h"

@implementation ComStSt25sdkPicopassPicopassTag

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)readerInterface
                                        withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkPicopassPicopassTag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  return self;
}

- (void)setM1M0BitsWithByte:(jbyte)m1m0Bits {
  [((ComStSt25sdkCommandPicopassCommand *) nil_chk(mPicopassCmd_)) setM1M0BitsWithByte:(jbyte) (m1m0Bits & (jint) 0x03)];
}

- (jbyte)getM1M0Bits {
  return [((ComStSt25sdkCommandPicopassCommand *) nil_chk(mPicopassCmd_)) getM1M0Bits];
}

- (IOSByteArray *)readByteWithByte:(jbyte)blockAddress {
  return [((ComStSt25sdkCommandPicopassCommand *) nil_chk(mPicopassCmd_)) readWithByte:blockAddress];
}

- (void)updateWithByte:(jbyte)blockAddress
         withByteArray:(IOSByteArray *)data {
  (void) [((ComStSt25sdkCommandPicopassCommand *) nil_chk(mPicopassCmd_)) updateWithByte:blockAddress withByteArray:data];
}

- (jint)getMemSizeInBytes {
  return mMemSize_;
}

- (jbyte)getICRef {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jint)getCCFileLength {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jbyte)getCCMagicNumber {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jbyte)getCCMappingVersion {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jbyte)getCCReadAccess {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jbyte)getCCWriteAccess {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jint)getCCMemorySize {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (void)writeNdefMessageWithComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (ComStSt25sdkNdefNDEFMsg *)readNdefMessage {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (IOSByteArray *)readCCFile {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (void)writeCCFile {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (void)writeCCFileWithByteArray:(IOSByteArray *)buffer {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (void)initEmptyCCFile {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jint)getSysFileLength {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (IOSByteArray *)readBytesWithInt:(jint)byteAddress
                           withInt:(jint)sizeInBytes {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (void)writeBytesWithInt:(jint)byteAddress
            withByteArray:(IOSByteArray *)data {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (IOSByteArray *)readSysFile {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkNdefNDEFMsg;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 12, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[1].selector = @selector(setM1M0BitsWithByte:);
  methods[2].selector = @selector(getM1M0Bits);
  methods[3].selector = @selector(readByteWithByte:);
  methods[4].selector = @selector(updateWithByte:withByteArray:);
  methods[5].selector = @selector(getMemSizeInBytes);
  methods[6].selector = @selector(getICRef);
  methods[7].selector = @selector(getCCFileLength);
  methods[8].selector = @selector(getCCMagicNumber);
  methods[9].selector = @selector(getCCMappingVersion);
  methods[10].selector = @selector(getCCReadAccess);
  methods[11].selector = @selector(getCCWriteAccess);
  methods[12].selector = @selector(getCCMemorySize);
  methods[13].selector = @selector(writeNdefMessageWithComStSt25sdkNdefNDEFMsg:);
  methods[14].selector = @selector(readNdefMessage);
  methods[15].selector = @selector(readCCFile);
  methods[16].selector = @selector(writeCCFile);
  methods[17].selector = @selector(writeCCFileWithByteArray:);
  methods[18].selector = @selector(initEmptyCCFile);
  methods[19].selector = @selector(getSysFileLength);
  methods[20].selector = @selector(readBytesWithInt:withInt:);
  methods[21].selector = @selector(writeBytesWithInt:withByteArray:);
  methods[22].selector = @selector(readSysFile);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPicopassCmd_", "LComStSt25sdkCommandPicopassCommand;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[B", "LComStSt25sdkSTException;", "setM1M0Bits", "B", "readByte", "update", "B[B", "writeNdefMessage", "LComStSt25sdkNdefNDEFMsg;", "writeCCFile", "[B", "readBytes", "II", "writeBytes", "I[B" };
  static const J2ObjcClassInfo _ComStSt25sdkPicopassPicopassTag = { "PicopassTag", "com.st.st25sdk.picopass", ptrTable, methods, fields, 7, 0x1, 23, 1, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkPicopassPicopassTag;
}

@end

void ComStSt25sdkPicopassPicopassTag_initWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkPicopassPicopassTag *self, id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  ComStSt25sdkNFCTag_initWithComStSt25sdkRFReaderInterface_(self, readerInterface);
  self->mName_ = @"Picopass tag";
  self->mDescription_ = @"Picopass tag";
  if (uid == nil || uid->size_ != 8) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  self->mUid_ = JavaUtilArrays_copyOfWithByteArray_withInt_(uid, uid->size_);
  self->mPicopassCmd_ = new_ComStSt25sdkCommandPicopassCommand_initWithComStSt25sdkRFReaderInterface_(readerInterface);
}

ComStSt25sdkPicopassPicopassTag *new_ComStSt25sdkPicopassPicopassTag_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  J2OBJC_NEW_IMPL(ComStSt25sdkPicopassPicopassTag, initWithComStSt25sdkRFReaderInterface_withByteArray_, readerInterface, uid)
}

ComStSt25sdkPicopassPicopassTag *create_ComStSt25sdkPicopassPicopassTag_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkPicopassPicopassTag, initWithComStSt25sdkRFReaderInterface_withByteArray_, readerInterface, uid)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkPicopassPicopassTag)
