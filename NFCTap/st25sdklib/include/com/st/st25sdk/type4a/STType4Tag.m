//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type4a/STType4Tag.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/NFCTag.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/TagCache.h"
#include "com/st/st25sdk/command/Iso7816Command.h"
#include "com/st/st25sdk/command/Type4Command.h"
#include "com/st/st25sdk/command/Type4CustomCommand.h"
#include "com/st/st25sdk/ndef/NDEFMsg.h"
#include "com/st/st25sdk/type4a/CCFileType4.h"
#include "com/st/st25sdk/type4a/FileControlTlvType4.h"
#include "com/st/st25sdk/type4a/NdefFileType4.h"
#include "com/st/st25sdk/type4a/STSysFileType4.h"
#include "com/st/st25sdk/type4a/STType4Tag.h"
#include "com/st/st25sdk/type4a/Type4Tag.h"
#include "com/st/st25sdk/type4a/Type4aTag.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/util/LinkedHashMap.h"

@implementation ComStSt25sdkType4aSTType4Tag

+ (jint)READ_PASSWORD {
  return ComStSt25sdkType4aSTType4Tag_READ_PASSWORD;
}

+ (jint)WRITE_PASSWORD {
  return ComStSt25sdkType4aSTType4Tag_WRITE_PASSWORD;
}

+ (jint)SYS_FILE_IDENTIFIER {
  return ComStSt25sdkType4aSTType4Tag_SYS_FILE_IDENTIFIER;
}

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)readerInterface
                                        withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkType4aSTType4Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  return self;
}

- (IOSByteArray *)readBytesWithInt:(jint)offsetInBytes
                           withInt:(jint)sizeInBytes {
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    jint ndefFileId = [((ComStSt25sdkType4aCCFileType4 *) nil_chk(mCCFile_)) getNdefFileId];
    (void) [self selectFileWithInt:ndefFileId];
    return [((ComStSt25sdkCommandType4CustomCommand *) nil_chk(mSTType4Cmd_)) extendedReadDataWithInt:offsetInBytes withInt:sizeInBytes];
  }
}

- (IOSByteArray *)readBytesWithInt:(jint)fileId
                           withInt:(jint)offsetInBytes
                           withInt:(jint)sizeInBytes {
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self selectFileWithInt:fileId];
    return [((ComStSt25sdkCommandType4CustomCommand *) nil_chk(mSTType4Cmd_)) extendedReadDataWithInt:offsetInBytes withInt:sizeInBytes];
  }
}

- (void)selectSysFile {
  ComStSt25sdkSTLog_iWithNSString_(@"Select Sys File");
  (void) [((ComStSt25sdkType4aSTSysFileType4 *) nil_chk(mSysFile_)) select];
}

- (IOSByteArray *)readSysFile {
  return [((ComStSt25sdkType4aSTSysFileType4 *) nil_chk(mSysFile_)) getData];
}

- (jint)getSysFileLength {
  return [((ComStSt25sdkType4aSTSysFileType4 *) nil_chk(mSysFile_)) getLength];
}

- (jint)getMemSizeInBytes {
  return [((ComStSt25sdkType4aSTSysFileType4 *) nil_chk(mSysFile_)) getMemSizeInBytes];
}

- (jbyte)getICRef {
  return [((ComStSt25sdkType4aSTSysFileType4 *) nil_chk(mSysFile_)) getICRef];
}

- (ComStSt25sdkType4aType4Tag_AccessStatus *)getFileReadAccessStatusWithInt:(jint)fileId {
  ComStSt25sdkType4aType4Tag_AccessStatus *readAccessStatus;
  jbyte readAccess = [self getFileReadAccessWithInt:fileId];
  if (readAccess == (jbyte) (jint) 0x00) {
    readAccessStatus = JreLoadEnum(ComStSt25sdkType4aType4Tag_AccessStatus, NOT_LOCKED);
  }
  else if (readAccess == (jbyte) (jint) 0x80) {
    readAccessStatus = JreLoadEnum(ComStSt25sdkType4aType4Tag_AccessStatus, LOCKED_BY_PASSWORD);
  }
  else if (readAccess == (jbyte) (jint) 0xFE) {
    readAccessStatus = JreLoadEnum(ComStSt25sdkType4aType4Tag_AccessStatus, NOT_AUTHORIZED);
  }
  else {
    readAccessStatus = JreLoadEnum(ComStSt25sdkType4aType4Tag_AccessStatus, STATUS_UNKNOWN);
  }
  return readAccessStatus;
}

- (ComStSt25sdkType4aType4Tag_AccessStatus *)getFileWriteAccessStatusWithInt:(jint)fileId {
  ComStSt25sdkType4aType4Tag_AccessStatus *writeAccessStatus;
  jbyte writeAccess = [self getFileWriteAccessWithInt:fileId];
  if (writeAccess == (jbyte) (jint) 0x00) {
    writeAccessStatus = JreLoadEnum(ComStSt25sdkType4aType4Tag_AccessStatus, NOT_LOCKED);
  }
  else if (writeAccess == (jbyte) (jint) 0xFF) {
    writeAccessStatus = JreLoadEnum(ComStSt25sdkType4aType4Tag_AccessStatus, NOT_AUTHORIZED);
  }
  else if (writeAccess == (jbyte) (jint) 0x80) {
    writeAccessStatus = JreLoadEnum(ComStSt25sdkType4aType4Tag_AccessStatus, LOCKED_BY_PASSWORD);
  }
  else {
    writeAccessStatus = JreLoadEnum(ComStSt25sdkType4aType4Tag_AccessStatus, STATUS_UNKNOWN);
  }
  return writeAccessStatus;
}

- (void)verifyWithByte:(jbyte)cla
              withByte:(jbyte)p1
              withByte:(jbyte)p2
         withByteArray:(IOSByteArray *)password {
  (void) [((ComStSt25sdkCommandIso7816Command *) nil_chk(mIso7816Cmd_)) verifyWithByte:cla withByte:p1 withByte:p2 withByteArray:password];
}

- (void)verifyReadPasswordWithByteArray:(IOSByteArray *)readPassword {
  [self verifyWithByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x01 withByteArray:readPassword];
}

- (void)verifyWritePasswordWithByteArray:(IOSByteArray *)writePassword {
  [self verifyWithByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x02 withByteArray:writePassword];
}

- (void)changeReferenceDataWithByte:(jbyte)p1
                           withByte:(jbyte)p2
                      withByteArray:(IOSByteArray *)newPassword {
  (void) [((ComStSt25sdkCommandIso7816Command *) nil_chk(mIso7816Cmd_)) changeReferenceDataWithByte:(jbyte) (jint) 0x00 withByte:p1 withByte:p2 withByteArray:newPassword];
}

- (void)changeReadPasswordWithByteArray:(IOSByteArray *)newReadPassword {
  [self changeReferenceDataWithByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x01 withByteArray:newReadPassword];
}

- (void)changeWritePasswordWithByteArray:(IOSByteArray *)newWritePassword {
  [self changeReferenceDataWithByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x02 withByteArray:newWritePassword];
}

- (IOSByteArray *)enableVerificationReqWithByte:(jbyte)cla
                                       withByte:(jbyte)p1
                                       withByte:(jbyte)p2 {
  return [((ComStSt25sdkCommandIso7816Command *) nil_chk(mIso7816Cmd_)) enableVerificationReqWithByte:cla withByte:p1 withByte:p2];
}

- (void)lockRead {
  jbyte cla = (jbyte) (jint) 0x00;
  (void) [self enableVerificationReqWithByte:cla withByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x01];
}

- (void)lockReadPermanently {
  (void) [self enablePermanentStateWithByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x01];
}

- (void)lockWrite {
  jbyte cla = (jbyte) (jint) 0x00;
  (void) [self enableVerificationReqWithByte:cla withByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x02];
}

- (void)lockWritePermanently {
  (void) [self enablePermanentStateWithByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x02];
}

- (void)unlockRead {
  [self disableVerificationReqWithByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x01];
}

- (void)disableVerificationReqWithByte:(jbyte)cla
                              withByte:(jbyte)p1
                              withByte:(jbyte)p2 {
  (void) [((ComStSt25sdkCommandIso7816Command *) nil_chk(mIso7816Cmd_)) disableVerificationReqWithByte:cla withByte:p1 withByte:p2];
}

- (void)unlockWrite {
  [self disableVerificationReqWithByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x02];
}

- (IOSByteArray *)enablePermanentStateWithByte:(jbyte)p1
                                      withByte:(jbyte)p2 {
  return [self enableVerificationReqWithByte:(jbyte) (jint) 0xA2 withByte:p1 withByte:p2];
}

- (IOSByteArray *)extendedReadBinaryWithByte:(jbyte)p1
                                    withByte:(jbyte)p2
                                    withByte:(jbyte)length {
  return [((ComStSt25sdkCommandType4CustomCommand *) nil_chk(mSTType4Cmd_)) extendedReadBinaryWithByte:p1 withByte:p2 withByte:length];
}

- (IOSByteArray *)updateFileTypeWithByte:(jbyte)data {
  return [((ComStSt25sdkCommandType4CustomCommand *) nil_chk(mSTType4Cmd_)) updateFileTypeWithByte:data];
}

- (IOSByteArray *)readBytesWithInt:(jint)fileId
                           withInt:(jint)byteAddress
                           withInt:(jint)sizeInBytes
                     withByteArray:(IOSByteArray *)readPassword {
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self selectFileWithInt:fileId];
    [self verifyReadPasswordWithInt:fileId withByteArray:readPassword];
    return [((ComStSt25sdkCommandType4CustomCommand *) nil_chk(mSTType4Cmd_)) extendedReadDataWithInt:byteAddress withInt:sizeInBytes];
  }
}

- (void)writeBytesWithInt:(jint)fileId
                  withInt:(jint)byteAddress
            withByteArray:(IOSByteArray *)data
            withByteArray:(IOSByteArray *)writePassword {
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self selectFileWithInt:fileId];
    [self verifyWritePasswordWithByteArray:writePassword];
    [self writeDataWithInt:byteAddress withByteArray:data];
  }
}

- (ComStSt25sdkNdefNDEFMsg *)readNdefMessageWithInt:(jint)fileId
                                      withByteArray:(IOSByteArray *)readPassword {
  ComStSt25sdkType4aNdefFileType4 *ndefFileType4 = [((JavaUtilLinkedHashMap *) nil_chk(mNdefFileList_)) getWithId:JavaLangInteger_valueOfWithInt_(fileId)];
  if (ndefFileType4 == nil) {
    ndefFileType4 = new_ComStSt25sdkType4aNdefFileType4_initWithComStSt25sdkType4aType4Tag_withInt_(self, fileId);
    (void) [((JavaUtilLinkedHashMap *) nil_chk(mNdefFileList_)) putWithId:JavaLangInteger_valueOfWithInt_(fileId) withId:ndefFileType4];
    [((ComStSt25sdkTagCache *) nil_chk(mCache_)) addWithId:ndefFileType4];
  }
  ComStSt25sdkNdefNDEFMsg *ndefMsg = [ndefFileType4 selectAndReadNdefMsgWithByteArray:readPassword];
  return ndefMsg;
}

- (void)writeNdefMessageWithInt:(jint)fileId
    withComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg
                  withByteArray:(IOSByteArray *)writePassword {
  jint ndefMsgLength;
  @try {
    ndefMsgLength = [((ComStSt25sdkNdefNDEFMsg *) nil_chk(msg)) getLength];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_NDEF_DATA));
  }
  if ([((ComStSt25sdkType4aFileControlTlvType4 *) nil_chk([self getCCFileTlvWithInt:fileId])) getMaxFileSize] < ndefMsgLength) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NDEF_MESSAGE_TOO_BIG));
  }
  ComStSt25sdkType4aNdefFileType4 *ndefFileType4 = [((JavaUtilLinkedHashMap *) nil_chk(mNdefFileList_)) getWithId:JavaLangInteger_valueOfWithInt_(fileId)];
  if (ndefFileType4 == nil) {
    ndefFileType4 = new_ComStSt25sdkType4aNdefFileType4_initWithComStSt25sdkType4aType4Tag_withInt_(self, fileId);
    (void) [((JavaUtilLinkedHashMap *) nil_chk(mNdefFileList_)) putWithId:JavaLangInteger_valueOfWithInt_(fileId) withId:ndefFileType4];
    [((ComStSt25sdkTagCache *) nil_chk(mCache_)) addWithId:ndefFileType4];
  }
  [ndefFileType4 selectAndWriteNdefMsgWithComStSt25sdkNdefNDEFMsg:msg withByteArray:writePassword];
}

- (void)lockReadWithInt:(jint)fileId
          withByteArray:(IOSByteArray *)writePassword {
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self selectFileWithInt:fileId];
    [self verifyWritePasswordWithByteArray:writePassword];
    [self lockRead];
  }
}

- (void)lockReadPermanentlyWithInt:(jint)fileId
                     withByteArray:(IOSByteArray *)writePassword {
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self selectFileWithInt:fileId];
    [self verifyWritePasswordWithByteArray:writePassword];
    [self lockReadPermanently];
  }
}

- (void)lockWriteWithInt:(jint)fileId
           withByteArray:(IOSByteArray *)writePassword {
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self selectFileWithInt:fileId];
    [self verifyWritePasswordWithByteArray:writePassword];
    [self lockWrite];
  }
}

- (void)lockWritePermanentlyWithInt:(jint)fileId
                      withByteArray:(IOSByteArray *)writePassword {
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self selectFileWithInt:fileId];
    [self verifyWritePasswordWithByteArray:writePassword];
    [self lockWritePermanently];
  }
}

- (void)unlockReadWithInt:(jint)fileId
            withByteArray:(IOSByteArray *)writePassword {
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self selectFileWithInt:fileId];
    [self verifyWritePasswordWithByteArray:writePassword];
    [self unlockRead];
  }
}

- (void)unlockWriteWithInt:(jint)fileId
             withByteArray:(IOSByteArray *)writePassword {
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self selectFileWithInt:fileId];
    [self verifyWritePasswordWithByteArray:writePassword];
    [self unlockWrite];
  }
}

- (jboolean)isReadPasswordRequestedWithInt:(jint)fileId {
  jboolean isReadPasswordRequested;
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    @try {
      (void) [self selectFileWithInt:fileId];
      (void) [((ComStSt25sdkCommandIso7816Command *) nil_chk(mIso7816Cmd_)) verifyWithByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x01 withByteArray:nil];
      isReadPasswordRequested = false;
    }
    @catch (ComStSt25sdkSTException *e) {
      switch ([[e getError] ordinal]) {
        case ComStSt25sdkSTException_STExceptionCode_Enum_PASSWORD_NEEDED:
        isReadPasswordRequested = true;
        break;
        default:
        @throw (e);
      }
    }
  }
  return isReadPasswordRequested;
}

- (jboolean)isWritePasswordRequestedWithInt:(jint)fileId {
  jboolean isWritePasswordRequested;
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    @try {
      (void) [self selectFileWithInt:fileId];
      (void) [((ComStSt25sdkCommandIso7816Command *) nil_chk(mIso7816Cmd_)) verifyWithByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x00 withByte:(jbyte) (jint) 0x02 withByteArray:nil];
      isWritePasswordRequested = false;
    }
    @catch (ComStSt25sdkSTException *e) {
      switch ([[e getError] ordinal]) {
        case ComStSt25sdkSTException_STExceptionCode_Enum_PASSWORD_NEEDED:
        isWritePasswordRequested = true;
        break;
        default:
        @throw (e);
      }
    }
  }
  return isWritePasswordRequested;
}

- (void)verifyReadPasswordWithInt:(jint)fileId
                    withByteArray:(IOSByteArray *)readPassword {
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self selectFileWithInt:fileId];
    [self verifyReadPasswordWithByteArray:readPassword];
  }
}

- (void)verifyWritePasswordWithInt:(jint)fileId
                     withByteArray:(IOSByteArray *)writePassword {
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self selectFileWithInt:fileId];
    [self verifyWritePasswordWithByteArray:writePassword];
  }
}

- (void)changeReadPasswordWithInt:(jint)fileId
                    withByteArray:(IOSByteArray *)newReadPassword
                    withByteArray:(IOSByteArray *)currentWritePassword {
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self selectFileWithInt:fileId];
    [self verifyWritePasswordWithByteArray:currentWritePassword];
    [self changeReadPasswordWithByteArray:newReadPassword];
  }
}

- (void)changeWritePasswordWithInt:(jint)fileId
                     withByteArray:(IOSByteArray *)newWritePassword
                     withByteArray:(IOSByteArray *)currentWritePassword {
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self selectFileWithInt:fileId];
    [self verifyWritePasswordWithByteArray:currentWritePassword];
    [self changeWritePasswordWithByteArray:newWritePassword];
  }
}

- (jint)getReadPasswordLengthInBytesWithInt:(jint)fileId {
  return 16;
}

- (jint)getWritePasswordLengthInBytesWithInt:(jint)fileId {
  return 16;
}

- (void)setFileTypeWithInt:(jint)fileId
withComStSt25sdkType4aType4Tag_Type4FileType:(ComStSt25sdkType4aType4Tag_Type4FileType *)fileType {
  jbyte data;
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self selectFileWithInt:fileId];
    if (fileType == JreLoadEnum(ComStSt25sdkType4aType4Tag_Type4FileType, NDEF_FILE)) {
      data = (jint) 0x04;
    }
    else {
      data = (jint) 0x05;
    }
    (void) [self updateFileTypeWithByte:data];
    [((ComStSt25sdkType4aCCFileType4 *) nil_chk(mCCFile_)) invalidateCache];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 4, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkType4aType4Tag_AccessStatus;", 0x1, 5, 6, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkType4aType4Tag_AccessStatus;", 0x1, 7, 6, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 11, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 11, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 11, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 17, 18, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 18, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 20, 21, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 22, 18, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 23, 24, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 25, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkNdefNDEFMsg;", 0x1, 28, 29, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 29, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 29, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 29, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 29, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 29, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 29, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 38, 6, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 39, 6, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 29, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 29, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 40, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 40, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 41, 6, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 42, 6, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 44, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[1].selector = @selector(readBytesWithInt:withInt:);
  methods[2].selector = @selector(readBytesWithInt:withInt:withInt:);
  methods[3].selector = @selector(selectSysFile);
  methods[4].selector = @selector(readSysFile);
  methods[5].selector = @selector(getSysFileLength);
  methods[6].selector = @selector(getMemSizeInBytes);
  methods[7].selector = @selector(getICRef);
  methods[8].selector = @selector(getFileReadAccessStatusWithInt:);
  methods[9].selector = @selector(getFileWriteAccessStatusWithInt:);
  methods[10].selector = @selector(verifyWithByte:withByte:withByte:withByteArray:);
  methods[11].selector = @selector(verifyReadPasswordWithByteArray:);
  methods[12].selector = @selector(verifyWritePasswordWithByteArray:);
  methods[13].selector = @selector(changeReferenceDataWithByte:withByte:withByteArray:);
  methods[14].selector = @selector(changeReadPasswordWithByteArray:);
  methods[15].selector = @selector(changeWritePasswordWithByteArray:);
  methods[16].selector = @selector(enableVerificationReqWithByte:withByte:withByte:);
  methods[17].selector = @selector(lockRead);
  methods[18].selector = @selector(lockReadPermanently);
  methods[19].selector = @selector(lockWrite);
  methods[20].selector = @selector(lockWritePermanently);
  methods[21].selector = @selector(unlockRead);
  methods[22].selector = @selector(disableVerificationReqWithByte:withByte:withByte:);
  methods[23].selector = @selector(unlockWrite);
  methods[24].selector = @selector(enablePermanentStateWithByte:withByte:);
  methods[25].selector = @selector(extendedReadBinaryWithByte:withByte:withByte:);
  methods[26].selector = @selector(updateFileTypeWithByte:);
  methods[27].selector = @selector(readBytesWithInt:withInt:withInt:withByteArray:);
  methods[28].selector = @selector(writeBytesWithInt:withInt:withByteArray:withByteArray:);
  methods[29].selector = @selector(readNdefMessageWithInt:withByteArray:);
  methods[30].selector = @selector(writeNdefMessageWithInt:withComStSt25sdkNdefNDEFMsg:withByteArray:);
  methods[31].selector = @selector(lockReadWithInt:withByteArray:);
  methods[32].selector = @selector(lockReadPermanentlyWithInt:withByteArray:);
  methods[33].selector = @selector(lockWriteWithInt:withByteArray:);
  methods[34].selector = @selector(lockWritePermanentlyWithInt:withByteArray:);
  methods[35].selector = @selector(unlockReadWithInt:withByteArray:);
  methods[36].selector = @selector(unlockWriteWithInt:withByteArray:);
  methods[37].selector = @selector(isReadPasswordRequestedWithInt:);
  methods[38].selector = @selector(isWritePasswordRequestedWithInt:);
  methods[39].selector = @selector(verifyReadPasswordWithInt:withByteArray:);
  methods[40].selector = @selector(verifyWritePasswordWithInt:withByteArray:);
  methods[41].selector = @selector(changeReadPasswordWithInt:withByteArray:withByteArray:);
  methods[42].selector = @selector(changeWritePasswordWithInt:withByteArray:withByteArray:);
  methods[43].selector = @selector(getReadPasswordLengthInBytesWithInt:);
  methods[44].selector = @selector(getWritePasswordLengthInBytesWithInt:);
  methods[45].selector = @selector(setFileTypeWithInt:withComStSt25sdkType4aType4Tag_Type4FileType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mIso7816Cmd_", "LComStSt25sdkCommandIso7816Command;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mSTType4Cmd_", "LComStSt25sdkCommandType4CustomCommand;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mSysFile_", "LComStSt25sdkType4aSTSysFileType4;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "READ_PASSWORD", "I", .constantValue.asInt = ComStSt25sdkType4aSTType4Tag_READ_PASSWORD, 0x19, -1, -1, -1, -1 },
    { "WRITE_PASSWORD", "I", .constantValue.asInt = ComStSt25sdkType4aSTType4Tag_WRITE_PASSWORD, 0x19, -1, -1, -1, -1 },
    { "SYS_FILE_IDENTIFIER", "I", .constantValue.asInt = ComStSt25sdkType4aSTType4Tag_SYS_FILE_IDENTIFIER, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[B", "LComStSt25sdkSTException;", "readBytes", "II", "III", "getFileReadAccessStatus", "I", "getFileWriteAccessStatus", "verify", "BBB[B", "verifyReadPassword", "[B", "verifyWritePassword", "changeReferenceData", "BB[B", "changeReadPassword", "changeWritePassword", "enableVerificationReq", "BBB", "disableVerificationReq", "enablePermanentState", "BB", "extendedReadBinary", "updateFileType", "B", "III[B", "writeBytes", "II[B[B", "readNdefMessage", "I[B", "writeNdefMessage", "ILComStSt25sdkNdefNDEFMsg;[B", "lockRead", "lockReadPermanently", "lockWrite", "lockWritePermanently", "unlockRead", "unlockWrite", "isReadPasswordRequested", "isWritePasswordRequested", "I[B[B", "getReadPasswordLengthInBytes", "getWritePasswordLengthInBytes", "setFileType", "ILComStSt25sdkType4aType4Tag_Type4FileType;" };
  static const J2ObjcClassInfo _ComStSt25sdkType4aSTType4Tag = { "STType4Tag", "com.st.st25sdk.type4a", ptrTable, methods, fields, 7, 0x1, 46, 6, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType4aSTType4Tag;
}

@end

void ComStSt25sdkType4aSTType4Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkType4aSTType4Tag *self, id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  ComStSt25sdkType4aType4aTag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  self->mSTType4Cmd_ = new_ComStSt25sdkCommandType4CustomCommand_initWithComStSt25sdkRFReaderInterface_withInt_withInt_(readerInterface, [self getCCMaxReadSize], [self getCCMaxWriteSize]);
  self->mIso7816Cmd_ = new_ComStSt25sdkCommandIso7816Command_initWithComStSt25sdkRFReaderInterface_(readerInterface);
  self->mSysFile_ = new_ComStSt25sdkType4aSTSysFileType4_initWithComStSt25sdkCommandType4Command_(self->mType4Cmd_);
  self->mTypeDescription_ = JreLoadStatic(ComStSt25sdkNFCTag, DYNAMIC_NFC_RFID_TAG);
  [((ComStSt25sdkTagCache *) nil_chk(self->mCache_)) addWithId:self->mSysFile_];
}

ComStSt25sdkType4aSTType4Tag *new_ComStSt25sdkType4aSTType4Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType4aSTType4Tag, initWithComStSt25sdkRFReaderInterface_withByteArray_, readerInterface, uid)
}

ComStSt25sdkType4aSTType4Tag *create_ComStSt25sdkType4aSTType4Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType4aSTType4Tag, initWithComStSt25sdkRFReaderInterface_withByteArray_, readerInterface, uid)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType4aSTType4Tag)
