//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type4a/st25ta/SysFileST25TA.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/command/Type4Command.h"
#include "com/st/st25sdk/command/Type4CustomCommand.h"
#include "com/st/st25sdk/type4a/STSysFileType4.h"
#include "com/st/st25sdk/type4a/st25ta/SysFileST25TA.h"
#include "java/nio/ByteBuffer.h"

inline jbyte ComStSt25sdkType4aSt25taSysFileST25TA_get_COUNTER_INCREMENT_BIT(void);
#define ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_INCREMENT_BIT 1
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkType4aSt25taSysFileST25TA, COUNTER_INCREMENT_BIT, jbyte)

inline jbyte ComStSt25sdkType4aSt25taSysFileST25TA_get_COUNTER_INCREMENT_ON_READ(void);
#define ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_INCREMENT_ON_READ 0
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkType4aSt25taSysFileST25TA, COUNTER_INCREMENT_ON_READ, jbyte)

inline jbyte ComStSt25sdkType4aSt25taSysFileST25TA_get_COUNTER_INCREMENT_ON_WRITE(void);
#define ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_INCREMENT_ON_WRITE 1
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkType4aSt25taSysFileST25TA, COUNTER_INCREMENT_ON_WRITE, jbyte)

inline jbyte ComStSt25sdkType4aSt25taSysFileST25TA_get_COUNTER_ENABLED(void);
#define ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_ENABLED 2
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkType4aSt25taSysFileST25TA, COUNTER_ENABLED, jbyte)

inline jbyte ComStSt25sdkType4aSt25taSysFileST25TA_get_COUNTER_LOCKED(void);
#define ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_LOCKED -128
J2OBJC_STATIC_FIELD_CONSTANT(ComStSt25sdkType4aSt25taSysFileST25TA, COUNTER_LOCKED, jbyte)

@implementation ComStSt25sdkType4aSt25taSysFileST25TA

- (instancetype)initWithComStSt25sdkCommandType4CustomCommand:(ComStSt25sdkCommandType4CustomCommand *)type4CustomCommand {
  ComStSt25sdkType4aSt25taSysFileST25TA_initWithComStSt25sdkCommandType4CustomCommand_(self, type4CustomCommand);
  return self;
}

- (jbyte)getReservedSysByte {
  [self checkCache];
  return mReservedSysByte_;
}

- (jbyte)getProductCode {
  [self checkCache];
  return mProductCode_;
}

- (jbyte)getEventCounter {
  [self checkCache];
  return mEventCounter_;
}

- (IOSByteArray *)getCounterBytes {
  [self invalidateCache];
  [self checkCache];
  return mCounterBytes_;
}

- (jint)getCounterValue {
  IOSByteArray *counterBytes = [self getCounterBytes];
  if ((counterBytes == nil) || (((IOSByteArray *) nil_chk(counterBytes))->size_ != 3)) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, CMD_FAILED));
  }
  return ((JreLShift32((IOSByteArray_Get(nil_chk(counterBytes), 0) & (jint) 0xFF), 16)) + (JreLShift32((IOSByteArray_Get(counterBytes, 1) & (jint) 0xFF), 8)) + (IOSByteArray_Get(counterBytes, 2) & (jint) 0xFF));
}

- (jbyte)getProductVersion {
  [self checkCache];
  return mProductVersion_;
}

- (jboolean)isCounterLocked {
  jbyte lc = [self getEventCounter];
  return (lc & ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_LOCKED) == ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_LOCKED;
}

- (jboolean)isCounterEnabled {
  jbyte lc = [self getEventCounter];
  return (lc & ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_ENABLED) == ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_ENABLED;
}

- (jboolean)isCounterIncrementedOnRead {
  jbyte lc = [self getEventCounter];
  return (lc & ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_INCREMENT_BIT) == ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_INCREMENT_ON_READ;
}

- (jboolean)isCounterIncrementedOnWrite {
  jbyte lc = [self getEventCounter];
  return (lc & ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_INCREMENT_BIT) == ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_INCREMENT_ON_WRITE;
}

- (void)lockCounter {
  jbyte lc = [self getEventCounter];
  lc = (jbyte) (lc | ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_LOCKED);
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self select];
    (void) [((ComStSt25sdkCommandType4CustomCommand *) nil_chk(((ComStSt25sdkCommandType4CustomCommand *) cast_chk(mType4Command_, [ComStSt25sdkCommandType4CustomCommand class])))) setConfigCounterWithByte:lc];
    mEventCounter_ = lc;
  }
}

- (void)enableCounter {
  jbyte lc = [self getEventCounter];
  lc = (jbyte) (lc | ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_ENABLED);
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self select];
    (void) [((ComStSt25sdkCommandType4CustomCommand *) nil_chk(((ComStSt25sdkCommandType4CustomCommand *) cast_chk(mType4Command_, [ComStSt25sdkCommandType4CustomCommand class])))) setConfigCounterWithByte:lc];
    mEventCounter_ = lc;
  }
}

- (void)disableCounter {
  jbyte lc = [self getEventCounter];
  lc = (jbyte) (lc & ~ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_ENABLED);
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self select];
    (void) [((ComStSt25sdkCommandType4CustomCommand *) nil_chk(((ComStSt25sdkCommandType4CustomCommand *) cast_chk(mType4Command_, [ComStSt25sdkCommandType4CustomCommand class])))) setConfigCounterWithByte:lc];
    mEventCounter_ = lc;
  }
}

- (void)incrementCounterOnRead {
  jbyte lc = [self getEventCounter];
  lc = (jbyte) (lc & ~ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_INCREMENT_BIT);
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self select];
    (void) [((ComStSt25sdkCommandType4CustomCommand *) nil_chk(((ComStSt25sdkCommandType4CustomCommand *) cast_chk(mType4Command_, [ComStSt25sdkCommandType4CustomCommand class])))) setConfigCounterWithByte:lc];
    mEventCounter_ = lc;
  }
}

- (void)incrementCounterOnWrite {
  jbyte lc = [self getEventCounter];
  lc = (jbyte) (lc | ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_INCREMENT_ON_WRITE);
  @synchronized(JreLoadStatic(ComStSt25sdkCommandType4Command, mLock)) {
    (void) [self select];
    (void) [((ComStSt25sdkCommandType4CustomCommand *) nil_chk(((ComStSt25sdkCommandType4CustomCommand *) cast_chk(mType4Command_, [ComStSt25sdkCommandType4CustomCommand class])))) setConfigCounterWithByte:lc];
    mEventCounter_ = lc;
  }
}

- (void)parseSysFileWithByteArray:(IOSByteArray *)buffer {
  JavaNioByteBuffer *byteBuffer = JavaNioByteBuffer_wrapWithByteArray_(buffer);
  mLength_ = (JreLShift32(ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_([((JavaNioByteBuffer *) nil_chk(byteBuffer)) get]), 8));
  mLength_ += ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_([byteBuffer get]);
  mReservedSysByte_ = [byteBuffer get];
  mEventCounter_ = [byteBuffer get];
  (void) [byteBuffer getWithByteArray:mCounterBytes_ withInt:0 withInt:3];
  mProductVersion_ = [byteBuffer get];
  (void) [byteBuffer getWithByteArray:mUid_ withInt:0 withInt:7];
  mMemorySizeInBytes_ = (JreLShift32(ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_([byteBuffer get]), 8));
  mMemorySizeInBytes_ += ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_([byteBuffer get]) + 1;
  mICRef_ = [byteBuffer get];
  mBuffer_ = [byteBuffer array];
  mLength_ = ((IOSByteArray *) nil_chk(mBuffer_))->size_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkCommandType4CustomCommand:);
  methods[1].selector = @selector(getReservedSysByte);
  methods[2].selector = @selector(getProductCode);
  methods[3].selector = @selector(getEventCounter);
  methods[4].selector = @selector(getCounterBytes);
  methods[5].selector = @selector(getCounterValue);
  methods[6].selector = @selector(getProductVersion);
  methods[7].selector = @selector(isCounterLocked);
  methods[8].selector = @selector(isCounterEnabled);
  methods[9].selector = @selector(isCounterIncrementedOnRead);
  methods[10].selector = @selector(isCounterIncrementedOnWrite);
  methods[11].selector = @selector(lockCounter);
  methods[12].selector = @selector(enableCounter);
  methods[13].selector = @selector(disableCounter);
  methods[14].selector = @selector(incrementCounterOnRead);
  methods[15].selector = @selector(incrementCounterOnWrite);
  methods[16].selector = @selector(parseSysFileWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mEventCounter_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mReservedSysByte_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mCounterBytes_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mProductVersion_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "COUNTER_INCREMENT_BIT", "B", .constantValue.asChar = ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_INCREMENT_BIT, 0x1a, -1, -1, -1, -1 },
    { "COUNTER_INCREMENT_ON_READ", "B", .constantValue.asChar = ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_INCREMENT_ON_READ, 0x1a, -1, -1, -1, -1 },
    { "COUNTER_INCREMENT_ON_WRITE", "B", .constantValue.asChar = ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_INCREMENT_ON_WRITE, 0x1a, -1, -1, -1, -1 },
    { "COUNTER_ENABLED", "B", .constantValue.asChar = ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_ENABLED, 0x1a, -1, -1, -1, -1 },
    { "COUNTER_LOCKED", "B", .constantValue.asChar = ComStSt25sdkType4aSt25taSysFileST25TA_COUNTER_LOCKED, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkCommandType4CustomCommand;", "LComStSt25sdkSTException;", "parseSysFile", "[B" };
  static const J2ObjcClassInfo _ComStSt25sdkType4aSt25taSysFileST25TA = { "SysFileST25TA", "com.st.st25sdk.type4a.st25ta", ptrTable, methods, fields, 7, 0x1, 17, 9, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType4aSt25taSysFileST25TA;
}

@end

void ComStSt25sdkType4aSt25taSysFileST25TA_initWithComStSt25sdkCommandType4CustomCommand_(ComStSt25sdkType4aSt25taSysFileST25TA *self, ComStSt25sdkCommandType4CustomCommand *type4CustomCommand) {
  ComStSt25sdkType4aSTSysFileType4_initWithComStSt25sdkCommandType4Command_(self, type4CustomCommand);
  self->mCounterBytes_ = [IOSByteArray newArrayWithLength:3];
}

ComStSt25sdkType4aSt25taSysFileST25TA *new_ComStSt25sdkType4aSt25taSysFileST25TA_initWithComStSt25sdkCommandType4CustomCommand_(ComStSt25sdkCommandType4CustomCommand *type4CustomCommand) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType4aSt25taSysFileST25TA, initWithComStSt25sdkCommandType4CustomCommand_, type4CustomCommand)
}

ComStSt25sdkType4aSt25taSysFileST25TA *create_ComStSt25sdkType4aSt25taSysFileST25TA_initWithComStSt25sdkCommandType4CustomCommand_(ComStSt25sdkCommandType4CustomCommand *type4CustomCommand) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType4aSt25taSysFileST25TA, initWithComStSt25sdkCommandType4CustomCommand_, type4CustomCommand)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType4aSt25taSysFileST25TA)
