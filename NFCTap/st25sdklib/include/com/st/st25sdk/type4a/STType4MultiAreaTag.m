//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type4a/STType4MultiAreaTag.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/TagHelper.h"
#include "com/st/st25sdk/ndef/NDEFMsg.h"
#include "com/st/st25sdk/type4a/STType4MultiAreaTag.h"
#include "com/st/st25sdk/type4a/STType4Tag.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@implementation ComStSt25sdkType4aSTType4MultiAreaTag

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)readerInterface
                                        withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkType4aSTType4MultiAreaTag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  return self;
}

- (jboolean)isAreaNumberValidWithInt:(jint)area {
  return (area >= 1 && area <= [self getNumberOfAreas]);
}

- (jint)getMaxNumberOfAreas {
  return 1;
}

- (jint)getNumberOfAreas {
  return [self getNbrOfFiles];
}

- (void)setNumberOfAreasWithInt:(jint)nbOfAreas {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jint)getAreaSizeInBytesWithInt:(jint)area {
  if (![self isAreaNumberValidWithInt:area]) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  return [self getMaxFileSizeWithInt:area];
}

- (jint)getAreaOffsetInBytesWithInt:(jint)area {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
}

- (jint)getAreaOffsetInBlocksWithInt:(jint)area {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
}

- (jint)getAreaFromBlockAddressWithInt:(jint)blockOffset {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
}

- (jint)getAreaFromByteAddressWithInt:(jint)address {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
}

- (jint)getAreaPasswordLengthWithInt:(jint)area {
  if (![self isAreaNumberValidWithInt:area]) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  return ComStSt25sdkTagHelper_PWD_ON_128_BITS;
}

- (id<JavaUtilList>)getPossibleReadWriteProtectionWithInt:(jint)area {
  if (![self isAreaNumberValidWithInt:area]) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  id<JavaUtilList> possibleReadWriteProtections = new_JavaUtilArrayList_init();
  [possibleReadWriteProtections addWithId:JreLoadEnum(ComStSt25sdkTagHelper_ReadWriteProtection, READABLE_AND_WRITABLE)];
  [possibleReadWriteProtections addWithId:JreLoadEnum(ComStSt25sdkTagHelper_ReadWriteProtection, READABLE_AND_WRITE_PROTECTED_BY_PWD)];
  [possibleReadWriteProtections addWithId:JreLoadEnum(ComStSt25sdkTagHelper_ReadWriteProtection, WRITEABLE_AND_READ_PROTECTED_BY_PWD)];
  [possibleReadWriteProtections addWithId:JreLoadEnum(ComStSt25sdkTagHelper_ReadWriteProtection, READ_AND_WRITE_PROTECTED_BY_PWD)];
  return possibleReadWriteProtections;
}

- (ComStSt25sdkTagHelper_ReadWriteProtection *)getReadWriteProtectionWithInt:(jint)area {
  ComStSt25sdkTagHelper_ReadWriteProtection *readWriteProtection;
  if (![self isAreaNumberValidWithInt:area]) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  jboolean isReadPasswordRequested = [self isReadPasswordRequestedWithInt:area];
  jboolean isWritePasswordRequested = [self isWritePasswordRequestedWithInt:area];
  if (isReadPasswordRequested) {
    if (isWritePasswordRequested) {
      readWriteProtection = JreLoadEnum(ComStSt25sdkTagHelper_ReadWriteProtection, READ_AND_WRITE_PROTECTED_BY_PWD);
    }
    else {
      readWriteProtection = JreLoadEnum(ComStSt25sdkTagHelper_ReadWriteProtection, WRITEABLE_AND_READ_PROTECTED_BY_PWD);
    }
  }
  else {
    if (isWritePasswordRequested) {
      readWriteProtection = JreLoadEnum(ComStSt25sdkTagHelper_ReadWriteProtection, READABLE_AND_WRITE_PROTECTED_BY_PWD);
    }
    else {
      readWriteProtection = JreLoadEnum(ComStSt25sdkTagHelper_ReadWriteProtection, READABLE_AND_WRITABLE);
    }
  }
  return readWriteProtection;
}

- (void)setReadWriteProtectionWithInt:(jint)area
withComStSt25sdkTagHelper_ReadWriteProtection:(ComStSt25sdkTagHelper_ReadWriteProtection *)readWriteProtection {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_SUPPORTED));
}

- (void)setReadWriteProtectionWithInt:(jint)area
withComStSt25sdkTagHelper_ReadWriteProtection:(ComStSt25sdkTagHelper_ReadWriteProtection *)protection
                        withByteArray:(IOSByteArray *)writePassword {
  if (![self isAreaNumberValidWithInt:area]) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  switch ([protection ordinal]) {
    case ComStSt25sdkTagHelper_ReadWriteProtection_Enum_READABLE_AND_WRITABLE:
    [self unlockReadWithInt:area withByteArray:writePassword];
    [self unlockWriteWithInt:area withByteArray:writePassword];
    break;
    case ComStSt25sdkTagHelper_ReadWriteProtection_Enum_READABLE_AND_WRITE_PROTECTED_BY_PWD:
    [self unlockReadWithInt:area withByteArray:writePassword];
    [self lockWriteWithInt:area withByteArray:writePassword];
    break;
    case ComStSt25sdkTagHelper_ReadWriteProtection_Enum_READ_AND_WRITE_PROTECTED_BY_PWD:
    [self lockReadWithInt:area withByteArray:writePassword];
    [self lockWriteWithInt:area withByteArray:writePassword];
    break;
    case ComStSt25sdkTagHelper_ReadWriteProtection_Enum_WRITEABLE_AND_READ_PROTECTED_BY_PWD:
    [self lockReadWithInt:area withByteArray:writePassword];
    [self unlockWriteWithInt:area withByteArray:writePassword];
    break;
    default:
    ComStSt25sdkSTLog_eWithNSString_(JreStrcat("$$$", @"Error! ReadWriteProtection ", [((ComStSt25sdkTagHelper_ReadWriteProtection *) nil_chk(protection)) description], @" is not supported by STType4Tag!"));
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
}

- (ComStSt25sdkNdefNDEFMsg *)readNdefMessageWithInt:(jint)area {
  if (![self isAreaNumberValidWithInt:area]) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  return [super readNdefMessageWithInt:area];
}

- (void)writeNdefMessageWithInt:(jint)area
    withComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg {
  if (![self isAreaNumberValidWithInt:area]) @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  [super writeNdefMessageWithInt:area withComStSt25sdkNdefNDEFMsg:msg];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "Z", 0x4, 2, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 3, 1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 11, 3, 1, 12, -1, -1 },
    { NULL, "LComStSt25sdkTagHelper_ReadWriteProtection;", 0x1, 13, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 16, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkNdefNDEFMsg;", 0x1, 17, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[1].selector = @selector(isAreaNumberValidWithInt:);
  methods[2].selector = @selector(getMaxNumberOfAreas);
  methods[3].selector = @selector(getNumberOfAreas);
  methods[4].selector = @selector(setNumberOfAreasWithInt:);
  methods[5].selector = @selector(getAreaSizeInBytesWithInt:);
  methods[6].selector = @selector(getAreaOffsetInBytesWithInt:);
  methods[7].selector = @selector(getAreaOffsetInBlocksWithInt:);
  methods[8].selector = @selector(getAreaFromBlockAddressWithInt:);
  methods[9].selector = @selector(getAreaFromByteAddressWithInt:);
  methods[10].selector = @selector(getAreaPasswordLengthWithInt:);
  methods[11].selector = @selector(getPossibleReadWriteProtectionWithInt:);
  methods[12].selector = @selector(getReadWriteProtectionWithInt:);
  methods[13].selector = @selector(setReadWriteProtectionWithInt:withComStSt25sdkTagHelper_ReadWriteProtection:);
  methods[14].selector = @selector(setReadWriteProtectionWithInt:withComStSt25sdkTagHelper_ReadWriteProtection:withByteArray:);
  methods[15].selector = @selector(readNdefMessageWithInt:);
  methods[16].selector = @selector(writeNdefMessageWithInt:withComStSt25sdkNdefNDEFMsg:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[B", "LComStSt25sdkSTException;", "isAreaNumberValid", "I", "setNumberOfAreas", "getAreaSizeInBytes", "getAreaOffsetInBytes", "getAreaOffsetInBlocks", "getAreaFromBlockAddress", "getAreaFromByteAddress", "getAreaPasswordLength", "getPossibleReadWriteProtection", "(I)Ljava/util/List<Lcom/st/st25sdk/TagHelper$ReadWriteProtection;>;", "getReadWriteProtection", "setReadWriteProtection", "ILComStSt25sdkTagHelper_ReadWriteProtection;", "ILComStSt25sdkTagHelper_ReadWriteProtection;[B", "readNdefMessage", "writeNdefMessage", "ILComStSt25sdkNdefNDEFMsg;" };
  static const J2ObjcClassInfo _ComStSt25sdkType4aSTType4MultiAreaTag = { "STType4MultiAreaTag", "com.st.st25sdk.type4a", ptrTable, methods, NULL, 7, 0x1, 17, 0, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType4aSTType4MultiAreaTag;
}

@end

void ComStSt25sdkType4aSTType4MultiAreaTag_initWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkType4aSTType4MultiAreaTag *self, id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  ComStSt25sdkType4aSTType4Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
}

ComStSt25sdkType4aSTType4MultiAreaTag *new_ComStSt25sdkType4aSTType4MultiAreaTag_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType4aSTType4MultiAreaTag, initWithComStSt25sdkRFReaderInterface_withByteArray_, readerInterface, uid)
}

ComStSt25sdkType4aSTType4MultiAreaTag *create_ComStSt25sdkType4aSTType4MultiAreaTag_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType4aSTType4MultiAreaTag, initWithComStSt25sdkRFReaderInterface_withByteArray_, readerInterface, uid)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType4aSTType4MultiAreaTag)
