//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type4a/FileControlTlvType4.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/type4a/FileControlTlvType4.h"

@interface ComStSt25sdkType4aFileControlTlvType4 () {
 @public
  jbyte mType_;
  jint mLength_;
  jint mFileIdentifier_;
  jint mMaxNdefFileSize_;
  jbyte mReadAccess_;
  jbyte mWriteAccess_;
}

@end

@implementation ComStSt25sdkType4aFileControlTlvType4

+ (jbyte)PERMANENTLY_LOCKED {
  return ComStSt25sdkType4aFileControlTlvType4_PERMANENTLY_LOCKED;
}

+ (jbyte)LOCKED_BY_PASSWORD {
  return ComStSt25sdkType4aFileControlTlvType4_LOCKED_BY_PASSWORD;
}

+ (ComStSt25sdkType4aFileControlTlvType4 *)newInstanceWithByteArray:(IOSByteArray *)buffer {
  return ComStSt25sdkType4aFileControlTlvType4_newInstanceWithByteArray_(buffer);
}

- (instancetype)initWithByte:(jbyte)type
                     withInt:(jint)length {
  ComStSt25sdkType4aFileControlTlvType4_initWithByte_withInt_(self, type, length);
  return self;
}

- (void)parseWithByteArray:(IOSByteArray *)buffer {
  mFileIdentifier_ = (JreLShift32((IOSByteArray_Get(nil_chk(buffer), 2) & (jint) 0xFF), 8)) + (IOSByteArray_Get(buffer, 3) & (jint) 0xFF);
  mMaxNdefFileSize_ = (JreLShift32((IOSByteArray_Get(buffer, 4) & (jint) 0xFF), 8)) + (IOSByteArray_Get(buffer, 5) & (jint) 0xFF);
  mReadAccess_ = IOSByteArray_Get(buffer, 6);
  mWriteAccess_ = IOSByteArray_Get(buffer, 7);
}

- (jbyte)getType {
  return mType_;
}

- (jint)getLength {
  return mLength_;
}

- (jint)getFileId {
  return mFileIdentifier_;
}

- (jint)getMaxFileSize {
  return mMaxNdefFileSize_;
}

- (jbyte)getReadAccess {
  return mReadAccess_;
}

- (jbyte)getWriteAccess {
  return mWriteAccess_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LComStSt25sdkType4aFileControlTlvType4;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(newInstanceWithByteArray:);
  methods[1].selector = @selector(initWithByte:withInt:);
  methods[2].selector = @selector(parseWithByteArray:);
  methods[3].selector = @selector(getType);
  methods[4].selector = @selector(getLength);
  methods[5].selector = @selector(getFileId);
  methods[6].selector = @selector(getMaxFileSize);
  methods[7].selector = @selector(getReadAccess);
  methods[8].selector = @selector(getWriteAccess);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mType_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFileIdentifier_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxNdefFileSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mReadAccess_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWriteAccess_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PERMANENTLY_LOCKED", "B", .constantValue.asChar = ComStSt25sdkType4aFileControlTlvType4_PERMANENTLY_LOCKED, 0x19, -1, -1, -1, -1 },
    { "LOCKED_BY_PASSWORD", "B", .constantValue.asChar = ComStSt25sdkType4aFileControlTlvType4_LOCKED_BY_PASSWORD, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newInstance", "[B", "BI", "parse" };
  static const J2ObjcClassInfo _ComStSt25sdkType4aFileControlTlvType4 = { "FileControlTlvType4", "com.st.st25sdk.type4a", ptrTable, methods, fields, 7, 0x1, 9, 8, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType4aFileControlTlvType4;
}

@end

ComStSt25sdkType4aFileControlTlvType4 *ComStSt25sdkType4aFileControlTlvType4_newInstanceWithByteArray_(IOSByteArray *buffer) {
  ComStSt25sdkType4aFileControlTlvType4_initialize();
  if (((IOSByteArray *) nil_chk(buffer))->size_ != (jint) 0x08) return nil;
  ComStSt25sdkType4aFileControlTlvType4 *tlv = new_ComStSt25sdkType4aFileControlTlvType4_initWithByte_withInt_(IOSByteArray_Get(buffer, 0), ComStSt25sdkHelper_convertByteToUnsignedIntWithByte_(IOSByteArray_Get(buffer, 1)));
  [tlv parseWithByteArray:buffer];
  return tlv;
}

void ComStSt25sdkType4aFileControlTlvType4_initWithByte_withInt_(ComStSt25sdkType4aFileControlTlvType4 *self, jbyte type, jint length) {
  NSObject_init(self);
  self->mType_ = type;
  self->mLength_ = length;
}

ComStSt25sdkType4aFileControlTlvType4 *new_ComStSt25sdkType4aFileControlTlvType4_initWithByte_withInt_(jbyte type, jint length) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType4aFileControlTlvType4, initWithByte_withInt_, type, length)
}

ComStSt25sdkType4aFileControlTlvType4 *create_ComStSt25sdkType4aFileControlTlvType4_initWithByte_withInt_(jbyte type, jint length) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType4aFileControlTlvType4, initWithByte_withInt_, type, length)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType4aFileControlTlvType4)
