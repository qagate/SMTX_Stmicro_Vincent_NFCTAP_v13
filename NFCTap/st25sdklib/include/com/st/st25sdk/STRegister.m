//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/STRegister.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/BitField.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/STRegister.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"

@interface ComStSt25sdkSTRegister_STRegisterField () {
 @public
  ComStSt25sdkSTRegister *this$0_;
  jint mBitStart_;
  jint mBitEnd_;
}

- (void)getBitStartEnd;

@end

__attribute__((unused)) static void ComStSt25sdkSTRegister_STRegisterField_getBitStartEnd(ComStSt25sdkSTRegister_STRegisterField *self);

@interface ComStSt25sdkSTRegister_RegisterListener : NSObject

@end

__attribute__((unused)) static void ComStSt25sdkSTRegister_RegisterAccessRights_initWithNSString_withInt_(ComStSt25sdkSTRegister_RegisterAccessRights *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComStSt25sdkSTRegister_RegisterAccessRights *new_ComStSt25sdkSTRegister_RegisterAccessRights_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void ComStSt25sdkSTRegister_RegisterDataSize_initWithNSString_withInt_(ComStSt25sdkSTRegister_RegisterDataSize *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComStSt25sdkSTRegister_RegisterDataSize *new_ComStSt25sdkSTRegister_RegisterDataSize_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation ComStSt25sdkSTRegister

- (instancetype)initWithInt:(jint)registerFid
                    withInt:(jint)registerPid
               withNSString:(NSString *)registerName
               withNSString:(NSString *)registerContentDescription
withComStSt25sdkSTRegister_RegisterAccessRights:(ComStSt25sdkSTRegister_RegisterAccessRights *)registerAccessRights
withComStSt25sdkSTRegister_RegisterDataSize:(ComStSt25sdkSTRegister_RegisterDataSize *)registerDataSize {
  ComStSt25sdkSTRegister_initWithInt_withInt_withNSString_withNSString_withComStSt25sdkSTRegister_RegisterAccessRights_withComStSt25sdkSTRegister_RegisterDataSize_(self, registerFid, registerPid, registerName, registerContentDescription, registerAccessRights, registerDataSize);
  return self;
}

- (instancetype)initWithInt:(jint)registerAddress
               withNSString:(NSString *)registerName
               withNSString:(NSString *)registerContentDescription
withComStSt25sdkSTRegister_RegisterAccessRights:(ComStSt25sdkSTRegister_RegisterAccessRights *)registerAccessRights
withComStSt25sdkSTRegister_RegisterDataSize:(ComStSt25sdkSTRegister_RegisterDataSize *)registerDataSize {
  ComStSt25sdkSTRegister_initWithInt_withNSString_withNSString_withComStSt25sdkSTRegister_RegisterAccessRights_withComStSt25sdkSTRegister_RegisterDataSize_(self, registerAddress, registerName, registerContentDescription, registerAccessRights, registerDataSize);
  return self;
}

- (jboolean)isExtendedRegisterAddressingModeUsed {
  return mExtendedRegisterAddressingMode_;
}

- (void)createFieldHashWithJavaUtilList:(id<JavaUtilList>)fieldList {
  if (fieldList == nil) {
    return;
  }
  [((JavaUtilLinkedHashMap *) nil_chk(mRegisterFields_)) clear];
  for (ComStSt25sdkSTRegister_STRegisterField * __strong registerField in fieldList) {
    (void) [((JavaUtilLinkedHashMap *) nil_chk(mRegisterFields_)) putWithId:[((ComStSt25sdkSTRegister_STRegisterField *) nil_chk(registerField)) getName] withId:registerField];
  }
}

- (jint)getRegisterAddress {
  return mRegisterAddress_;
}

- (jint)getRegisterParameterAddress {
  return mRegisterParameterAddress_;
}

- (NSString *)getRegisterName {
  return mRegisterName_;
}

- (NSString *)getRegisterContentDescription {
  return mRegisterContentDescription_;
}

- (ComStSt25sdkSTRegister_RegisterAccessRights *)getRegisterAccessRights {
  return mRegisterAccessRights_;
}

- (ComStSt25sdkSTRegister_RegisterDataSize *)getRegisterDataSize {
  return mRegisterDataSize_;
}

- (id<JavaUtilList>)getRegisterFields {
  return new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilLinkedHashMap *) nil_chk(mRegisterFields_)) values]);
}

- (ComStSt25sdkSTRegister_STRegisterField *)getRegisterFieldWithNSString:(NSString *)fieldName {
  ComStSt25sdkSTRegister_STRegisterField *registerField = [((JavaUtilLinkedHashMap *) nil_chk(mRegisterFields_)) getWithId:fieldName];
  if (registerField != nil) {
    return registerField;
  }
  else {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
}

- (jint)getRegisterValue {
  jint registerValue;
  if (![self isCacheActivated] || ![self isCacheValid]) {
    registerValue = [self readTagRegisterValue];
  }
  else {
    registerValue = mRegisterValue_;
  }
  switch ([mRegisterDataSize_ ordinal]) {
    case ComStSt25sdkSTRegister_RegisterDataSize_Enum_REGISTER_DATA_ON_32_BITS:
    registerValue = registerValue & (jint) 0xFFFFFFFF;
    break;
    case ComStSt25sdkSTRegister_RegisterDataSize_Enum_REGISTER_DATA_ON_24_BITS:
    registerValue = registerValue & (jint) 0xFFFFFF;
    break;
    case ComStSt25sdkSTRegister_RegisterDataSize_Enum_REGISTER_DATA_ON_16_BITS:
    registerValue = registerValue & (jint) 0xFFFF;
    break;
    case ComStSt25sdkSTRegister_RegisterDataSize_Enum_REGISTER_DATA_ON_8_BITS:
    registerValue = registerValue & (jint) 0xFF;
    break;
    default:
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
  }
  return registerValue;
}

- (void)setRegisterValueWithInt:(jint)value {
  [self writeRegisterValueWithInt:value];
  mRegisterValue_ = value;
  mCacheInvalidated_ = false;
  [self notifyListeners];
}

- (void)writeRegisterValueWithInt:(jint)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)readTagRegisterValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addRegisterListenerWithComStSt25sdkSTRegister_RegisterListener:(id<ComStSt25sdkSTRegister_RegisterListener>)newListener {
  [((id<JavaUtilList>) nil_chk(mListenerList_)) addWithId:newListener];
}

- (void)notifyListeners {
  ComStSt25sdkSTLog_iWithNSString_(JreStrcat("$$$$", @"Register ", mRegisterName_, @" has changed. New value: 0x", JavaLangInteger_toHexStringWithInt_(mRegisterValue_)));
  for (id<ComStSt25sdkSTRegister_RegisterListener> __strong listener in nil_chk(mListenerList_)) {
    [((id<ComStSt25sdkSTRegister_RegisterListener>) nil_chk(listener)) registerChange];
  }
}

- (void)invalidateCache {
  mCacheInvalidated_ = true;
}

- (void)validateCache {
  mCacheInvalidated_ = false;
}

- (void)activateCache {
  mCacheActivated_ = true;
  mCacheInvalidated_ = true;
}

- (void)deactivateCache {
  mCacheActivated_ = false;
}

- (void)updateCache {
  [self readTagRegisterValue];
}

- (jboolean)isCacheValid {
  return !mCacheInvalidated_;
}

- (jboolean)isCacheActivated {
  return mCacheActivated_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkSTRegister_RegisterAccessRights;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkSTRegister_RegisterDataSize;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LComStSt25sdkSTRegister_STRegisterField;", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 8, -1, -1, -1 },
    { NULL, "V", 0x404, 11, 10, 8, -1, -1, -1 },
    { NULL, "I", 0x404, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withNSString:withNSString:withComStSt25sdkSTRegister_RegisterAccessRights:withComStSt25sdkSTRegister_RegisterDataSize:);
  methods[1].selector = @selector(initWithInt:withNSString:withNSString:withComStSt25sdkSTRegister_RegisterAccessRights:withComStSt25sdkSTRegister_RegisterDataSize:);
  methods[2].selector = @selector(isExtendedRegisterAddressingModeUsed);
  methods[3].selector = @selector(createFieldHashWithJavaUtilList:);
  methods[4].selector = @selector(getRegisterAddress);
  methods[5].selector = @selector(getRegisterParameterAddress);
  methods[6].selector = @selector(getRegisterName);
  methods[7].selector = @selector(getRegisterContentDescription);
  methods[8].selector = @selector(getRegisterAccessRights);
  methods[9].selector = @selector(getRegisterDataSize);
  methods[10].selector = @selector(getRegisterFields);
  methods[11].selector = @selector(getRegisterFieldWithNSString:);
  methods[12].selector = @selector(getRegisterValue);
  methods[13].selector = @selector(setRegisterValueWithInt:);
  methods[14].selector = @selector(writeRegisterValueWithInt:);
  methods[15].selector = @selector(readTagRegisterValue);
  methods[16].selector = @selector(addRegisterListenerWithComStSt25sdkSTRegister_RegisterListener:);
  methods[17].selector = @selector(notifyListeners);
  methods[18].selector = @selector(invalidateCache);
  methods[19].selector = @selector(validateCache);
  methods[20].selector = @selector(activateCache);
  methods[21].selector = @selector(deactivateCache);
  methods[22].selector = @selector(updateCache);
  methods[23].selector = @selector(isCacheValid);
  methods[24].selector = @selector(isCacheActivated);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mExtendedRegisterAddressingMode_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mRegisterAddress_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mRegisterParameterAddress_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mRegisterValue_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mRegisterName_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mRegisterContentDescription_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mRegisterAccessRights_", "LComStSt25sdkSTRegister_RegisterAccessRights;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mRegisterDataSize_", "LComStSt25sdkSTRegister_RegisterDataSize;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mRegisterFields_", "LJavaUtilLinkedHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, 14, -1 },
    { "mCacheActivated_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mCacheInvalidated_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mListenerList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 15, -1 },
  };
  static const void *ptrTable[] = { "IILNSString;LNSString;LComStSt25sdkSTRegister_RegisterAccessRights;LComStSt25sdkSTRegister_RegisterDataSize;", "ILNSString;LNSString;LComStSt25sdkSTRegister_RegisterAccessRights;LComStSt25sdkSTRegister_RegisterDataSize;", "createFieldHash", "LJavaUtilList;", "(Ljava/util/List<Lcom/st/st25sdk/STRegister$STRegisterField;>;)V", "()Ljava/util/List<Lcom/st/st25sdk/STRegister$STRegisterField;>;", "getRegisterField", "LNSString;", "LComStSt25sdkSTException;", "setRegisterValue", "I", "writeRegisterValue", "addRegisterListener", "LComStSt25sdkSTRegister_RegisterListener;", "Ljava/util/LinkedHashMap<Ljava/lang/String;Lcom/st/st25sdk/STRegister$STRegisterField;>;", "Ljava/util/List<Lcom/st/st25sdk/STRegister$RegisterListener;>;", "LComStSt25sdkSTRegister_STRegisterField;LComStSt25sdkSTRegister_RegisterListener;LComStSt25sdkSTRegister_RegisterAccessRights;LComStSt25sdkSTRegister_RegisterDataSize;" };
  static const J2ObjcClassInfo _ComStSt25sdkSTRegister = { "STRegister", "com.st.st25sdk", ptrTable, methods, fields, 7, 0x401, 25, 12, -1, 16, -1, -1, -1 };
  return &_ComStSt25sdkSTRegister;
}

@end

void ComStSt25sdkSTRegister_initWithInt_withInt_withNSString_withNSString_withComStSt25sdkSTRegister_RegisterAccessRights_withComStSt25sdkSTRegister_RegisterDataSize_(ComStSt25sdkSTRegister *self, jint registerFid, jint registerPid, NSString *registerName, NSString *registerContentDescription, ComStSt25sdkSTRegister_RegisterAccessRights *registerAccessRights, ComStSt25sdkSTRegister_RegisterDataSize *registerDataSize) {
  NSObject_init(self);
  self->mListenerList_ = new_JavaUtilArrayList_init();
  self->mRegisterAddress_ = registerFid;
  self->mRegisterParameterAddress_ = registerPid;
  self->mRegisterName_ = registerName;
  self->mRegisterContentDescription_ = registerContentDescription;
  self->mRegisterAccessRights_ = registerAccessRights;
  self->mRegisterDataSize_ = registerDataSize;
  self->mExtendedRegisterAddressingMode_ = true;
  self->mCacheActivated_ = true;
  self->mCacheInvalidated_ = true;
  id<JavaUtilList> fieldList;
  self->mRegisterFields_ = new_JavaUtilLinkedHashMap_init();
  fieldList = new_JavaUtilArrayList_init();
  jint nbOfBit = (registerDataSize == JreLoadEnum(ComStSt25sdkSTRegister_RegisterDataSize, REGISTER_DATA_ON_8_BITS)) ? 8 : 16;
  for (jint i = 0; i < nbOfBit; i++) {
    NSString *fieldName = NSString_java_formatWithNSString_withNSObjectArray_(@"bit%d", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(i) } count:1 type:NSObject_class_()]);
    NSString *fieldDesc = NSString_java_formatWithNSString_withNSObjectArray_(@"bit %d description", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(i) } count:1 type:NSObject_class_()]);
    [fieldList addWithId:new_ComStSt25sdkSTRegister_STRegisterField_initWithComStSt25sdkSTRegister_withNSString_withNSString_withInt_(self, fieldName, fieldDesc, (JreLShift32(1, i)))];
  }
  [self createFieldHashWithJavaUtilList:fieldList];
}

void ComStSt25sdkSTRegister_initWithInt_withNSString_withNSString_withComStSt25sdkSTRegister_RegisterAccessRights_withComStSt25sdkSTRegister_RegisterDataSize_(ComStSt25sdkSTRegister *self, jint registerAddress, NSString *registerName, NSString *registerContentDescription, ComStSt25sdkSTRegister_RegisterAccessRights *registerAccessRights, ComStSt25sdkSTRegister_RegisterDataSize *registerDataSize) {
  ComStSt25sdkSTRegister_initWithInt_withInt_withNSString_withNSString_withComStSt25sdkSTRegister_RegisterAccessRights_withComStSt25sdkSTRegister_RegisterDataSize_(self, registerAddress, 0, registerName, registerContentDescription, registerAccessRights, registerDataSize);
  self->mExtendedRegisterAddressingMode_ = false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkSTRegister)

@implementation ComStSt25sdkSTRegister_STRegisterField

- (instancetype)initWithComStSt25sdkSTRegister:(ComStSt25sdkSTRegister *)outer$
                                  withNSString:(NSString *)name
                                  withNSString:(NSString *)description_
                                       withInt:(jint)mask {
  ComStSt25sdkSTRegister_STRegisterField_initWithComStSt25sdkSTRegister_withNSString_withNSString_withInt_(self, outer$, name, description_, mask);
  return self;
}

- (instancetype)initWithComStSt25sdkSTRegister:(ComStSt25sdkSTRegister *)outer$
                                  withNSString:(NSString *)name
                                  withNSString:(NSString *)description_
                                      withByte:(jbyte)mask {
  ComStSt25sdkSTRegister_STRegisterField_initWithComStSt25sdkSTRegister_withNSString_withNSString_withByte_(self, outer$, name, description_, mask);
  return self;
}

- (NSString *)getName {
  return mName_;
}

- (NSString *)getDescription {
  return mDescription_;
}

- (jint)getMask {
  return mMask_;
}

- (jint)getValue {
  jint registerValue = [this$0_ getRegisterValue];
  return [self computeFieldWithInt:registerValue];
}

- (void)setValueWithInt:(jint)fieldValue {
  jint registerValue = [this$0_ getRegisterValue];
  jint newRegisterValue = [self computeRegisterValueWithInt:registerValue withInt:fieldValue];
  [this$0_ setRegisterValueWithInt:newRegisterValue];
}

- (void)setOtpValueWithInt:(jint)fieldValue {
  jint fieldOffset = [self getBitStart];
  jint otpValue = JreLShift32(fieldValue, fieldOffset);
  jint registerValue = [this$0_ getRegisterValue];
  jint newRegisterValue = registerValue | otpValue;
  [this$0_ writeRegisterValueWithInt:otpValue];
  this$0_->mRegisterValue_ = newRegisterValue;
  this$0_->mCacheInvalidated_ = false;
  [this$0_ notifyListeners];
}

- (jint)computeRegisterValueWithInt:(jint)registerValue
                            withInt:(jint)fieldValue {
  return [((ComStSt25sdkBitField *) nil_chk(mBitField_)) setValueWithInt:registerValue withInt:fieldValue];
}

- (jint)computeFieldWithInt:(jint)registerValue {
  return [((ComStSt25sdkBitField *) nil_chk(mBitField_)) getValueWithInt:registerValue];
}

- (jint)getBitStart {
  return (mBitStart_);
}

- (jint)getBitEnd {
  return (mBitEnd_);
}

- (void)getBitStartEnd {
  ComStSt25sdkSTRegister_STRegisterField_getBitStartEnd(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, 2, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkSTRegister:withNSString:withNSString:withInt:);
  methods[1].selector = @selector(initWithComStSt25sdkSTRegister:withNSString:withNSString:withByte:);
  methods[2].selector = @selector(getName);
  methods[3].selector = @selector(getDescription);
  methods[4].selector = @selector(getMask);
  methods[5].selector = @selector(getValue);
  methods[6].selector = @selector(setValueWithInt:);
  methods[7].selector = @selector(setOtpValueWithInt:);
  methods[8].selector = @selector(computeRegisterValueWithInt:withInt:);
  methods[9].selector = @selector(computeFieldWithInt:);
  methods[10].selector = @selector(getBitStart);
  methods[11].selector = @selector(getBitEnd);
  methods[12].selector = @selector(getBitStartEnd);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComStSt25sdkSTRegister;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "mName_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mDescription_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mMask_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mBitField_", "LComStSt25sdkBitField;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mBitStart_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBitEnd_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;I", "LNSString;LNSString;B", "LComStSt25sdkSTException;", "setValue", "I", "setOtpValue", "computeRegisterValue", "II", "computeField", "LComStSt25sdkSTRegister;" };
  static const J2ObjcClassInfo _ComStSt25sdkSTRegister_STRegisterField = { "STRegisterField", "com.st.st25sdk", ptrTable, methods, fields, 7, 0x1, 13, 7, 9, -1, -1, -1, -1 };
  return &_ComStSt25sdkSTRegister_STRegisterField;
}

@end

void ComStSt25sdkSTRegister_STRegisterField_initWithComStSt25sdkSTRegister_withNSString_withNSString_withInt_(ComStSt25sdkSTRegister_STRegisterField *self, ComStSt25sdkSTRegister *outer$, NSString *name, NSString *description_, jint mask) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->mBitStart_ = -1;
  self->mBitEnd_ = 0;
  self->mName_ = name;
  self->mDescription_ = description_;
  self->mMask_ = mask;
  self->mBitField_ = new_ComStSt25sdkBitField_initWithInt_(mask);
  ComStSt25sdkSTRegister_STRegisterField_getBitStartEnd(self);
}

ComStSt25sdkSTRegister_STRegisterField *new_ComStSt25sdkSTRegister_STRegisterField_initWithComStSt25sdkSTRegister_withNSString_withNSString_withInt_(ComStSt25sdkSTRegister *outer$, NSString *name, NSString *description_, jint mask) {
  J2OBJC_NEW_IMPL(ComStSt25sdkSTRegister_STRegisterField, initWithComStSt25sdkSTRegister_withNSString_withNSString_withInt_, outer$, name, description_, mask)
}

ComStSt25sdkSTRegister_STRegisterField *create_ComStSt25sdkSTRegister_STRegisterField_initWithComStSt25sdkSTRegister_withNSString_withNSString_withInt_(ComStSt25sdkSTRegister *outer$, NSString *name, NSString *description_, jint mask) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkSTRegister_STRegisterField, initWithComStSt25sdkSTRegister_withNSString_withNSString_withInt_, outer$, name, description_, mask)
}

void ComStSt25sdkSTRegister_STRegisterField_initWithComStSt25sdkSTRegister_withNSString_withNSString_withByte_(ComStSt25sdkSTRegister_STRegisterField *self, ComStSt25sdkSTRegister *outer$, NSString *name, NSString *description_, jbyte mask) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->mBitStart_ = -1;
  self->mBitEnd_ = 0;
  self->mName_ = name;
  self->mDescription_ = description_;
  self->mMask_ = mask & (jint) 0xFF;
  self->mBitField_ = new_ComStSt25sdkBitField_initWithInt_(mask);
  ComStSt25sdkSTRegister_STRegisterField_getBitStartEnd(self);
}

ComStSt25sdkSTRegister_STRegisterField *new_ComStSt25sdkSTRegister_STRegisterField_initWithComStSt25sdkSTRegister_withNSString_withNSString_withByte_(ComStSt25sdkSTRegister *outer$, NSString *name, NSString *description_, jbyte mask) {
  J2OBJC_NEW_IMPL(ComStSt25sdkSTRegister_STRegisterField, initWithComStSt25sdkSTRegister_withNSString_withNSString_withByte_, outer$, name, description_, mask)
}

ComStSt25sdkSTRegister_STRegisterField *create_ComStSt25sdkSTRegister_STRegisterField_initWithComStSt25sdkSTRegister_withNSString_withNSString_withByte_(ComStSt25sdkSTRegister *outer$, NSString *name, NSString *description_, jbyte mask) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkSTRegister_STRegisterField, initWithComStSt25sdkSTRegister_withNSString_withNSString_withByte_, outer$, name, description_, mask)
}

void ComStSt25sdkSTRegister_STRegisterField_getBitStartEnd(ComStSt25sdkSTRegister_STRegisterField *self) {
  jint maskSize = 8;
  if (self->mMask_ < 0 || self->mMask_ > (jint) 0xffffff) {
    maskSize = 32;
  }
  else if (self->mMask_ > (jint) 0xffff) {
    maskSize = 24;
  }
  else if (self->mMask_ > (jint) 0xff) {
    maskSize = 16;
  }
  for (jint i = 0; i < maskSize; i++) {
    if ((self->mMask_ & (JreLShift64(1LL, i))) != 0) {
      if (self->mBitStart_ == -1) {
        self->mBitStart_ = i;
      }
      self->mBitEnd_ = i;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkSTRegister_STRegisterField)

@implementation ComStSt25sdkSTRegister_RegisterListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(registerChange);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComStSt25sdkSTException;", "LComStSt25sdkSTRegister;" };
  static const J2ObjcClassInfo _ComStSt25sdkSTRegister_RegisterListener = { "RegisterListener", "com.st.st25sdk", ptrTable, methods, NULL, 7, 0x609, 1, 0, 1, -1, -1, -1, -1 };
  return &_ComStSt25sdkSTRegister_RegisterListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComStSt25sdkSTRegister_RegisterListener)

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkSTRegister_RegisterAccessRights)

ComStSt25sdkSTRegister_RegisterAccessRights *ComStSt25sdkSTRegister_RegisterAccessRights_values_[3];

@implementation ComStSt25sdkSTRegister_RegisterAccessRights

+ (ComStSt25sdkSTRegister_RegisterAccessRights *)REGISTER_READ_ONLY {
  return JreEnum(ComStSt25sdkSTRegister_RegisterAccessRights, REGISTER_READ_ONLY);
}

+ (ComStSt25sdkSTRegister_RegisterAccessRights *)REGISTER_READ_WRITE {
  return JreEnum(ComStSt25sdkSTRegister_RegisterAccessRights, REGISTER_READ_WRITE);
}

+ (ComStSt25sdkSTRegister_RegisterAccessRights *)REGISTER_READ_WRITE_OTP {
  return JreEnum(ComStSt25sdkSTRegister_RegisterAccessRights, REGISTER_READ_WRITE_OTP);
}

+ (IOSObjectArray *)values {
  return ComStSt25sdkSTRegister_RegisterAccessRights_values();
}

+ (ComStSt25sdkSTRegister_RegisterAccessRights *)valueOfWithNSString:(NSString *)name {
  return ComStSt25sdkSTRegister_RegisterAccessRights_valueOfWithNSString_(name);
}

- (ComStSt25sdkSTRegister_RegisterAccessRights_Enum)toNSEnum {
  return (ComStSt25sdkSTRegister_RegisterAccessRights_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComStSt25sdkSTRegister_RegisterAccessRights;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkSTRegister_RegisterAccessRights;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "REGISTER_READ_ONLY", "LComStSt25sdkSTRegister_RegisterAccessRights;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "REGISTER_READ_WRITE", "LComStSt25sdkSTRegister_RegisterAccessRights;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "REGISTER_READ_WRITE_OTP", "LComStSt25sdkSTRegister_RegisterAccessRights;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComStSt25sdkSTRegister_RegisterAccessRights, REGISTER_READ_ONLY), &JreEnum(ComStSt25sdkSTRegister_RegisterAccessRights, REGISTER_READ_WRITE), &JreEnum(ComStSt25sdkSTRegister_RegisterAccessRights, REGISTER_READ_WRITE_OTP), "LComStSt25sdkSTRegister;", "Ljava/lang/Enum<Lcom/st/st25sdk/STRegister$RegisterAccessRights;>;" };
  static const J2ObjcClassInfo _ComStSt25sdkSTRegister_RegisterAccessRights = { "RegisterAccessRights", "com.st.st25sdk", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_ComStSt25sdkSTRegister_RegisterAccessRights;
}

+ (void)initialize {
  if (self == [ComStSt25sdkSTRegister_RegisterAccessRights class]) {
    JreEnum(ComStSt25sdkSTRegister_RegisterAccessRights, REGISTER_READ_ONLY) = new_ComStSt25sdkSTRegister_RegisterAccessRights_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTRegister_RegisterAccessRights_class_(), 0), 0);
    JreEnum(ComStSt25sdkSTRegister_RegisterAccessRights, REGISTER_READ_WRITE) = new_ComStSt25sdkSTRegister_RegisterAccessRights_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTRegister_RegisterAccessRights_class_(), 1), 1);
    JreEnum(ComStSt25sdkSTRegister_RegisterAccessRights, REGISTER_READ_WRITE_OTP) = new_ComStSt25sdkSTRegister_RegisterAccessRights_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTRegister_RegisterAccessRights_class_(), 2), 2);
    J2OBJC_SET_INITIALIZED(ComStSt25sdkSTRegister_RegisterAccessRights)
  }
}

@end

void ComStSt25sdkSTRegister_RegisterAccessRights_initWithNSString_withInt_(ComStSt25sdkSTRegister_RegisterAccessRights *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComStSt25sdkSTRegister_RegisterAccessRights *new_ComStSt25sdkSTRegister_RegisterAccessRights_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComStSt25sdkSTRegister_RegisterAccessRights, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComStSt25sdkSTRegister_RegisterAccessRights_values() {
  ComStSt25sdkSTRegister_RegisterAccessRights_initialize();
  return [IOSObjectArray arrayWithObjects:ComStSt25sdkSTRegister_RegisterAccessRights_values_ count:3 type:ComStSt25sdkSTRegister_RegisterAccessRights_class_()];
}

ComStSt25sdkSTRegister_RegisterAccessRights *ComStSt25sdkSTRegister_RegisterAccessRights_valueOfWithNSString_(NSString *name) {
  ComStSt25sdkSTRegister_RegisterAccessRights_initialize();
  for (int i = 0; i < 3; i++) {
    ComStSt25sdkSTRegister_RegisterAccessRights *e = ComStSt25sdkSTRegister_RegisterAccessRights_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComStSt25sdkSTRegister_RegisterAccessRights *ComStSt25sdkSTRegister_RegisterAccessRights_fromOrdinal(NSUInteger ordinal) {
  ComStSt25sdkSTRegister_RegisterAccessRights_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return ComStSt25sdkSTRegister_RegisterAccessRights_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkSTRegister_RegisterAccessRights)

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkSTRegister_RegisterDataSize)

ComStSt25sdkSTRegister_RegisterDataSize *ComStSt25sdkSTRegister_RegisterDataSize_values_[4];

@implementation ComStSt25sdkSTRegister_RegisterDataSize

+ (ComStSt25sdkSTRegister_RegisterDataSize *)REGISTER_DATA_ON_8_BITS {
  return JreEnum(ComStSt25sdkSTRegister_RegisterDataSize, REGISTER_DATA_ON_8_BITS);
}

+ (ComStSt25sdkSTRegister_RegisterDataSize *)REGISTER_DATA_ON_16_BITS {
  return JreEnum(ComStSt25sdkSTRegister_RegisterDataSize, REGISTER_DATA_ON_16_BITS);
}

+ (ComStSt25sdkSTRegister_RegisterDataSize *)REGISTER_DATA_ON_24_BITS {
  return JreEnum(ComStSt25sdkSTRegister_RegisterDataSize, REGISTER_DATA_ON_24_BITS);
}

+ (ComStSt25sdkSTRegister_RegisterDataSize *)REGISTER_DATA_ON_32_BITS {
  return JreEnum(ComStSt25sdkSTRegister_RegisterDataSize, REGISTER_DATA_ON_32_BITS);
}

+ (IOSObjectArray *)values {
  return ComStSt25sdkSTRegister_RegisterDataSize_values();
}

+ (ComStSt25sdkSTRegister_RegisterDataSize *)valueOfWithNSString:(NSString *)name {
  return ComStSt25sdkSTRegister_RegisterDataSize_valueOfWithNSString_(name);
}

- (ComStSt25sdkSTRegister_RegisterDataSize_Enum)toNSEnum {
  return (ComStSt25sdkSTRegister_RegisterDataSize_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComStSt25sdkSTRegister_RegisterDataSize;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkSTRegister_RegisterDataSize;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "REGISTER_DATA_ON_8_BITS", "LComStSt25sdkSTRegister_RegisterDataSize;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "REGISTER_DATA_ON_16_BITS", "LComStSt25sdkSTRegister_RegisterDataSize;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "REGISTER_DATA_ON_24_BITS", "LComStSt25sdkSTRegister_RegisterDataSize;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "REGISTER_DATA_ON_32_BITS", "LComStSt25sdkSTRegister_RegisterDataSize;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComStSt25sdkSTRegister_RegisterDataSize, REGISTER_DATA_ON_8_BITS), &JreEnum(ComStSt25sdkSTRegister_RegisterDataSize, REGISTER_DATA_ON_16_BITS), &JreEnum(ComStSt25sdkSTRegister_RegisterDataSize, REGISTER_DATA_ON_24_BITS), &JreEnum(ComStSt25sdkSTRegister_RegisterDataSize, REGISTER_DATA_ON_32_BITS), "LComStSt25sdkSTRegister;", "Ljava/lang/Enum<Lcom/st/st25sdk/STRegister$RegisterDataSize;>;" };
  static const J2ObjcClassInfo _ComStSt25sdkSTRegister_RegisterDataSize = { "RegisterDataSize", "com.st.st25sdk", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_ComStSt25sdkSTRegister_RegisterDataSize;
}

+ (void)initialize {
  if (self == [ComStSt25sdkSTRegister_RegisterDataSize class]) {
    JreEnum(ComStSt25sdkSTRegister_RegisterDataSize, REGISTER_DATA_ON_8_BITS) = new_ComStSt25sdkSTRegister_RegisterDataSize_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTRegister_RegisterDataSize_class_(), 0), 0);
    JreEnum(ComStSt25sdkSTRegister_RegisterDataSize, REGISTER_DATA_ON_16_BITS) = new_ComStSt25sdkSTRegister_RegisterDataSize_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTRegister_RegisterDataSize_class_(), 1), 1);
    JreEnum(ComStSt25sdkSTRegister_RegisterDataSize, REGISTER_DATA_ON_24_BITS) = new_ComStSt25sdkSTRegister_RegisterDataSize_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTRegister_RegisterDataSize_class_(), 2), 2);
    JreEnum(ComStSt25sdkSTRegister_RegisterDataSize, REGISTER_DATA_ON_32_BITS) = new_ComStSt25sdkSTRegister_RegisterDataSize_initWithNSString_withInt_(JreEnumConstantName(ComStSt25sdkSTRegister_RegisterDataSize_class_(), 3), 3);
    J2OBJC_SET_INITIALIZED(ComStSt25sdkSTRegister_RegisterDataSize)
  }
}

@end

void ComStSt25sdkSTRegister_RegisterDataSize_initWithNSString_withInt_(ComStSt25sdkSTRegister_RegisterDataSize *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComStSt25sdkSTRegister_RegisterDataSize *new_ComStSt25sdkSTRegister_RegisterDataSize_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComStSt25sdkSTRegister_RegisterDataSize, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComStSt25sdkSTRegister_RegisterDataSize_values() {
  ComStSt25sdkSTRegister_RegisterDataSize_initialize();
  return [IOSObjectArray arrayWithObjects:ComStSt25sdkSTRegister_RegisterDataSize_values_ count:4 type:ComStSt25sdkSTRegister_RegisterDataSize_class_()];
}

ComStSt25sdkSTRegister_RegisterDataSize *ComStSt25sdkSTRegister_RegisterDataSize_valueOfWithNSString_(NSString *name) {
  ComStSt25sdkSTRegister_RegisterDataSize_initialize();
  for (int i = 0; i < 4; i++) {
    ComStSt25sdkSTRegister_RegisterDataSize *e = ComStSt25sdkSTRegister_RegisterDataSize_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComStSt25sdkSTRegister_RegisterDataSize *ComStSt25sdkSTRegister_RegisterDataSize_fromOrdinal(NSUInteger ordinal) {
  ComStSt25sdkSTRegister_RegisterDataSize_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return ComStSt25sdkSTRegister_RegisterDataSize_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkSTRegister_RegisterDataSize)
