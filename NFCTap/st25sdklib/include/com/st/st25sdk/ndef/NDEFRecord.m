//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/ndef/NDEFRecord.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/ndef/NDEFRecord.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Short.h"
#include "java/lang/System.h"
#include "java/nio/ByteBuffer.h"
#include "java/util/Arrays.h"
#include "java/util/Objects.h"

@interface ComStSt25sdkNdefNDEFRecord () {
 @public
  jboolean mMB_;
  jboolean mME_;
  jboolean mCF_;
  jboolean mSR_;
  jboolean mIL_;
  jshort mTnf_;
  jint mTypeLength_;
  jint mIDLength_;
  IOSByteArray *mType_;
  IOSByteArray *mID_;
  IOSByteArray *mPayload_;
}

- (void)ndefRecordInitWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)byteArrayInputStream;

- (jbyte)readNextByteWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)byteArrayInputStream;

- (IOSByteArray *)readNextBytesWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)byteArrayInputStream
                                                      withInt:(jint)offset
                                                      withInt:(jint)length;

@end

J2OBJC_FIELD_SETTER(ComStSt25sdkNdefNDEFRecord, mType_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComStSt25sdkNdefNDEFRecord, mID_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComStSt25sdkNdefNDEFRecord, mPayload_, IOSByteArray *)

__attribute__((unused)) static void ComStSt25sdkNdefNDEFRecord_ndefRecordInitWithJavaIoByteArrayInputStream_(ComStSt25sdkNdefNDEFRecord *self, JavaIoByteArrayInputStream *byteArrayInputStream);

__attribute__((unused)) static jbyte ComStSt25sdkNdefNDEFRecord_readNextByteWithJavaIoByteArrayInputStream_(ComStSt25sdkNdefNDEFRecord *self, JavaIoByteArrayInputStream *byteArrayInputStream);

__attribute__((unused)) static IOSByteArray *ComStSt25sdkNdefNDEFRecord_readNextBytesWithJavaIoByteArrayInputStream_withInt_withInt_(ComStSt25sdkNdefNDEFRecord *self, JavaIoByteArrayInputStream *byteArrayInputStream, jint offset, jint length);

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkNdefNDEFRecord)

jboolean ComStSt25sdkNdefNDEFRecord_DBG_NDEF_RECORD = false;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_TEXT;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_URI;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_SMART_POSTER;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_COLLISION_RESOLUTION;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_ALTERNATIVE_CARRIER;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_CARRIER;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_REQUEST;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_SELECT;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_MEDIATION;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_INITIATE;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_TNEP_SERVICE_PARAMETER;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_TNEP_SERVICE_SELECT;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_TNEP_STATUS;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_ANDROID_APP;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_BTLE_APP;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_BT_APP;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_VCARD_APP;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_VCARD_APP2;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_VCARD_APP3;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_WIFI_APP;
IOSByteArray *ComStSt25sdkNdefNDEFRecord_RTD_SMS;

@implementation ComStSt25sdkNdefNDEFRecord

+ (jboolean)DBG_NDEF_RECORD {
  return ComStSt25sdkNdefNDEFRecord_DBG_NDEF_RECORD;
}

+ (void)setDBG_NDEF_RECORD:(jboolean)value {
  ComStSt25sdkNdefNDEFRecord_DBG_NDEF_RECORD = value;
}

+ (IOSByteArray *)RTD_TEXT {
  return ComStSt25sdkNdefNDEFRecord_RTD_TEXT;
}

+ (IOSByteArray *)RTD_URI {
  return ComStSt25sdkNdefNDEFRecord_RTD_URI;
}

+ (IOSByteArray *)RTD_SMART_POSTER {
  return ComStSt25sdkNdefNDEFRecord_RTD_SMART_POSTER;
}

+ (IOSByteArray *)RTD_COLLISION_RESOLUTION {
  return ComStSt25sdkNdefNDEFRecord_RTD_COLLISION_RESOLUTION;
}

+ (IOSByteArray *)RTD_ALTERNATIVE_CARRIER {
  return ComStSt25sdkNdefNDEFRecord_RTD_ALTERNATIVE_CARRIER;
}

+ (IOSByteArray *)RTD_HANDOVER_CARRIER {
  return ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_CARRIER;
}

+ (IOSByteArray *)RTD_HANDOVER_REQUEST {
  return ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_REQUEST;
}

+ (IOSByteArray *)RTD_HANDOVER_SELECT {
  return ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_SELECT;
}

+ (IOSByteArray *)RTD_HANDOVER_MEDIATION {
  return ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_MEDIATION;
}

+ (IOSByteArray *)RTD_HANDOVER_INITIATE {
  return ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_INITIATE;
}

+ (IOSByteArray *)RTD_TNEP_SERVICE_PARAMETER {
  return ComStSt25sdkNdefNDEFRecord_RTD_TNEP_SERVICE_PARAMETER;
}

+ (IOSByteArray *)RTD_TNEP_SERVICE_SELECT {
  return ComStSt25sdkNdefNDEFRecord_RTD_TNEP_SERVICE_SELECT;
}

+ (IOSByteArray *)RTD_TNEP_STATUS {
  return ComStSt25sdkNdefNDEFRecord_RTD_TNEP_STATUS;
}

+ (IOSByteArray *)RTD_ANDROID_APP {
  return ComStSt25sdkNdefNDEFRecord_RTD_ANDROID_APP;
}

+ (IOSByteArray *)RTD_BTLE_APP {
  return ComStSt25sdkNdefNDEFRecord_RTD_BTLE_APP;
}

+ (IOSByteArray *)RTD_BT_APP {
  return ComStSt25sdkNdefNDEFRecord_RTD_BT_APP;
}

+ (IOSByteArray *)RTD_VCARD_APP {
  return ComStSt25sdkNdefNDEFRecord_RTD_VCARD_APP;
}

+ (IOSByteArray *)RTD_VCARD_APP2 {
  return ComStSt25sdkNdefNDEFRecord_RTD_VCARD_APP2;
}

+ (IOSByteArray *)RTD_VCARD_APP3 {
  return ComStSt25sdkNdefNDEFRecord_RTD_VCARD_APP3;
}

+ (IOSByteArray *)RTD_WIFI_APP {
  return ComStSt25sdkNdefNDEFRecord_RTD_WIFI_APP;
}

+ (IOSByteArray *)RTD_SMS {
  return ComStSt25sdkNdefNDEFRecord_RTD_SMS;
}

+ (jshort)TNF_EMPTY {
  return ComStSt25sdkNdefNDEFRecord_TNF_EMPTY;
}

+ (jshort)TNF_WELLKNOWN {
  return ComStSt25sdkNdefNDEFRecord_TNF_WELLKNOWN;
}

+ (jshort)TNF_MEDIA {
  return ComStSt25sdkNdefNDEFRecord_TNF_MEDIA;
}

+ (jshort)TNF_URI {
  return ComStSt25sdkNdefNDEFRecord_TNF_URI;
}

+ (jshort)TNF_EXTERNAL {
  return ComStSt25sdkNdefNDEFRecord_TNF_EXTERNAL;
}

+ (jshort)TNF_UNKNOWN {
  return ComStSt25sdkNdefNDEFRecord_TNF_UNKNOWN;
}

+ (jshort)TNF_UNCHANGED {
  return ComStSt25sdkNdefNDEFRecord_TNF_UNCHANGED;
}

+ (jshort)TNF_RFU {
  return ComStSt25sdkNdefNDEFRecord_TNF_RFU;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComStSt25sdkNdefNDEFRecord_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithComStSt25sdkNdefNDEFRecord:(ComStSt25sdkNdefNDEFRecord *)record {
  ComStSt25sdkNdefNDEFRecord_initWithComStSt25sdkNdefNDEFRecord_(self, record);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)buffer {
  ComStSt25sdkNdefNDEFRecord_initWithByteArray_(self, buffer);
  return self;
}

- (instancetype)initWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)inputStream {
  ComStSt25sdkNdefNDEFRecord_initWithJavaIoByteArrayInputStream_(self, inputStream);
  return self;
}

- (jint)getSize {
  jint payloadLength = [self getPayloadLength];
  jint size = 1 + 1 + mTypeLength_;
  if (mIL_) {
    size += 1 + mIDLength_;
  }
  if ((payloadLength > 255) && mSR_) {
    @throw new_JavaLangException_initWithNSString_(@"Record bad formatted");
  }
  size += payloadLength;
  if (mSR_) {
    return size + 1;
  }
  else {
    return size + 4;
  }
}

- (void)ndefRecordInitWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)byteArrayInputStream {
  ComStSt25sdkNdefNDEFRecord_ndefRecordInitWithJavaIoByteArrayInputStream_(self, byteArrayInputStream);
}

- (void)setMBWithBoolean:(jboolean)flag {
  mMB_ = flag;
}

- (jboolean)getMB {
  return mMB_;
}

- (void)setMEWithBoolean:(jboolean)flag {
  mME_ = flag;
}

- (jboolean)getME {
  return mME_;
}

- (void)setCFWithBoolean:(jboolean)flag {
  mCF_ = flag;
}

- (jboolean)getCF {
  return mCF_;
}

- (void)setSRWithBoolean:(jboolean)flag {
  if (flag && ([self getPayloadLength] > 255)) {
    @throw new_JavaLangException_initWithNSString_(@"Payload too long");
  }
  mSR_ = flag;
}

- (void)setSR {
  jint payloadLength;
  @try {
    payloadLength = [self getPayloadLength];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    return;
  }
  mSR_ = (payloadLength <= 255);
}

- (jboolean)getSR {
  return mSR_;
}

- (void)setILWithBoolean:(jboolean)flag {
  mIL_ = flag;
}

- (jboolean)getIL {
  return mIL_;
}

- (void)setTnfWithShort:(jshort)tnf {
  mTnf_ = tnf;
}

- (jshort)getTnf {
  return mTnf_;
}

- (void)setTypeLengthWithInt:(jint)length {
  mTypeLength_ = length;
}

- (jint)getTypeLength {
  return mTypeLength_;
}

- (void)setTypeWithByteArray:(IOSByteArray *)type {
  mType_ = JavaUtilArrays_copyOfWithByteArray_withInt_(type, ((IOSByteArray *) nil_chk(type))->size_);
  mTypeLength_ = type->size_;
}

- (IOSByteArray *)getType {
  return mType_;
}

- (void)setIDLengthWithInt:(jint)length {
  mIDLength_ = length;
  if (length != 0) {
    [self setILWithBoolean:true];
  }
}

- (jint)getIDLength {
  return mIDLength_;
}

- (void)setIdWithByteArray:(IOSByteArray *)id_ {
  mID_ = JavaUtilArrays_copyOfWithByteArray_withInt_(id_, ((IOSByteArray *) nil_chk(id_))->size_);
  mIDLength_ = id_->size_;
  [self setILWithBoolean:true];
}

- (IOSByteArray *)getID {
  return mID_;
}

- (jint)getPayloadLength {
  IOSByteArray *payload = [self getPayload];
  if (payload != nil) {
    return payload->size_;
  }
  else {
    return 0;
  }
}

- (IOSByteArray *)getPayload {
  return mPayload_;
}

- (void)setPayloadWithByteArray:(IOSByteArray *)payload {
  mPayload_ = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(payload))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(payload, 0, mPayload_, 0, payload->size_);
}

- (IOSByteArray *)serialize {
  jbyte header = (jbyte) (jint) 0x00;
  jbyte idLength = (jbyte) (jint) 0x00;
  jbyte typeLength = (jbyte) (mTypeLength_ & (jint) 0xFF);
  jint ndefLength = 2;
  header |= (jbyte) mTnf_;
  IOSByteArray *payload = [self getPayload];
  jint payloadLength;
  if (payload != nil) {
    payloadLength = payload->size_;
  }
  else {
    payloadLength = 0;
  }
  if (payloadLength > 255) {
    mSR_ = false;
  }
  if (mMB_) {
    header |= (jbyte) (jint) 0x80;
  }
  else {
    header &= (jbyte) (jint) 0x7F;
  }
  if (mME_) {
    header |= (jbyte) (jint) 0x40;
  }
  else {
    header &= (jbyte) (jint) 0xBF;
  }
  if (mCF_) {
    header |= (jbyte) (jint) 0x20;
  }
  else {
    header &= (jbyte) (jint) 0xDF;
  }
  if (mSR_) {
    header |= (jbyte) (jint) 0x10;
    ndefLength++;
  }
  else {
    header &= (jbyte) (jint) 0xEF;
    ndefLength += 4;
  }
  if (mIL_) {
    header |= (jbyte) (jint) 0x08;
    idLength = (jbyte) mIDLength_;
    ndefLength += 1;
  }
  else {
    header &= (jbyte) (jint) 0xF7;
  }
  if (mTnf_ == ComStSt25sdkNdefNDEFRecord_TNF_EMPTY) {
    return [IOSByteArray newArrayWithBytes:(jbyte[]){ header, (jint) 0x00, (jint) 0x00 } count:3];
  }
  if (mType_ != nil) {
    ndefLength += mType_->size_;
  }
  if (mID_ != nil) {
    ndefLength += mID_->size_;
  }
  if (payload != nil) {
    ndefLength += payloadLength;
  }
  JavaNioByteBuffer *byteBuffer = JavaNioByteBuffer_allocateWithInt_(ndefLength);
  (void) [((JavaNioByteBuffer *) nil_chk(byteBuffer)) putWithByte:header];
  (void) [byteBuffer putWithByte:typeLength];
  if (mSR_) {
    (void) [byteBuffer putWithByte:(jbyte) (payloadLength & (jint) 0xFF)];
  }
  else {
    IOSByteArray *payloadLengthField = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x00, (jint) 0x00, (jint) 0x00, (jint) 0x00 } count:4];
    *IOSByteArray_GetRef(payloadLengthField, 0) = (jbyte) (JreRShift32((payloadLength & (jint) 0xFF000000), 24));
    *IOSByteArray_GetRef(payloadLengthField, 1) = (jbyte) (JreRShift32((payloadLength & (jint) 0x00FF0000), 16));
    *IOSByteArray_GetRef(payloadLengthField, 2) = (jbyte) (JreRShift32((payloadLength & (jint) 0x0000FF00), 8));
    *IOSByteArray_GetRef(payloadLengthField, 3) = (jbyte) ((payloadLength & (jint) 0x000000FF));
    (void) [byteBuffer putWithByteArray:payloadLengthField];
  }
  if (mIL_) {
    (void) [byteBuffer putWithByte:(jbyte) (idLength & (jint) 0xFF)];
  }
  if (mType_ != nil) {
    (void) [byteBuffer putWithByteArray:mType_];
  }
  if (mID_ != nil) {
    (void) [byteBuffer putWithByteArray:mID_];
  }
  if (payload != nil) {
    (void) [byteBuffer putWithByteArray:payload];
  }
  return [byteBuffer array];
}

- (jbyte)readNextByteWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)byteArrayInputStream {
  return ComStSt25sdkNdefNDEFRecord_readNextByteWithJavaIoByteArrayInputStream_(self, byteArrayInputStream);
}

- (IOSByteArray *)readNextBytesWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)byteArrayInputStream
                                                      withInt:(jint)offset
                                                      withInt:(jint)length {
  return ComStSt25sdkNdefNDEFRecord_readNextBytesWithJavaIoByteArrayInputStream_withInt_withInt_(self, byteArrayInputStream, offset, length);
}

- (void)dbgCheckNdefRecordContentWithByteArray:(IOSByteArray *)originalPayload {
  IOSByteArray *currentPayload = [IOSByteArray newArrayWithLength:0];
  @try {
    currentPayload = [self getPayload];
    if (!JavaUtilArrays_equalsWithByteArray_withByteArray_(currentPayload, originalPayload)) {
      ComStSt25sdkSTLog_wWithNSString_(@" ");
      ComStSt25sdkSTLog_wWithNSString_(JreStrcat("$@$", @"Warning! ", self, @" doesn't look the same as the record that has been used to generate it!"));
      ComStSt25sdkSTLog_wWithNSString_(JreStrcat("$$", @"Original payload : ", ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(originalPayload)));
      ComStSt25sdkSTLog_wWithNSString_(JreStrcat("$$", @"Record payload   : ", ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(currentPayload)));
      ComStSt25sdkSTLog_wWithNSString_(@" ");
    }
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
  }
}

- (NSString *)description {
  NSString *txt = @"";
  switch (mTnf_) {
    case ComStSt25sdkNdefNDEFRecord_TNF_EMPTY:
    (void) JreStrAppendStrong(&txt, "$", @"- TNF : Empty");
    break;
    case ComStSt25sdkNdefNDEFRecord_TNF_WELLKNOWN:
    (void) JreStrAppendStrong(&txt, "$", @"- TNF : Well Known");
    break;
    case ComStSt25sdkNdefNDEFRecord_TNF_MEDIA:
    (void) JreStrAppendStrong(&txt, "$", @"- TNF : Media");
    break;
    case ComStSt25sdkNdefNDEFRecord_TNF_URI:
    (void) JreStrAppendStrong(&txt, "$", @"- TNF : URI");
    break;
    case ComStSt25sdkNdefNDEFRecord_TNF_EXTERNAL:
    (void) JreStrAppendStrong(&txt, "$", @"- TNF : External");
    break;
    default:
    case ComStSt25sdkNdefNDEFRecord_TNF_UNKNOWN:
    (void) JreStrAppendStrong(&txt, "$", @"- TNF : Unknown");
    break;
    case ComStSt25sdkNdefNDEFRecord_TNF_UNCHANGED:
    (void) JreStrAppendStrong(&txt, "$", @"- TNF : Unchanged");
    break;
    case ComStSt25sdkNdefNDEFRecord_TNF_RFU:
    (void) JreStrAppendStrong(&txt, "$", @"- TNF : RFU");
    break;
  }
  (void) JreStrAppendStrong(&txt, "$", @"\n");
  (void) JreStrAppendStrong(&txt, "$", @"- Flags set: ");
  if (mMB_) (void) JreStrAppendStrong(&txt, "$", @"MB ");
  if (mME_) (void) JreStrAppendStrong(&txt, "$", @"ME ");
  if (mCF_) (void) JreStrAppendStrong(&txt, "$", @"CF ");
  if (mSR_) (void) JreStrAppendStrong(&txt, "$", @"SR ");
  if (mIL_) (void) JreStrAppendStrong(&txt, "$", @"IL ");
  (void) JreStrAppendStrong(&txt, "$", @"\n");
  (void) JreStrAppendStrong(&txt, "$IC", @"- Type Length: ", mTypeLength_, 0x000a);
  if (mTypeLength_ > 0) {
    (void) JreStrAppendStrong(&txt, "$$C", @"- Type (hex) : ", ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(mType_), 0x000a);
  }
  (void) JreStrAppendStrong(&txt, "$IC", @"- ID Length : ", mIDLength_, 0x000a);
  if (mIL_) {
    (void) JreStrAppendStrong(&txt, "$$C", @"- ID : ", ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(mID_), 0x000a);
  }
  (void) JreStrAppendStrong(&txt, "$IC", @"- Payload Length : ", (mPayload_ == nil ? 0 : mPayload_->size_), 0x000a);
  return txt;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  ComStSt25sdkNdefNDEFRecord *record = (ComStSt25sdkNdefNDEFRecord *) cast_chk(o, [ComStSt25sdkNdefNDEFRecord class]);
  IOSByteArray *payload = nil;
  IOSByteArray *objPayload = nil;
  @try {
    payload = [self getPayload];
    objPayload = [record getPayload];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
  }
  return (([self getMB] == [record getMB]) && ([self getME] == [record getME]) && ([self getCF] == [record getCF]) && ([self getSR] == [record getSR]) && ([self getIL] == [record getIL]) && ([self getTnf] == [record getTnf]) && ([self getTypeLength] == [record getTypeLength]) && ([self getIDLength] == [record getIDLength]) && JavaUtilArrays_equalsWithByteArray_withByteArray_([self getType], [record getType]) && JavaUtilArrays_equalsWithByteArray_withByteArray_([self getID], [record getID]) && JavaUtilArrays_equalsWithByteArray_withByteArray_(payload, objPayload));
}

- (NSUInteger)hash {
  IOSByteArray *payload = nil;
  @try {
    payload = [self getPayload];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
  }
  jint result = JavaUtilObjects_hash__WithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_([self getMB]), JavaLangBoolean_valueOfWithBoolean_([self getME]), JavaLangBoolean_valueOfWithBoolean_([self getCF]), JavaLangBoolean_valueOfWithBoolean_([self getSR]), JavaLangBoolean_valueOfWithBoolean_([self getIL]), JavaLangShort_valueOfWithShort_([self getTnf]), JavaLangInteger_valueOfWithInt_([self getTypeLength]), JavaLangInteger_valueOfWithInt_([self getIDLength]) } count:8 type:NSObject_class_()]);
  result = 31 * result + JavaUtilArrays_hashCodeWithByteArray_([self getType]);
  result = 31 * result + JavaUtilArrays_hashCodeWithByteArray_([self getID]);
  result = 31 * result + JavaUtilArrays_hashCodeWithByteArray_(payload);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 3, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 6, 2, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "B", 0x2, 19, 3, 2, -1, -1, -1 },
    { NULL, "[B", 0x2, 20, 21, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 22, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 23, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 26, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithComStSt25sdkNdefNDEFRecord:);
  methods[2].selector = @selector(initWithByteArray:);
  methods[3].selector = @selector(initWithJavaIoByteArrayInputStream:);
  methods[4].selector = @selector(getSize);
  methods[5].selector = @selector(ndefRecordInitWithJavaIoByteArrayInputStream:);
  methods[6].selector = @selector(setMBWithBoolean:);
  methods[7].selector = @selector(getMB);
  methods[8].selector = @selector(setMEWithBoolean:);
  methods[9].selector = @selector(getME);
  methods[10].selector = @selector(setCFWithBoolean:);
  methods[11].selector = @selector(getCF);
  methods[12].selector = @selector(setSRWithBoolean:);
  methods[13].selector = @selector(setSR);
  methods[14].selector = @selector(getSR);
  methods[15].selector = @selector(setILWithBoolean:);
  methods[16].selector = @selector(getIL);
  methods[17].selector = @selector(setTnfWithShort:);
  methods[18].selector = @selector(getTnf);
  methods[19].selector = @selector(setTypeLengthWithInt:);
  methods[20].selector = @selector(getTypeLength);
  methods[21].selector = @selector(setTypeWithByteArray:);
  methods[22].selector = @selector(getType);
  methods[23].selector = @selector(setIDLengthWithInt:);
  methods[24].selector = @selector(getIDLength);
  methods[25].selector = @selector(setIdWithByteArray:);
  methods[26].selector = @selector(getID);
  methods[27].selector = @selector(getPayloadLength);
  methods[28].selector = @selector(getPayload);
  methods[29].selector = @selector(setPayloadWithByteArray:);
  methods[30].selector = @selector(serialize);
  methods[31].selector = @selector(readNextByteWithJavaIoByteArrayInputStream:);
  methods[32].selector = @selector(readNextBytesWithJavaIoByteArrayInputStream:withInt:withInt:);
  methods[33].selector = @selector(dbgCheckNdefRecordContentWithByteArray:);
  methods[34].selector = @selector(description);
  methods[35].selector = @selector(isEqual:);
  methods[36].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DBG_NDEF_RECORD", "Z", .constantValue.asLong = 0, 0x9, -1, 27, -1, -1 },
    { "mMB_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mME_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCF_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSR_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIL_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTnf_", "S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTypeLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIDLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mType_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mID_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPayload_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "RTD_TEXT", "[B", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "RTD_URI", "[B", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "RTD_SMART_POSTER", "[B", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "RTD_COLLISION_RESOLUTION", "[B", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "RTD_ALTERNATIVE_CARRIER", "[B", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "RTD_HANDOVER_CARRIER", "[B", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "RTD_HANDOVER_REQUEST", "[B", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "RTD_HANDOVER_SELECT", "[B", .constantValue.asLong = 0, 0x19, -1, 35, -1, -1 },
    { "RTD_HANDOVER_MEDIATION", "[B", .constantValue.asLong = 0, 0x19, -1, 36, -1, -1 },
    { "RTD_HANDOVER_INITIATE", "[B", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "RTD_TNEP_SERVICE_PARAMETER", "[B", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "RTD_TNEP_SERVICE_SELECT", "[B", .constantValue.asLong = 0, 0x19, -1, 39, -1, -1 },
    { "RTD_TNEP_STATUS", "[B", .constantValue.asLong = 0, 0x19, -1, 40, -1, -1 },
    { "RTD_ANDROID_APP", "[B", .constantValue.asLong = 0, 0x19, -1, 41, -1, -1 },
    { "RTD_BTLE_APP", "[B", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "RTD_BT_APP", "[B", .constantValue.asLong = 0, 0x19, -1, 43, -1, -1 },
    { "RTD_VCARD_APP", "[B", .constantValue.asLong = 0, 0x19, -1, 44, -1, -1 },
    { "RTD_VCARD_APP2", "[B", .constantValue.asLong = 0, 0x19, -1, 45, -1, -1 },
    { "RTD_VCARD_APP3", "[B", .constantValue.asLong = 0, 0x19, -1, 46, -1, -1 },
    { "RTD_WIFI_APP", "[B", .constantValue.asLong = 0, 0x19, -1, 47, -1, -1 },
    { "RTD_SMS", "[B", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "TNF_EMPTY", "S", .constantValue.asShort = ComStSt25sdkNdefNDEFRecord_TNF_EMPTY, 0x19, -1, -1, -1, -1 },
    { "TNF_WELLKNOWN", "S", .constantValue.asShort = ComStSt25sdkNdefNDEFRecord_TNF_WELLKNOWN, 0x19, -1, -1, -1, -1 },
    { "TNF_MEDIA", "S", .constantValue.asShort = ComStSt25sdkNdefNDEFRecord_TNF_MEDIA, 0x19, -1, -1, -1, -1 },
    { "TNF_URI", "S", .constantValue.asShort = ComStSt25sdkNdefNDEFRecord_TNF_URI, 0x19, -1, -1, -1, -1 },
    { "TNF_EXTERNAL", "S", .constantValue.asShort = ComStSt25sdkNdefNDEFRecord_TNF_EXTERNAL, 0x19, -1, -1, -1, -1 },
    { "TNF_UNKNOWN", "S", .constantValue.asShort = ComStSt25sdkNdefNDEFRecord_TNF_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "TNF_UNCHANGED", "S", .constantValue.asShort = ComStSt25sdkNdefNDEFRecord_TNF_UNCHANGED, 0x19, -1, -1, -1, -1 },
    { "TNF_RFU", "S", .constantValue.asShort = ComStSt25sdkNdefNDEFRecord_TNF_RFU, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkNdefNDEFRecord;", "[B", "LJavaLangException;", "LJavaIoByteArrayInputStream;", "ndefRecordInit", "setMB", "Z", "setME", "setCF", "setSR", "setIL", "setTnf", "S", "setTypeLength", "I", "setType", "setIDLength", "setId", "setPayload", "readNextByte", "readNextBytes", "LJavaIoByteArrayInputStream;II", "dbgCheckNdefRecordContent", "toString", "equals", "LNSObject;", "hashCode", &ComStSt25sdkNdefNDEFRecord_DBG_NDEF_RECORD, &ComStSt25sdkNdefNDEFRecord_RTD_TEXT, &ComStSt25sdkNdefNDEFRecord_RTD_URI, &ComStSt25sdkNdefNDEFRecord_RTD_SMART_POSTER, &ComStSt25sdkNdefNDEFRecord_RTD_COLLISION_RESOLUTION, &ComStSt25sdkNdefNDEFRecord_RTD_ALTERNATIVE_CARRIER, &ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_CARRIER, &ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_REQUEST, &ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_SELECT, &ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_MEDIATION, &ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_INITIATE, &ComStSt25sdkNdefNDEFRecord_RTD_TNEP_SERVICE_PARAMETER, &ComStSt25sdkNdefNDEFRecord_RTD_TNEP_SERVICE_SELECT, &ComStSt25sdkNdefNDEFRecord_RTD_TNEP_STATUS, &ComStSt25sdkNdefNDEFRecord_RTD_ANDROID_APP, &ComStSt25sdkNdefNDEFRecord_RTD_BTLE_APP, &ComStSt25sdkNdefNDEFRecord_RTD_BT_APP, &ComStSt25sdkNdefNDEFRecord_RTD_VCARD_APP, &ComStSt25sdkNdefNDEFRecord_RTD_VCARD_APP2, &ComStSt25sdkNdefNDEFRecord_RTD_VCARD_APP3, &ComStSt25sdkNdefNDEFRecord_RTD_WIFI_APP, &ComStSt25sdkNdefNDEFRecord_RTD_SMS };
  static const J2ObjcClassInfo _ComStSt25sdkNdefNDEFRecord = { "NDEFRecord", "com.st.st25sdk.ndef", ptrTable, methods, fields, 7, 0x1, 37, 41, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkNdefNDEFRecord;
}

+ (void)initialize {
  if (self == [ComStSt25sdkNdefNDEFRecord class]) {
    ComStSt25sdkNdefNDEFRecord_RTD_TEXT = [@"T" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_URI = [@"U" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_SMART_POSTER = [@"Sp" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_COLLISION_RESOLUTION = [@"cr" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_ALTERNATIVE_CARRIER = [@"ac" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_CARRIER = [@"Hc" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_REQUEST = [@"Hr" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_SELECT = [@"Hs" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_MEDIATION = [@"Hm" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_HANDOVER_INITIATE = [@"Hi" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_TNEP_SERVICE_PARAMETER = [@"Tp" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_TNEP_SERVICE_SELECT = [@"Ts" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_TNEP_STATUS = [@"Te" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_ANDROID_APP = [@"android.com:pkg" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_BTLE_APP = [@"application/vnd.bluetooth.le.oob" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_BT_APP = [@"application/vnd.bluetooth.ep.oob" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_VCARD_APP = [@"text/vcard" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_VCARD_APP2 = [@"text/x-vcard" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_VCARD_APP3 = [@"text/x-vCard" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_WIFI_APP = [@"application/vnd.wfa.wsc" java_getBytes];
    ComStSt25sdkNdefNDEFRecord_RTD_SMS = [@"sms:" java_getBytes];
    J2OBJC_SET_INITIALIZED(ComStSt25sdkNdefNDEFRecord)
  }
}

@end

void ComStSt25sdkNdefNDEFRecord_init(ComStSt25sdkNdefNDEFRecord *self) {
  NSObject_init(self);
  self->mMB_ = self->mME_ = true;
  self->mCF_ = self->mIL_ = false;
  self->mSR_ = true;
  self->mTnf_ = ComStSt25sdkNdefNDEFRecord_TNF_EMPTY;
  self->mTypeLength_ = self->mIDLength_ = 0;
  self->mType_ = [IOSByteArray newArrayWithLength:0];
  self->mID_ = [IOSByteArray newArrayWithLength:0];
}

ComStSt25sdkNdefNDEFRecord *new_ComStSt25sdkNdefNDEFRecord_init() {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefNDEFRecord, init)
}

ComStSt25sdkNdefNDEFRecord *create_ComStSt25sdkNdefNDEFRecord_init() {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefNDEFRecord, init)
}

void ComStSt25sdkNdefNDEFRecord_initWithComStSt25sdkNdefNDEFRecord_(ComStSt25sdkNdefNDEFRecord *self, ComStSt25sdkNdefNDEFRecord *record) {
  NSObject_init(self);
  self->mMB_ = [((ComStSt25sdkNdefNDEFRecord *) nil_chk(record)) getMB];
  self->mME_ = [record getME];
  self->mCF_ = [record getCF];
  self->mIL_ = [record getIL];
  self->mSR_ = [record getSR];
  self->mTnf_ = [record getTnf];
  self->mTypeLength_ = [record getTypeLength];
  self->mIDLength_ = [record getIDLength];
  self->mType_ = [record getType];
  self->mID_ = [record getID];
}

ComStSt25sdkNdefNDEFRecord *new_ComStSt25sdkNdefNDEFRecord_initWithComStSt25sdkNdefNDEFRecord_(ComStSt25sdkNdefNDEFRecord *record) {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefNDEFRecord, initWithComStSt25sdkNdefNDEFRecord_, record)
}

ComStSt25sdkNdefNDEFRecord *create_ComStSt25sdkNdefNDEFRecord_initWithComStSt25sdkNdefNDEFRecord_(ComStSt25sdkNdefNDEFRecord *record) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefNDEFRecord, initWithComStSt25sdkNdefNDEFRecord_, record)
}

void ComStSt25sdkNdefNDEFRecord_initWithByteArray_(ComStSt25sdkNdefNDEFRecord *self, IOSByteArray *buffer) {
  NSObject_init(self);
  JavaIoByteArrayInputStream *byteArrayInputStream = new_JavaIoByteArrayInputStream_initWithByteArray_(buffer);
  ComStSt25sdkNdefNDEFRecord_ndefRecordInitWithJavaIoByteArrayInputStream_(self, byteArrayInputStream);
}

ComStSt25sdkNdefNDEFRecord *new_ComStSt25sdkNdefNDEFRecord_initWithByteArray_(IOSByteArray *buffer) {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefNDEFRecord, initWithByteArray_, buffer)
}

ComStSt25sdkNdefNDEFRecord *create_ComStSt25sdkNdefNDEFRecord_initWithByteArray_(IOSByteArray *buffer) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefNDEFRecord, initWithByteArray_, buffer)
}

void ComStSt25sdkNdefNDEFRecord_initWithJavaIoByteArrayInputStream_(ComStSt25sdkNdefNDEFRecord *self, JavaIoByteArrayInputStream *inputStream) {
  NSObject_init(self);
  ComStSt25sdkNdefNDEFRecord_ndefRecordInitWithJavaIoByteArrayInputStream_(self, inputStream);
}

ComStSt25sdkNdefNDEFRecord *new_ComStSt25sdkNdefNDEFRecord_initWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *inputStream) {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefNDEFRecord, initWithJavaIoByteArrayInputStream_, inputStream)
}

ComStSt25sdkNdefNDEFRecord *create_ComStSt25sdkNdefNDEFRecord_initWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *inputStream) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefNDEFRecord, initWithJavaIoByteArrayInputStream_, inputStream)
}

void ComStSt25sdkNdefNDEFRecord_ndefRecordInitWithJavaIoByteArrayInputStream_(ComStSt25sdkNdefNDEFRecord *self, JavaIoByteArrayInputStream *byteArrayInputStream) {
  jint payloadLength;
  jbyte recordCtx = ComStSt25sdkNdefNDEFRecord_readNextByteWithJavaIoByteArrayInputStream_(self, byteArrayInputStream);
  self->mMB_ = ((recordCtx & (jint) 0x80) == (jint) 0x80);
  self->mME_ = ((recordCtx & (jint) 0x40) == (jint) 0x40);
  self->mCF_ = ((recordCtx & (jint) 0x20) == (jint) 0x20);
  self->mSR_ = ((recordCtx & (jint) 0x10) == (jint) 0x10);
  self->mIL_ = ((recordCtx & (jint) 0x08) == (jint) 0x08);
  switch (recordCtx & (jint) 0x07) {
    case (jint) 0x00:
    self->mTnf_ = ComStSt25sdkNdefNDEFRecord_TNF_EMPTY;
    break;
    case (jint) 0x01:
    self->mTnf_ = ComStSt25sdkNdefNDEFRecord_TNF_WELLKNOWN;
    break;
    case (jint) 0x02:
    self->mTnf_ = ComStSt25sdkNdefNDEFRecord_TNF_MEDIA;
    break;
    case (jint) 0x03:
    self->mTnf_ = ComStSt25sdkNdefNDEFRecord_TNF_URI;
    break;
    case (jint) 0x04:
    self->mTnf_ = ComStSt25sdkNdefNDEFRecord_TNF_EXTERNAL;
    break;
    case (jint) 0x05:
    self->mTnf_ = ComStSt25sdkNdefNDEFRecord_TNF_UNKNOWN;
    break;
    case (jint) 0x06:
    self->mTnf_ = ComStSt25sdkNdefNDEFRecord_TNF_UNCHANGED;
    break;
    case (jint) 0x07:
    self->mTnf_ = ComStSt25sdkNdefNDEFRecord_TNF_RFU;
    break;
    default:
    self->mTnf_ = ComStSt25sdkNdefNDEFRecord_TNF_RFU;
    break;
  }
  self->mTypeLength_ = ComStSt25sdkNdefNDEFRecord_readNextByteWithJavaIoByteArrayInputStream_(self, byteArrayInputStream) & (jint) 0xFF;
  if (self->mSR_) {
    payloadLength = ComStSt25sdkNdefNDEFRecord_readNextByteWithJavaIoByteArrayInputStream_(self, byteArrayInputStream) & (jint) 0xFF;
  }
  else {
    jbyte payloadLength3 = ComStSt25sdkNdefNDEFRecord_readNextByteWithJavaIoByteArrayInputStream_(self, byteArrayInputStream);
    jbyte payloadLength2 = ComStSt25sdkNdefNDEFRecord_readNextByteWithJavaIoByteArrayInputStream_(self, byteArrayInputStream);
    jbyte payloadLength1 = ComStSt25sdkNdefNDEFRecord_readNextByteWithJavaIoByteArrayInputStream_(self, byteArrayInputStream);
    jbyte payloadLength0 = ComStSt25sdkNdefNDEFRecord_readNextByteWithJavaIoByteArrayInputStream_(self, byteArrayInputStream);
    payloadLength = (JreLShift32((payloadLength3 & (jint) 0xFF), 24)) + (JreLShift32((payloadLength2 & (jint) 0xFF), 16)) + (JreLShift32((payloadLength1 & (jint) 0xFF), 8)) + (payloadLength0 & (jint) 0xFF);
  }
  if (self->mIL_) {
    self->mIDLength_ = ComStSt25sdkNdefNDEFRecord_readNextByteWithJavaIoByteArrayInputStream_(self, byteArrayInputStream) & (jint) 0xFF;
  }
  else {
    self->mIDLength_ = 0;
  }
  if (self->mTypeLength_ != 0) {
    self->mType_ = ComStSt25sdkNdefNDEFRecord_readNextBytesWithJavaIoByteArrayInputStream_withInt_withInt_(self, byteArrayInputStream, 0, self->mTypeLength_);
  }
  if (self->mIDLength_ != 0) {
    self->mID_ = ComStSt25sdkNdefNDEFRecord_readNextBytesWithJavaIoByteArrayInputStream_withInt_withInt_(self, byteArrayInputStream, 0, self->mIDLength_);
  }
  if (payloadLength != 0) {
    if (payloadLength <= [((JavaIoByteArrayInputStream *) nil_chk(byteArrayInputStream)) available]) {
      self->mPayload_ = ComStSt25sdkNdefNDEFRecord_readNextBytesWithJavaIoByteArrayInputStream_withInt_withInt_(self, byteArrayInputStream, 0, payloadLength);
    }
    else {
      @throw new_JavaLangException_initWithNSString_(@"Payload too long");
    }
  }
  else if (self->mTnf_ != ComStSt25sdkNdefNDEFRecord_TNF_EMPTY) {
    ComStSt25sdkSTLog_wWithNSString_(@"Warning: Payload is null!");
    self->mPayload_ = [IOSByteArray newArrayWithLength:0];
  }
}

jbyte ComStSt25sdkNdefNDEFRecord_readNextByteWithJavaIoByteArrayInputStream_(ComStSt25sdkNdefNDEFRecord *self, JavaIoByteArrayInputStream *byteArrayInputStream) {
  jint data = [((JavaIoByteArrayInputStream *) nil_chk(byteArrayInputStream)) read];
  if (data == -1) {
    @throw new_JavaLangException_initWithNSString_(@"Invalid ndef data");
  }
  else {
    return (jbyte) (data & (jint) 0xFF);
  }
}

IOSByteArray *ComStSt25sdkNdefNDEFRecord_readNextBytesWithJavaIoByteArrayInputStream_withInt_withInt_(ComStSt25sdkNdefNDEFRecord *self, JavaIoByteArrayInputStream *byteArrayInputStream, jint offset, jint length) {
  if ((length + offset) > [((JavaIoByteArrayInputStream *) nil_chk(byteArrayInputStream)) available]) {
    @throw new_JavaLangException_initWithNSString_(@"Invalid ndef data");
  }
  IOSByteArray *data = [IOSByteArray newArrayWithLength:length];
  jint nbrOfBytesRead = [byteArrayInputStream readWithByteArray:data withInt:offset withInt:length];
  if (nbrOfBytesRead == length) {
    return data;
  }
  else {
    @throw new_JavaLangException_initWithNSString_(@"Invalid ndef data");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkNdefNDEFRecord)
