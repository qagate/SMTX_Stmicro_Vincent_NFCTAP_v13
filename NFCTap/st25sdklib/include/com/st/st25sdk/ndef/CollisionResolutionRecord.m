//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/ndef/CollisionResolutionRecord.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/ndef/CollisionResolutionRecord.h"
#include "com/st/st25sdk/ndef/NDEFRecord.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/Byte.h"
#include "java/lang/Exception.h"
#include "java/nio/ByteBuffer.h"

static id (*ComStSt25sdkNdefCollisionResolutionRecord_super$_getPayload)(id, SEL);

@interface ComStSt25sdkNdefCollisionResolutionRecord () {
 @public
  jbyte mRandomNumberMsb_;
  jbyte mRandomNumberLsb_;
}

- (void)parseWithJavaNioByteBuffer:(JavaNioByteBuffer *)payload;

@end

__attribute__((unused)) static void ComStSt25sdkNdefCollisionResolutionRecord_parseWithJavaNioByteBuffer_(ComStSt25sdkNdefCollisionResolutionRecord *self, JavaNioByteBuffer *payload);

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkNdefCollisionResolutionRecord)

@implementation ComStSt25sdkNdefCollisionResolutionRecord

- (instancetype)initWithByte:(jbyte)msb
                    withByte:(jbyte)lsb {
  ComStSt25sdkNdefCollisionResolutionRecord_initWithByte_withByte_(self, msb, lsb);
  return self;
}

- (instancetype)initWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)inputStream {
  ComStSt25sdkNdefCollisionResolutionRecord_initWithJavaIoByteArrayInputStream_(self, inputStream);
  return self;
}

- (void)parseWithJavaNioByteBuffer:(JavaNioByteBuffer *)payload {
  ComStSt25sdkNdefCollisionResolutionRecord_parseWithJavaNioByteBuffer_(self, payload);
}

- (IOSByteArray *)getPayload {
  JavaIoByteArrayOutputStream *outputStream = new_JavaIoByteArrayOutputStream_init();
  [outputStream writeWithInt:mRandomNumberMsb_];
  [outputStream writeWithInt:mRandomNumberLsb_];
  IOSByteArray *payload = [outputStream toByteArray];
  return payload;
}

- (jbyte)getTnepRandomNumberMsb {
  return mRandomNumberMsb_;
}

- (jbyte)getTnepRandomNumberLsb {
  return mRandomNumberLsb_;
}

- (NSString *)description {
  NSString *recordHeader = [super description];
  NSString *txt = @"Collision Resolution Record:\n";
  (void) JreStrAppendStrong(&txt, "$", recordHeader);
  (void) JreStrAppendStrong(&txt, "$$C", @"- Random Number MSB : 0x", [((NSString *) nil_chk(NSString_java_formatWithNSString_withNSObjectArray_(@"%02x", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangByte_valueOfWithByte_(mRandomNumberMsb_) } count:1 type:NSObject_class_()]))) uppercaseString], 0x000a);
  (void) JreStrAppendStrong(&txt, "$$C", @"- Random Number LSB : 0x", [((NSString *) nil_chk(NSString_java_formatWithNSString_withNSObjectArray_(@"%02x", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangByte_valueOfWithByte_(mRandomNumberLsb_) } count:1 type:NSObject_class_()]))) uppercaseString], 0x000a);
  return txt;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByte:withByte:);
  methods[1].selector = @selector(initWithJavaIoByteArrayInputStream:);
  methods[2].selector = @selector(parseWithJavaNioByteBuffer:);
  methods[3].selector = @selector(getPayload);
  methods[4].selector = @selector(getTnepRandomNumberMsb);
  methods[5].selector = @selector(getTnepRandomNumberLsb);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mRandomNumberMsb_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRandomNumberLsb_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "BB", "LJavaIoByteArrayInputStream;", "LJavaLangException;", "parse", "LJavaNioByteBuffer;", "toString" };
  static const J2ObjcClassInfo _ComStSt25sdkNdefCollisionResolutionRecord = { "CollisionResolutionRecord", "com.st.st25sdk.ndef", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkNdefCollisionResolutionRecord;
}

+ (void)initialize {
  if (self == [ComStSt25sdkNdefCollisionResolutionRecord class]) {
    ComStSt25sdkNdefCollisionResolutionRecord_super$_getPayload = (id (*)(id, SEL))[ComStSt25sdkNdefNDEFRecord instanceMethodForSelector:@selector(getPayload)];
    J2OBJC_SET_INITIALIZED(ComStSt25sdkNdefCollisionResolutionRecord)
  }
}

@end

void ComStSt25sdkNdefCollisionResolutionRecord_initWithByte_withByte_(ComStSt25sdkNdefCollisionResolutionRecord *self, jbyte msb, jbyte lsb) {
  ComStSt25sdkNdefNDEFRecord_init(self);
  [self setTnfWithShort:ComStSt25sdkNdefNDEFRecord_TNF_WELLKNOWN];
  [self setTypeWithByteArray:JreLoadStatic(ComStSt25sdkNdefNDEFRecord, RTD_COLLISION_RESOLUTION)];
  [self setILWithBoolean:false];
  self->mRandomNumberMsb_ = msb;
  self->mRandomNumberLsb_ = lsb;
  [self setSR];
}

ComStSt25sdkNdefCollisionResolutionRecord *new_ComStSt25sdkNdefCollisionResolutionRecord_initWithByte_withByte_(jbyte msb, jbyte lsb) {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefCollisionResolutionRecord, initWithByte_withByte_, msb, lsb)
}

ComStSt25sdkNdefCollisionResolutionRecord *create_ComStSt25sdkNdefCollisionResolutionRecord_initWithByte_withByte_(jbyte msb, jbyte lsb) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefCollisionResolutionRecord, initWithByte_withByte_, msb, lsb)
}

void ComStSt25sdkNdefCollisionResolutionRecord_initWithJavaIoByteArrayInputStream_(ComStSt25sdkNdefCollisionResolutionRecord *self, JavaIoByteArrayInputStream *inputStream) {
  ComStSt25sdkNdefNDEFRecord_initWithJavaIoByteArrayInputStream_(self, inputStream);
  IOSByteArray *payload = ComStSt25sdkNdefCollisionResolutionRecord_super$_getPayload(self, @selector(getPayload));
  if (payload == nil) {
    @throw new_JavaLangException_initWithNSString_(@"Invalid ndef data");
  }
  [self setTnfWithShort:ComStSt25sdkNdefNDEFRecord_TNF_WELLKNOWN];
  [self setTypeWithByteArray:JreLoadStatic(ComStSt25sdkNdefNDEFRecord, RTD_COLLISION_RESOLUTION)];
  ComStSt25sdkNdefCollisionResolutionRecord_parseWithJavaNioByteBuffer_(self, JavaNioByteBuffer_wrapWithByteArray_(payload));
  if (JreLoadStatic(ComStSt25sdkNdefNDEFRecord, DBG_NDEF_RECORD)) {
    [self dbgCheckNdefRecordContentWithByteArray:payload];
  }
}

ComStSt25sdkNdefCollisionResolutionRecord *new_ComStSt25sdkNdefCollisionResolutionRecord_initWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *inputStream) {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefCollisionResolutionRecord, initWithJavaIoByteArrayInputStream_, inputStream)
}

ComStSt25sdkNdefCollisionResolutionRecord *create_ComStSt25sdkNdefCollisionResolutionRecord_initWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *inputStream) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefCollisionResolutionRecord, initWithJavaIoByteArrayInputStream_, inputStream)
}

void ComStSt25sdkNdefCollisionResolutionRecord_parseWithJavaNioByteBuffer_(ComStSt25sdkNdefCollisionResolutionRecord *self, JavaNioByteBuffer *payload) {
  self->mRandomNumberMsb_ = [((JavaNioByteBuffer *) nil_chk(payload)) get];
  self->mRandomNumberLsb_ = [payload get];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkNdefCollisionResolutionRecord)
