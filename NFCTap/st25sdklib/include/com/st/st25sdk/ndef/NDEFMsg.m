//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/ndef/NDEFMsg.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/ControlTlv.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/ndef/NDEFMsg.h"
#include "com/st/st25sdk/ndef/NDEFRecord.h"
#include "com/st/st25sdk/ndef/NdefRecordFactory.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@interface ComStSt25sdkNdefNDEFMsg ()

- (void)parseRecordsWithByteArray:(IOSByteArray *)buffer
                          withInt:(jint)offset;

- (void)updateMessageBeginAndEndFlags;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

@end

__attribute__((unused)) static void ComStSt25sdkNdefNDEFMsg_parseRecordsWithByteArray_withInt_(ComStSt25sdkNdefNDEFMsg *self, IOSByteArray *buffer, jint offset);

__attribute__((unused)) static void ComStSt25sdkNdefNDEFMsg_updateMessageBeginAndEndFlags(ComStSt25sdkNdefNDEFMsg *self);

__attribute__((unused)) static void ComStSt25sdkNdefNDEFMsg_writeObjectWithJavaIoObjectOutputStream_(ComStSt25sdkNdefNDEFMsg *self, JavaIoObjectOutputStream *outArg);

__attribute__((unused)) static void ComStSt25sdkNdefNDEFMsg_readObjectWithJavaIoObjectInputStream_(ComStSt25sdkNdefNDEFMsg *self, JavaIoObjectInputStream *inArg);

@implementation ComStSt25sdkNdefNDEFMsg

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComStSt25sdkNdefNDEFMsg_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithComStSt25sdkNdefNDEFRecord:(ComStSt25sdkNdefNDEFRecord *)record {
  ComStSt25sdkNdefNDEFMsg_initWithComStSt25sdkNdefNDEFRecord_(self, record);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)buffer {
  ComStSt25sdkNdefNDEFMsg_initWithByteArray_(self, buffer);
  return self;
}

- (id<JavaUtilList>)getNDEFRecords {
  return mNDEFRecords_;
}

- (jint)getNbrOfRecords {
  return [((id<JavaUtilList>) nil_chk(mNDEFRecords_)) size];
}

- (ComStSt25sdkNdefNDEFRecord *)getNDEFRecordWithInt:(jint)position {
  return [((id<JavaUtilList>) nil_chk(mNDEFRecords_)) getWithInt:position];
}

- (NSString *)getPayload {
  NSString *msg = @"";
  for (ComStSt25sdkNdefNDEFRecord * __strong r in nil_chk(mNDEFRecords_)) {
    (void) JreStrAppendStrong(&msg, "$", [NSString java_stringWithBytes:[((ComStSt25sdkNdefNDEFRecord *) nil_chk(r)) getPayload]]);
  }
  return msg;
}

- (IOSByteArray *)serialize {
  JavaIoByteArrayOutputStream *buffer = new_JavaIoByteArrayOutputStream_init();
  for (ComStSt25sdkNdefNDEFRecord * __strong record in nil_chk(mNDEFRecords_)) {
    IOSByteArray *data;
    data = [((ComStSt25sdkNdefNDEFRecord *) nil_chk(record)) serialize];
    if (data != nil) {
      [buffer writeWithByteArray:data withInt:0 withInt:data->size_];
    }
  }
  return [buffer toByteArray];
}

- (void)parseRecordsWithByteArray:(IOSByteArray *)buffer
                          withInt:(jint)offset {
  ComStSt25sdkNdefNDEFMsg_parseRecordsWithByteArray_withInt_(self, buffer, offset);
}

- (void)addRecordWithComStSt25sdkNdefNDEFRecord:(ComStSt25sdkNdefNDEFRecord *)record {
  if (record == nil) {
    ComStSt25sdkSTLog_eWithNSString_(@"Invalid record!");
    return;
  }
  [((id<JavaUtilList>) nil_chk(mNDEFRecords_)) addWithId:record];
  ComStSt25sdkNdefNDEFMsg_updateMessageBeginAndEndFlags(self);
}

- (void)updateMessageBeginAndEndFlags {
  ComStSt25sdkNdefNDEFMsg_updateMessageBeginAndEndFlags(self);
}

- (void)deleteRecordWithInt:(jint)position {
  jint size = [((id<JavaUtilList>) nil_chk(mNDEFRecords_)) size];
  if ((size == 0) || (position >= size) || (position < 0)) {
    return;
  }
  (void) [((id<JavaUtilList>) nil_chk(mNDEFRecords_)) removeWithInt:position];
  ComStSt25sdkNdefNDEFMsg_updateMessageBeginAndEndFlags(self);
}

- (void)updateRecordWithComStSt25sdkNdefNDEFRecord:(ComStSt25sdkNdefNDEFRecord *)record
                                           withInt:(jint)position {
  jint size = [((id<JavaUtilList>) nil_chk(mNDEFRecords_)) size];
  if ((position >= size) || (position < 0)) {
    return;
  }
  (void) [((id<JavaUtilList>) nil_chk(mNDEFRecords_)) setWithInt:position withId:record];
  ComStSt25sdkNdefNDEFMsg_updateMessageBeginAndEndFlags(self);
  if (size > 1) {
    [((ComStSt25sdkNdefNDEFRecord *) nil_chk([((id<JavaUtilList>) nil_chk(mNDEFRecords_)) getWithInt:0])) setMEWithBoolean:false];
    [((ComStSt25sdkNdefNDEFRecord *) nil_chk([((id<JavaUtilList>) nil_chk(mNDEFRecords_)) getWithInt:size - 1])) setMEWithBoolean:true];
  }
  else {
    [((ComStSt25sdkNdefNDEFRecord *) nil_chk([((id<JavaUtilList>) nil_chk(mNDEFRecords_)) getWithInt:0])) setMEWithBoolean:true];
  }
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  ComStSt25sdkNdefNDEFMsg_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  ComStSt25sdkNdefNDEFMsg_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if ([self java_getClass] != [obj java_getClass]) {
    return false;
  }
  IOSByteArray *buffer;
  IOSByteArray *objBuffer;
  @try {
    buffer = [self serialize];
    objBuffer = [((ComStSt25sdkNdefNDEFMsg *) cast_chk(obj, [ComStSt25sdkNdefNDEFMsg class])) serialize];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    return false;
  }
  return JavaUtilArrays_equalsWithByteArray_withByteArray_(buffer, objBuffer);
}

- (jint)getLength {
  jint length;
  IOSByteArray *msgBuffer;
  msgBuffer = [self serialize];
  if (msgBuffer != nil) {
    length = msgBuffer->size_;
  }
  else {
    length = 0;
  }
  return length;
}

- (IOSByteArray *)formatType3 {
  if (![((id<JavaUtilList>) nil_chk([self getNDEFRecords])) isEmpty]) {
    return [self serialize];
  }
  return [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x03, (jint) 0x00 } count:2];
}

- (IOSByteArray *)formatType2 {
  return [self formatType5];
}

- (IOSByteArray *)formatType5 {
  return [self formatType5WithBoolean:false];
}

- (IOSByteArray *)formatType5WithBoolean:(jboolean)isNoTerminatorNeeded {
  if (![((id<JavaUtilList>) nil_chk([self getNDEFRecords])) isEmpty]) {
    IOSByteArray *msgBuffer;
    msgBuffer = [self serialize];
    IOSByteArray *ndefMessageWithTlv = ComStSt25sdkControlTlv_buildNdefTlvWithByteArray_(msgBuffer);
    if (isNoTerminatorNeeded) {
      return ndefMessageWithTlv;
    }
    return ComStSt25sdkControlTlv_addTerminatorTlvWithByteArray_(ndefMessageWithTlv);
  }
  return [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x03, (jint) 0x00 } count:2];
}

- (ComStSt25sdkNdefNDEFMsg *)copy__ {
  IOSByteArray *buffer;
  @try {
    buffer = [self serialize];
    return new_ComStSt25sdkNdefNDEFMsg_initWithByteArray_(buffer);
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, INVALID_NDEF_DATA));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComStSt25sdkNdefNDEFRecord;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 18, 19, 2, -1, -1, -1 },
    { NULL, "LComStSt25sdkNdefNDEFMsg;", 0x1, 20, -1, 21, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithComStSt25sdkNdefNDEFRecord:);
  methods[2].selector = @selector(initWithByteArray:);
  methods[3].selector = @selector(getNDEFRecords);
  methods[4].selector = @selector(getNbrOfRecords);
  methods[5].selector = @selector(getNDEFRecordWithInt:);
  methods[6].selector = @selector(getPayload);
  methods[7].selector = @selector(serialize);
  methods[8].selector = @selector(parseRecordsWithByteArray:withInt:);
  methods[9].selector = @selector(addRecordWithComStSt25sdkNdefNDEFRecord:);
  methods[10].selector = @selector(updateMessageBeginAndEndFlags);
  methods[11].selector = @selector(deleteRecordWithInt:);
  methods[12].selector = @selector(updateRecordWithComStSt25sdkNdefNDEFRecord:withInt:);
  methods[13].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[14].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[15].selector = @selector(isEqual:);
  methods[16].selector = @selector(getLength);
  methods[17].selector = @selector(formatType3);
  methods[18].selector = @selector(formatType2);
  methods[19].selector = @selector(formatType5);
  methods[20].selector = @selector(formatType5WithBoolean:);
  methods[21].selector = @selector(copy__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mNDEFRecords_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 22, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkNdefNDEFRecord;", "[B", "LJavaLangException;", "()Ljava/util/List<Lcom/st/st25sdk/ndef/NDEFRecord;>;", "getNDEFRecord", "I", "parseRecords", "[BI", "addRecord", "deleteRecord", "updateRecord", "LComStSt25sdkNdefNDEFRecord;I", "writeObject", "LJavaIoObjectOutputStream;", "readObject", "LJavaIoObjectInputStream;", "equals", "LNSObject;", "formatType5", "Z", "copy", "LComStSt25sdkSTException;", "Ljava/util/List<Lcom/st/st25sdk/ndef/NDEFRecord;>;" };
  static const J2ObjcClassInfo _ComStSt25sdkNdefNDEFMsg = { "NDEFMsg", "com.st.st25sdk.ndef", ptrTable, methods, fields, 7, 0x1, 22, 1, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkNdefNDEFMsg;
}

@end

void ComStSt25sdkNdefNDEFMsg_init(ComStSt25sdkNdefNDEFMsg *self) {
  NSObject_init(self);
  self->mNDEFRecords_ = new_JavaUtilArrayList_init();
}

ComStSt25sdkNdefNDEFMsg *new_ComStSt25sdkNdefNDEFMsg_init() {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefNDEFMsg, init)
}

ComStSt25sdkNdefNDEFMsg *create_ComStSt25sdkNdefNDEFMsg_init() {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefNDEFMsg, init)
}

void ComStSt25sdkNdefNDEFMsg_initWithComStSt25sdkNdefNDEFRecord_(ComStSt25sdkNdefNDEFMsg *self, ComStSt25sdkNdefNDEFRecord *record) {
  NSObject_init(self);
  self->mNDEFRecords_ = new_JavaUtilArrayList_init();
  [self->mNDEFRecords_ addWithInt:0 withId:record];
}

ComStSt25sdkNdefNDEFMsg *new_ComStSt25sdkNdefNDEFMsg_initWithComStSt25sdkNdefNDEFRecord_(ComStSt25sdkNdefNDEFRecord *record) {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefNDEFMsg, initWithComStSt25sdkNdefNDEFRecord_, record)
}

ComStSt25sdkNdefNDEFMsg *create_ComStSt25sdkNdefNDEFMsg_initWithComStSt25sdkNdefNDEFRecord_(ComStSt25sdkNdefNDEFRecord *record) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefNDEFMsg, initWithComStSt25sdkNdefNDEFRecord_, record)
}

void ComStSt25sdkNdefNDEFMsg_initWithByteArray_(ComStSt25sdkNdefNDEFMsg *self, IOSByteArray *buffer) {
  NSObject_init(self);
  self->mNDEFRecords_ = new_JavaUtilArrayList_init();
  if (buffer != nil) {
    ComStSt25sdkNdefNDEFMsg_parseRecordsWithByteArray_withInt_(self, buffer, 0);
  }
}

ComStSt25sdkNdefNDEFMsg *new_ComStSt25sdkNdefNDEFMsg_initWithByteArray_(IOSByteArray *buffer) {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefNDEFMsg, initWithByteArray_, buffer)
}

ComStSt25sdkNdefNDEFMsg *create_ComStSt25sdkNdefNDEFMsg_initWithByteArray_(IOSByteArray *buffer) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefNDEFMsg, initWithByteArray_, buffer)
}

void ComStSt25sdkNdefNDEFMsg_parseRecordsWithByteArray_withInt_(ComStSt25sdkNdefNDEFMsg *self, IOSByteArray *buffer, jint offset) {
  ComStSt25sdkNdefNDEFRecord *record;
  if (buffer == nil) {
    @throw new_JavaLangException_initWithNSString_(@"Invalid buffer");
  }
  JavaIoByteArrayInputStream *inputStream = new_JavaIoByteArrayInputStream_initWithByteArray_withInt_withInt_(buffer, 0, buffer->size_);
  while ([inputStream available] > 0) {
    record = ComStSt25sdkNdefNdefRecordFactory_getNdefRecordWithJavaIoByteArrayInputStream_(inputStream);
    if (record != nil) {
      [self addRecordWithComStSt25sdkNdefNDEFRecord:record];
    }
    else {
      [inputStream close];
      @throw new_JavaLangException_initWithNSString_(@"Invalid buffer in parseRecords");
    }
  }
}

void ComStSt25sdkNdefNDEFMsg_updateMessageBeginAndEndFlags(ComStSt25sdkNdefNDEFMsg *self) {
  jint nbrOfRecords = [((id<JavaUtilList>) nil_chk(self->mNDEFRecords_)) size];
  if (nbrOfRecords > 0) {
    for (jint i = 0; i < nbrOfRecords; i++) {
      ComStSt25sdkNdefNDEFRecord *record = [((id<JavaUtilList>) nil_chk(self->mNDEFRecords_)) getWithInt:i];
      if (i == 0) {
        [((ComStSt25sdkNdefNDEFRecord *) nil_chk(record)) setMBWithBoolean:true];
      }
      else {
        [((ComStSt25sdkNdefNDEFRecord *) nil_chk(record)) setMBWithBoolean:false];
      }
      if (i == nbrOfRecords - 1) {
        [record setMEWithBoolean:true];
      }
      else {
        [record setMEWithBoolean:false];
      }
    }
  }
}

void ComStSt25sdkNdefNDEFMsg_writeObjectWithJavaIoObjectOutputStream_(ComStSt25sdkNdefNDEFMsg *self, JavaIoObjectOutputStream *outArg) {
  IOSByteArray *buffer = [self serialize];
  if (buffer != nil) {
    [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeWithByteArray:buffer];
    [outArg flush];
  }
}

void ComStSt25sdkNdefNDEFMsg_readObjectWithJavaIoObjectInputStream_(ComStSt25sdkNdefNDEFMsg *self, JavaIoObjectInputStream *inArg) {
  jint inAvailable = [((JavaIoObjectInputStream *) nil_chk(inArg)) available];
  if (inAvailable > 0) {
    @try {
      jint len = ([inArg available] > 1000) ? 1000 : inAvailable;
      JavaIoByteArrayOutputStream *outputStream = new_JavaIoByteArrayOutputStream_initWithInt_(inAvailable);
      jint size;
      IOSByteArray *readBuffer = [IOSByteArray newArrayWithLength:len];
      while ((size = [inArg readWithByteArray:readBuffer withInt:0 withInt:len]) >= 0) {
        [outputStream writeWithByteArray:readBuffer withInt:0 withInt:size];
      }
      self->mNDEFRecords_ = new_JavaUtilArrayList_init();
      ComStSt25sdkNdefNDEFMsg_parseRecordsWithByteArray_withInt_(self, [outputStream toByteArray], 0);
    }
    @catch (JavaLangException *e) {
      [e printStackTrace];
    }
  }
  else {
    @throw new_JavaLangException_initWithNSString_(@"No data available");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkNdefNDEFMsg)
