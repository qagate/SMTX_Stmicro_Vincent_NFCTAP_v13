//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/ndef/TnepServiceSelectRecord.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/ndef/NDEFRecord.h"
#include "com/st/st25sdk/ndef/TnepServiceSelectRecord.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/Exception.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/charset/Charset.h"

static id (*ComStSt25sdkNdefTnepServiceSelectRecord_super$_getPayload)(id, SEL);

@interface ComStSt25sdkNdefTnepServiceSelectRecord () {
 @public
  NSString *mServiceName_;
}

- (void)parseWithJavaNioByteBuffer:(JavaNioByteBuffer *)payload;

@end

J2OBJC_FIELD_SETTER(ComStSt25sdkNdefTnepServiceSelectRecord, mServiceName_, NSString *)

__attribute__((unused)) static void ComStSt25sdkNdefTnepServiceSelectRecord_parseWithJavaNioByteBuffer_(ComStSt25sdkNdefTnepServiceSelectRecord *self, JavaNioByteBuffer *payload);

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkNdefTnepServiceSelectRecord)

@implementation ComStSt25sdkNdefTnepServiceSelectRecord

- (instancetype)initWithNSString:(NSString *)serviceName {
  ComStSt25sdkNdefTnepServiceSelectRecord_initWithNSString_(self, serviceName);
  return self;
}

- (instancetype)initWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)inputStream {
  ComStSt25sdkNdefTnepServiceSelectRecord_initWithJavaIoByteArrayInputStream_(self, inputStream);
  return self;
}

- (void)parseWithJavaNioByteBuffer:(JavaNioByteBuffer *)payload {
  ComStSt25sdkNdefTnepServiceSelectRecord_parseWithJavaNioByteBuffer_(self, payload);
}

- (IOSByteArray *)getPayload {
  JavaIoByteArrayOutputStream *outputStream = new_JavaIoByteArrayOutputStream_init();
  jbyte serviceNameLength = (jbyte) [((NSString *) nil_chk(mServiceName_)) java_length];
  [outputStream writeWithInt:serviceNameLength];
  [outputStream writeWithByteArray:[((NSString *) nil_chk(mServiceName_)) java_getBytes] withInt:0 withInt:[((NSString *) nil_chk(mServiceName_)) java_length]];
  IOSByteArray *payload = [outputStream toByteArray];
  return payload;
}

- (NSString *)getServiceName {
  return mServiceName_;
}

- (NSString *)description {
  NSString *recordHeader = [super description];
  NSString *txt = @"TNEP Service Select Record:\n";
  (void) JreStrAppendStrong(&txt, "$", recordHeader);
  (void) JreStrAppendStrong(&txt, "$$$", @"- Service Name : \"", mServiceName_, @"\"\n");
  return txt;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithJavaIoByteArrayInputStream:);
  methods[2].selector = @selector(parseWithJavaNioByteBuffer:);
  methods[3].selector = @selector(getPayload);
  methods[4].selector = @selector(getServiceName);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mServiceName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaLangException;", "LJavaIoByteArrayInputStream;", "parse", "LJavaNioByteBuffer;", "toString" };
  static const J2ObjcClassInfo _ComStSt25sdkNdefTnepServiceSelectRecord = { "TnepServiceSelectRecord", "com.st.st25sdk.ndef", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkNdefTnepServiceSelectRecord;
}

+ (void)initialize {
  if (self == [ComStSt25sdkNdefTnepServiceSelectRecord class]) {
    ComStSt25sdkNdefTnepServiceSelectRecord_super$_getPayload = (id (*)(id, SEL))[ComStSt25sdkNdefNDEFRecord instanceMethodForSelector:@selector(getPayload)];
    J2OBJC_SET_INITIALIZED(ComStSt25sdkNdefTnepServiceSelectRecord)
  }
}

@end

void ComStSt25sdkNdefTnepServiceSelectRecord_initWithNSString_(ComStSt25sdkNdefTnepServiceSelectRecord *self, NSString *serviceName) {
  ComStSt25sdkNdefNDEFRecord_init(self);
  if ((serviceName == nil) || ([((NSString *) nil_chk(serviceName)) java_length] == 0)) {
    @throw new_JavaLangException_initWithNSString_(@"Bad serviceName parameter!");
  }
  [self setTnfWithShort:ComStSt25sdkNdefNDEFRecord_TNF_WELLKNOWN];
  [self setTypeWithByteArray:JreLoadStatic(ComStSt25sdkNdefNDEFRecord, RTD_TNEP_SERVICE_SELECT)];
  [self setILWithBoolean:false];
  self->mServiceName_ = serviceName;
  [self setSR];
}

ComStSt25sdkNdefTnepServiceSelectRecord *new_ComStSt25sdkNdefTnepServiceSelectRecord_initWithNSString_(NSString *serviceName) {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefTnepServiceSelectRecord, initWithNSString_, serviceName)
}

ComStSt25sdkNdefTnepServiceSelectRecord *create_ComStSt25sdkNdefTnepServiceSelectRecord_initWithNSString_(NSString *serviceName) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefTnepServiceSelectRecord, initWithNSString_, serviceName)
}

void ComStSt25sdkNdefTnepServiceSelectRecord_initWithJavaIoByteArrayInputStream_(ComStSt25sdkNdefTnepServiceSelectRecord *self, JavaIoByteArrayInputStream *inputStream) {
  ComStSt25sdkNdefNDEFRecord_initWithJavaIoByteArrayInputStream_(self, inputStream);
  IOSByteArray *payload = ComStSt25sdkNdefTnepServiceSelectRecord_super$_getPayload(self, @selector(getPayload));
  if (payload == nil) {
    @throw new_JavaLangException_initWithNSString_(@"Invalid ndef data");
  }
  [self setTnfWithShort:ComStSt25sdkNdefNDEFRecord_TNF_WELLKNOWN];
  [self setTypeWithByteArray:JreLoadStatic(ComStSt25sdkNdefNDEFRecord, RTD_TNEP_SERVICE_SELECT)];
  ComStSt25sdkNdefTnepServiceSelectRecord_parseWithJavaNioByteBuffer_(self, JavaNioByteBuffer_wrapWithByteArray_(payload));
  if (JreLoadStatic(ComStSt25sdkNdefNDEFRecord, DBG_NDEF_RECORD)) {
    [self dbgCheckNdefRecordContentWithByteArray:payload];
  }
}

ComStSt25sdkNdefTnepServiceSelectRecord *new_ComStSt25sdkNdefTnepServiceSelectRecord_initWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *inputStream) {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefTnepServiceSelectRecord, initWithJavaIoByteArrayInputStream_, inputStream)
}

ComStSt25sdkNdefTnepServiceSelectRecord *create_ComStSt25sdkNdefTnepServiceSelectRecord_initWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *inputStream) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefTnepServiceSelectRecord, initWithJavaIoByteArrayInputStream_, inputStream)
}

void ComStSt25sdkNdefTnepServiceSelectRecord_parseWithJavaNioByteBuffer_(ComStSt25sdkNdefTnepServiceSelectRecord *self, JavaNioByteBuffer *payload) {
  jbyte serviceNameLength = [((JavaNioByteBuffer *) nil_chk(payload)) get];
  if (serviceNameLength <= 0) {
    @throw new_JavaLangException_initWithNSString_(@"Invalid ndef data");
  }
  IOSByteArray *rawData = [IOSByteArray newArrayWithLength:serviceNameLength];
  (void) [payload getWithByteArray:rawData];
  self->mServiceName_ = [NSString java_stringWithBytes:rawData charset:JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8")];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkNdefTnepServiceSelectRecord)
