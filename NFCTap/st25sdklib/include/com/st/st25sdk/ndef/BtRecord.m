//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/ndef/BtRecord.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/Helper.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/ndef/BtRecord.h"
#include "com/st/st25sdk/ndef/NDEFRecord.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/nio/Buffer.h"
#include "java/nio/BufferUnderflowException.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/charset/Charset.h"
#include "java/util/Arrays.h"

static id (*ComStSt25sdkNdefBtRecord_super$_getPayload)(id, SEL);

@interface ComStSt25sdkNdefBtRecord () {
 @public
  NSString *mBtDeviceName_;
  IOSByteArray *mBtMacAddr_;
  IOSByteArray *mBtDeviceClass_;
  IOSByteArray *mBtUuidClassList_;
  jbyte mBtUuidClass_;
  IOSByteArray *mBuffer_;
}

- (void)parseWithJavaNioByteBuffer:(JavaNioByteBuffer *)payload;

- (IOSByteArray *)fillEirBufferWithByteArray:(IOSByteArray *)input
                                    withByte:(jbyte)id_;

- (void)export2Bt;

@end

J2OBJC_FIELD_SETTER(ComStSt25sdkNdefBtRecord, mBtDeviceName_, NSString *)
J2OBJC_FIELD_SETTER(ComStSt25sdkNdefBtRecord, mBtMacAddr_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComStSt25sdkNdefBtRecord, mBtDeviceClass_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComStSt25sdkNdefBtRecord, mBtUuidClassList_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComStSt25sdkNdefBtRecord, mBuffer_, IOSByteArray *)

__attribute__((unused)) static void ComStSt25sdkNdefBtRecord_parseWithJavaNioByteBuffer_(ComStSt25sdkNdefBtRecord *self, JavaNioByteBuffer *payload);

__attribute__((unused)) static IOSByteArray *ComStSt25sdkNdefBtRecord_fillEirBufferWithByteArray_withByte_(ComStSt25sdkNdefBtRecord *self, IOSByteArray *input, jbyte id_);

__attribute__((unused)) static void ComStSt25sdkNdefBtRecord_export2Bt(ComStSt25sdkNdefBtRecord *self);

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkNdefBtRecord)

@implementation ComStSt25sdkNdefBtRecord

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComStSt25sdkNdefBtRecord_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)deviceName
                   withByteArray:(IOSByteArray *)macAddr
                   withByteArray:(IOSByteArray *)deviceClass
                   withByteArray:(IOSByteArray *)uuidClass
                        withByte:(jbyte)uidClassList {
  ComStSt25sdkNdefBtRecord_initWithNSString_withByteArray_withByteArray_withByteArray_withByte_(self, deviceName, macAddr, deviceClass, uuidClass, uidClassList);
  return self;
}

- (instancetype)initWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)inputStream {
  ComStSt25sdkNdefBtRecord_initWithJavaIoByteArrayInputStream_(self, inputStream);
  return self;
}

- (NSString *)getBTDeviceName {
  return mBtDeviceName_;
}

- (void)setBTDeviceNameWithNSString:(NSString *)name {
  mBtDeviceName_ = name;
}

- (IOSByteArray *)getBTDeviceMacAddr {
  return mBtMacAddr_;
}

- (void)setBTDeviceMacAddrWithByteArray:(IOSByteArray *)macAddr {
  if (macAddr == nil) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  mBtMacAddr_ = JavaUtilArrays_copyOfWithByteArray_withInt_(macAddr, macAddr->size_);
}

- (IOSByteArray *)getBTDeviceClass {
  return mBtDeviceClass_;
}

- (void)setBTDeviceClassWithByteArray:(IOSByteArray *)deviceClass {
  mBtDeviceClass_ = deviceClass;
}

- (jbyte)getBtUuidClass {
  return mBtUuidClass_;
}

- (void)setBtUuidClassWithByte:(jbyte)uuidClass {
  mBtUuidClass_ = uuidClass;
}

- (IOSByteArray *)getBtUuidClassList {
  return mBtUuidClassList_;
}

- (void)setBTUuidClassListWithByteArray:(IOSByteArray *)uuidClassList {
  mBtUuidClassList_ = uuidClassList;
}

- (IOSByteArray *)getPayload {
  IOSByteArray *payload = nil;
  ComStSt25sdkNdefBtRecord_export2Bt(self);
  if (mBuffer_ != nil) {
    payload = mBuffer_;
  }
  return payload;
}

- (void)parseWithJavaNioByteBuffer:(JavaNioByteBuffer *)payload {
  ComStSt25sdkNdefBtRecord_parseWithJavaNioByteBuffer_(self, payload);
}

- (IOSByteArray *)fillEirBufferWithByteArray:(IOSByteArray *)input
                                    withByte:(jbyte)id_ {
  return ComStSt25sdkNdefBtRecord_fillEirBufferWithByteArray_withByte_(self, input, id_);
}

- (void)export2Bt {
  ComStSt25sdkNdefBtRecord_export2Bt(self);
}

- (NSString *)description {
  NSString *txt = @"Bluetooth Record:\n";
  (void) JreStrAppendStrong(&txt, "$$C", @"- Device Name : ", mBtDeviceName_, 0x000a);
  (void) JreStrAppendStrong(&txt, "$$C", @"- MAC Address : ", ComStSt25sdkHelper_convertHexByteArrayToStringWithByteArray_(mBtMacAddr_), 0x000a);
  return txt;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, 2, -1, -1, -1 },
    { NULL, "[B", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:withByteArray:withByteArray:withByteArray:withByte:);
  methods[2].selector = @selector(initWithJavaIoByteArrayInputStream:);
  methods[3].selector = @selector(getBTDeviceName);
  methods[4].selector = @selector(setBTDeviceNameWithNSString:);
  methods[5].selector = @selector(getBTDeviceMacAddr);
  methods[6].selector = @selector(setBTDeviceMacAddrWithByteArray:);
  methods[7].selector = @selector(getBTDeviceClass);
  methods[8].selector = @selector(setBTDeviceClassWithByteArray:);
  methods[9].selector = @selector(getBtUuidClass);
  methods[10].selector = @selector(setBtUuidClassWithByte:);
  methods[11].selector = @selector(getBtUuidClassList);
  methods[12].selector = @selector(setBTUuidClassListWithByteArray:);
  methods[13].selector = @selector(getPayload);
  methods[14].selector = @selector(parseWithJavaNioByteBuffer:);
  methods[15].selector = @selector(fillEirBufferWithByteArray:withByte:);
  methods[16].selector = @selector(export2Bt);
  methods[17].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mBtDeviceName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBtMacAddr_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBtDeviceClass_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBtUuidClassList_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBtUuidClass_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBuffer_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[B[B[BB", "LJavaIoByteArrayInputStream;", "LJavaLangException;", "setBTDeviceName", "LNSString;", "setBTDeviceMacAddr", "[B", "setBTDeviceClass", "setBtUuidClass", "B", "setBTUuidClassList", "parse", "LJavaNioByteBuffer;", "fillEirBuffer", "[BB", "toString" };
  static const J2ObjcClassInfo _ComStSt25sdkNdefBtRecord = { "BtRecord", "com.st.st25sdk.ndef", ptrTable, methods, fields, 7, 0x1, 18, 6, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkNdefBtRecord;
}

+ (void)initialize {
  if (self == [ComStSt25sdkNdefBtRecord class]) {
    ComStSt25sdkNdefBtRecord_super$_getPayload = (id (*)(id, SEL))[ComStSt25sdkNdefNDEFRecord instanceMethodForSelector:@selector(getPayload)];
    J2OBJC_SET_INITIALIZED(ComStSt25sdkNdefBtRecord)
  }
}

@end

void ComStSt25sdkNdefBtRecord_init(ComStSt25sdkNdefBtRecord *self) {
  ComStSt25sdkNdefNDEFRecord_init(self);
  [self setTnfWithShort:ComStSt25sdkNdefNDEFRecord_TNF_MEDIA];
  [self setTypeWithByteArray:JreLoadStatic(ComStSt25sdkNdefNDEFRecord, RTD_BT_APP)];
  self->mBtDeviceName_ = @"";
  self->mBtMacAddr_ = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x00, (jint) 0x00, (jint) 0x00, (jint) 0x00, (jint) 0x00, (jint) 0x00 } count:6];
  self->mBtDeviceClass_ = nil;
  self->mBtUuidClassList_ = nil;
  self->mBtUuidClass_ = (jint) 0x00;
}

ComStSt25sdkNdefBtRecord *new_ComStSt25sdkNdefBtRecord_init() {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefBtRecord, init)
}

ComStSt25sdkNdefBtRecord *create_ComStSt25sdkNdefBtRecord_init() {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefBtRecord, init)
}

void ComStSt25sdkNdefBtRecord_initWithNSString_withByteArray_withByteArray_withByteArray_withByte_(ComStSt25sdkNdefBtRecord *self, NSString *deviceName, IOSByteArray *macAddr, IOSByteArray *deviceClass, IOSByteArray *uuidClass, jbyte uidClassList) {
  ComStSt25sdkNdefNDEFRecord_init(self);
  if (macAddr == nil) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  [self setTnfWithShort:ComStSt25sdkNdefNDEFRecord_TNF_MEDIA];
  [self setTypeWithByteArray:JreLoadStatic(ComStSt25sdkNdefNDEFRecord, RTD_BT_APP)];
  self->mBtDeviceName_ = deviceName;
  self->mBtMacAddr_ = JavaUtilArrays_copyOfWithByteArray_withInt_(macAddr, macAddr->size_);
  if (deviceClass != nil) {
    self->mBtDeviceClass_ = JavaUtilArrays_copyOfWithByteArray_withInt_(deviceClass, deviceClass->size_);
  }
  else {
    self->mBtDeviceClass_ = nil;
  }
  if (uuidClass != nil) {
    self->mBtUuidClassList_ = JavaUtilArrays_copyOfWithByteArray_withInt_(uuidClass, uuidClass->size_);
  }
  else {
    self->mBtUuidClassList_ = nil;
  }
  self->mBtUuidClass_ = uidClassList;
  [self setSR];
}

ComStSt25sdkNdefBtRecord *new_ComStSt25sdkNdefBtRecord_initWithNSString_withByteArray_withByteArray_withByteArray_withByte_(NSString *deviceName, IOSByteArray *macAddr, IOSByteArray *deviceClass, IOSByteArray *uuidClass, jbyte uidClassList) {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefBtRecord, initWithNSString_withByteArray_withByteArray_withByteArray_withByte_, deviceName, macAddr, deviceClass, uuidClass, uidClassList)
}

ComStSt25sdkNdefBtRecord *create_ComStSt25sdkNdefBtRecord_initWithNSString_withByteArray_withByteArray_withByteArray_withByte_(NSString *deviceName, IOSByteArray *macAddr, IOSByteArray *deviceClass, IOSByteArray *uuidClass, jbyte uidClassList) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefBtRecord, initWithNSString_withByteArray_withByteArray_withByteArray_withByte_, deviceName, macAddr, deviceClass, uuidClass, uidClassList)
}

void ComStSt25sdkNdefBtRecord_initWithJavaIoByteArrayInputStream_(ComStSt25sdkNdefBtRecord *self, JavaIoByteArrayInputStream *inputStream) {
  ComStSt25sdkNdefNDEFRecord_initWithJavaIoByteArrayInputStream_(self, inputStream);
  IOSByteArray *payload = ComStSt25sdkNdefBtRecord_super$_getPayload(self, @selector(getPayload));
  if (payload == nil) {
    @throw new_JavaLangException_initWithNSString_(@"Invalid ndef data");
  }
  [self setTnfWithShort:ComStSt25sdkNdefNDEFRecord_TNF_MEDIA];
  [self setTypeWithByteArray:JreLoadStatic(ComStSt25sdkNdefNDEFRecord, RTD_BT_APP)];
  ComStSt25sdkNdefBtRecord_parseWithJavaNioByteBuffer_(self, JavaNioByteBuffer_wrapWithByteArray_(payload));
  if (JreLoadStatic(ComStSt25sdkNdefNDEFRecord, DBG_NDEF_RECORD)) {
    [self dbgCheckNdefRecordContentWithByteArray:payload];
  }
}

ComStSt25sdkNdefBtRecord *new_ComStSt25sdkNdefBtRecord_initWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *inputStream) {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefBtRecord, initWithJavaIoByteArrayInputStream_, inputStream)
}

ComStSt25sdkNdefBtRecord *create_ComStSt25sdkNdefBtRecord_initWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *inputStream) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefBtRecord, initWithJavaIoByteArrayInputStream_, inputStream)
}

void ComStSt25sdkNdefBtRecord_parseWithJavaNioByteBuffer_(ComStSt25sdkNdefBtRecord *self, JavaNioByteBuffer *payload) {
  @try {
    (void) [((JavaNioByteBuffer *) nil_chk(payload)) positionWithInt:2];
    IOSByteArray *address = [IOSByteArray newArrayWithLength:6];
    (void) [payload getWithByteArray:address];
    for (jint i = 0; i < 3; i++) {
      jbyte temp = IOSByteArray_Get(address, i);
      *IOSByteArray_GetRef(address, i) = IOSByteArray_Get(address, 5 - i);
      *IOSByteArray_GetRef(address, 5 - i) = temp;
    }
    self->mBtMacAddr_ = [address java_clone];
    self->mBtDeviceName_ = nil;
    while ([payload remaining] > 0) {
      IOSByteArray *nameBytes;
      jint len = [payload get];
      jint type = [payload get];
      if (len <= 0) {
        @throw new_JavaLangException_initWithNSString_(@"Invalid ndef data");
      }
      switch (type) {
        case (jint) 0x08:
        nameBytes = [IOSByteArray newArrayWithLength:len - 1];
        (void) [payload getWithByteArray:nameBytes];
        self->mBtDeviceName_ = [NSString java_stringWithBytes:nameBytes charset:JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8")];
        break;
        case (jint) 0x09:
        if (self->mBtDeviceName_ != nil) break;
        nameBytes = [IOSByteArray newArrayWithLength:len - 1];
        (void) [payload getWithByteArray:nameBytes];
        self->mBtDeviceName_ = [NSString java_stringWithBytes:nameBytes charset:JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8")];
        break;
        case (jint) 0x0D:
        self->mBtDeviceClass_ = [IOSByteArray newArrayWithLength:3];
        (void) [payload getWithByteArray:self->mBtDeviceClass_];
        break;
        case (jint) 0x02:
        self->mBtUuidClass_ = (jbyte) (jint) 0x02;
        self->mBtUuidClassList_ = [IOSByteArray newArrayWithLength:len - 1];
        (void) [payload getWithByteArray:self->mBtUuidClassList_];
        break;
        case (jint) 0x03:
        case (jint) 0x04:
        case (jint) 0x05:
        case (jint) 0x06:
        case (jint) 0x07:
        self->mBtUuidClass_ = (jbyte) type;
        self->mBtUuidClassList_ = [IOSByteArray newArrayWithLength:len - 1];
        (void) [payload getWithByteArray:self->mBtUuidClassList_];
        break;
        default:
        (void) [payload positionWithInt:[payload position] + len - 1];
        break;
      }
    }
  }
  @catch (JavaLangIllegalArgumentException *e) {
    ComStSt25sdkSTLog_eWithNSString_(@"BT OOB: invalid BT address");
  }
  @catch (JavaNioBufferUnderflowException *e) {
    ComStSt25sdkSTLog_eWithNSString_(@"BT OOB: payload shorter than expected");
  }
}

IOSByteArray *ComStSt25sdkNdefBtRecord_fillEirBufferWithByteArray_withByte_(ComStSt25sdkNdefBtRecord *self, IOSByteArray *input, jbyte id_) {
  if ((input != nil) && (((IOSByteArray *) nil_chk(input))->size_ != 0)) {
    JavaNioByteBuffer *output;
    output = JavaNioByteBuffer_allocateWithInt_(1 + 1 + ((IOSByteArray *) nil_chk(input))->size_);
    (void) [((JavaNioByteBuffer *) nil_chk(output)) putWithByte:(jbyte) ((1 + input->size_) & (jint) 0xFF)];
    (void) [output putWithByte:id_];
    (void) [output putWithByteArray:input withInt:0 withInt:input->size_];
    return [output array];
  }
  return nil;
}

void ComStSt25sdkNdefBtRecord_export2Bt(ComStSt25sdkNdefBtRecord *self) {
  self->mBuffer_ = nil;
  IOSByteArray *macAddr = nil;
  if (self->mBtMacAddr_ != nil) {
    macAddr = [IOSByteArray newArrayWithLength:self->mBtMacAddr_->size_];
    for (jint i = 0; i < self->mBtMacAddr_->size_; i++) {
      *IOSByteArray_GetRef(macAddr, i) = IOSByteArray_Get(self->mBtMacAddr_, self->mBtMacAddr_->size_ - i - 1);
    }
  }
  JavaIoByteArrayOutputStream *outputStream = new_JavaIoByteArrayOutputStream_init();
  IOSByteArray *eirBuffer;
  if (macAddr != nil) {
    [outputStream writeWithByteArray:macAddr withInt:0 withInt:macAddr->size_];
  }
  if (self->mBtDeviceName_ != nil && [self->mBtDeviceName_ java_length] > 0) {
    eirBuffer = ComStSt25sdkNdefBtRecord_fillEirBufferWithByteArray_withByte_(self, [self->mBtDeviceName_ java_getBytes], (jbyte) (jint) 0x09);
    [outputStream writeWithByteArray:eirBuffer withInt:0 withInt:((IOSByteArray *) nil_chk(eirBuffer))->size_];
  }
  if (self->mBtDeviceClass_ != nil) {
    eirBuffer = ComStSt25sdkNdefBtRecord_fillEirBufferWithByteArray_withByte_(self, self->mBtDeviceClass_, (jbyte) (jint) 0x0D);
    [outputStream writeWithByteArray:eirBuffer withInt:0 withInt:((IOSByteArray *) nil_chk(eirBuffer))->size_];
  }
  if (self->mBtUuidClassList_ != nil) {
    eirBuffer = ComStSt25sdkNdefBtRecord_fillEirBufferWithByteArray_withByte_(self, self->mBtUuidClassList_, self->mBtUuidClass_);
    [outputStream writeWithByteArray:eirBuffer withInt:0 withInt:((IOSByteArray *) nil_chk(eirBuffer))->size_];
  }
  jint size = [outputStream size] + 2;
  if (size > 0) {
    JavaNioByteBuffer *byteBuffer = JavaNioByteBuffer_allocateWithInt_(size);
    (void) [((JavaNioByteBuffer *) nil_chk(byteBuffer)) putWithByte:(jbyte) (size & (jint) 0xFF)];
    (void) [byteBuffer putWithByte:(jbyte) (JreRShift32((size & (jint) 0xFF00), 8))];
    (void) [byteBuffer putWithByteArray:[outputStream toByteArray]];
    self->mBuffer_ = [byteBuffer array];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkNdefBtRecord)
