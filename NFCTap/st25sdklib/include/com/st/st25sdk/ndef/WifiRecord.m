//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/ndef/WifiRecord.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/STLog.h"
#include "com/st/st25sdk/ndef/NDEFRecord.h"
#include "com/st/st25sdk/ndef/WifiRecord.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/nio/Buffer.h"
#include "java/nio/BufferUnderflowException.h"
#include "java/nio/ByteBuffer.h"

static id (*ComStSt25sdkNdefWifiRecord_super$_getPayload)(id, SEL);

@interface ComStSt25sdkNdefWifiRecord () {
 @public
  jint mNetworkIndex_;
  NSString *mSSID_;
  jint mNetAuthType_;
  jint mNetEncrType_;
  NSString *mEncrKey_;
  NSString *mMacAddr_;
  jint mKeySharable_;
  IOSByteArray *mBuffer_;
}

- (void)parseWithJavaNioByteBuffer:(JavaNioByteBuffer *)payload;

- (void)export2Wifi;

@end

J2OBJC_FIELD_SETTER(ComStSt25sdkNdefWifiRecord, mSSID_, NSString *)
J2OBJC_FIELD_SETTER(ComStSt25sdkNdefWifiRecord, mEncrKey_, NSString *)
J2OBJC_FIELD_SETTER(ComStSt25sdkNdefWifiRecord, mMacAddr_, NSString *)
J2OBJC_FIELD_SETTER(ComStSt25sdkNdefWifiRecord, mBuffer_, IOSByteArray *)

__attribute__((unused)) static void ComStSt25sdkNdefWifiRecord_parseWithJavaNioByteBuffer_(ComStSt25sdkNdefWifiRecord *self, JavaNioByteBuffer *payload);

__attribute__((unused)) static void ComStSt25sdkNdefWifiRecord_export2Wifi(ComStSt25sdkNdefWifiRecord *self);

J2OBJC_INITIALIZED_DEFN(ComStSt25sdkNdefWifiRecord)

@implementation ComStSt25sdkNdefWifiRecord

+ (jbyte)WIFI_AUTH_OPEN {
  return ComStSt25sdkNdefWifiRecord_WIFI_AUTH_OPEN;
}

+ (jbyte)WIFI_AUTH_WPAPSK {
  return ComStSt25sdkNdefWifiRecord_WIFI_AUTH_WPAPSK;
}

+ (jbyte)WIFI_AUTH_SHARED {
  return ComStSt25sdkNdefWifiRecord_WIFI_AUTH_SHARED;
}

+ (jbyte)WIFI_AUTH_WPA {
  return ComStSt25sdkNdefWifiRecord_WIFI_AUTH_WPA;
}

+ (jbyte)WIFI_AUTH_WPA2 {
  return ComStSt25sdkNdefWifiRecord_WIFI_AUTH_WPA2;
}

+ (jbyte)WIFI_AUTH_WPA2PSK {
  return ComStSt25sdkNdefWifiRecord_WIFI_AUTH_WPA2PSK;
}

+ (jbyte)WIFI_ENCR_NONE {
  return ComStSt25sdkNdefWifiRecord_WIFI_ENCR_NONE;
}

+ (jbyte)WIFI_ENCR_WEP {
  return ComStSt25sdkNdefWifiRecord_WIFI_ENCR_WEP;
}

+ (jbyte)WIFI_ENCR_TKIP {
  return ComStSt25sdkNdefWifiRecord_WIFI_ENCR_TKIP;
}

+ (jbyte)WIFI_ENCR_AES {
  return ComStSt25sdkNdefWifiRecord_WIFI_ENCR_AES;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComStSt25sdkNdefWifiRecord_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)ssid
                         withInt:(jint)authType
                         withInt:(jint)encrType
                    withNSString:(NSString *)password {
  ComStSt25sdkNdefWifiRecord_initWithNSString_withInt_withInt_withNSString_(self, ssid, authType, encrType, password);
  return self;
}

- (instancetype)initWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)inputStream {
  ComStSt25sdkNdefWifiRecord_initWithJavaIoByteArrayInputStream_(self, inputStream);
  return self;
}

- (void)setAuthTypeWithInt:(jint)type {
  mNetAuthType_ = type;
}

- (jint)getAuthType {
  return mNetAuthType_;
}

- (void)setEncrTypeWithInt:(jint)type {
  mNetEncrType_ = type;
}

- (jint)getEncrType {
  return mNetEncrType_;
}

- (void)setEncrKeyWithNSString:(NSString *)key {
  if (key == nil) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  mEncrKey_ = key;
}

- (NSString *)getEncrKey {
  return mEncrKey_;
}

- (void)setSSIDWithNSString:(NSString *)ssid {
  if (ssid == nil) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  mSSID_ = ssid;
}

- (NSString *)getSSID {
  return mSSID_;
}

- (IOSByteArray *)getPayload {
  ComStSt25sdkNdefWifiRecord_export2Wifi(self);
  return mBuffer_;
}

- (void)parseWithJavaNioByteBuffer:(JavaNioByteBuffer *)payload {
  ComStSt25sdkNdefWifiRecord_parseWithJavaNioByteBuffer_(self, payload);
}

- (void)export2Wifi {
  ComStSt25sdkNdefWifiRecord_export2Wifi(self);
}

- (NSString *)description {
  NSString *txt = @"WIFI Record:\n";
  (void) JreStrAppendStrong(&txt, "$$C", @"- SSID : ", mSSID_, 0x000a);
  (void) JreStrAppendStrong(&txt, "$", @"- Password : HIDDEN\n");
  return txt;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:withInt:withInt:withNSString:);
  methods[2].selector = @selector(initWithJavaIoByteArrayInputStream:);
  methods[3].selector = @selector(setAuthTypeWithInt:);
  methods[4].selector = @selector(getAuthType);
  methods[5].selector = @selector(setEncrTypeWithInt:);
  methods[6].selector = @selector(getEncrType);
  methods[7].selector = @selector(setEncrKeyWithNSString:);
  methods[8].selector = @selector(getEncrKey);
  methods[9].selector = @selector(setSSIDWithNSString:);
  methods[10].selector = @selector(getSSID);
  methods[11].selector = @selector(getPayload);
  methods[12].selector = @selector(parseWithJavaNioByteBuffer:);
  methods[13].selector = @selector(export2Wifi);
  methods[14].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mNetworkIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSSID_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNetAuthType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNetEncrType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mEncrKey_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMacAddr_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mKeySharable_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "WIFI_AUTH_OPEN", "B", .constantValue.asChar = ComStSt25sdkNdefWifiRecord_WIFI_AUTH_OPEN, 0x19, -1, -1, -1, -1 },
    { "WIFI_AUTH_WPAPSK", "B", .constantValue.asChar = ComStSt25sdkNdefWifiRecord_WIFI_AUTH_WPAPSK, 0x19, -1, -1, -1, -1 },
    { "WIFI_AUTH_SHARED", "B", .constantValue.asChar = ComStSt25sdkNdefWifiRecord_WIFI_AUTH_SHARED, 0x19, -1, -1, -1, -1 },
    { "WIFI_AUTH_WPA", "B", .constantValue.asChar = ComStSt25sdkNdefWifiRecord_WIFI_AUTH_WPA, 0x19, -1, -1, -1, -1 },
    { "WIFI_AUTH_WPA2", "B", .constantValue.asChar = ComStSt25sdkNdefWifiRecord_WIFI_AUTH_WPA2, 0x19, -1, -1, -1, -1 },
    { "WIFI_AUTH_WPA2PSK", "B", .constantValue.asChar = ComStSt25sdkNdefWifiRecord_WIFI_AUTH_WPA2PSK, 0x19, -1, -1, -1, -1 },
    { "WIFI_ENCR_NONE", "B", .constantValue.asChar = ComStSt25sdkNdefWifiRecord_WIFI_ENCR_NONE, 0x19, -1, -1, -1, -1 },
    { "WIFI_ENCR_WEP", "B", .constantValue.asChar = ComStSt25sdkNdefWifiRecord_WIFI_ENCR_WEP, 0x19, -1, -1, -1, -1 },
    { "WIFI_ENCR_TKIP", "B", .constantValue.asChar = ComStSt25sdkNdefWifiRecord_WIFI_ENCR_TKIP, 0x19, -1, -1, -1, -1 },
    { "WIFI_ENCR_AES", "B", .constantValue.asChar = ComStSt25sdkNdefWifiRecord_WIFI_ENCR_AES, 0x19, -1, -1, -1, -1 },
    { "mBuffer_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;IILNSString;", "LJavaIoByteArrayInputStream;", "LJavaLangException;", "setAuthType", "I", "setEncrType", "setEncrKey", "LNSString;", "setSSID", "parse", "LJavaNioByteBuffer;", "toString" };
  static const J2ObjcClassInfo _ComStSt25sdkNdefWifiRecord = { "WifiRecord", "com.st.st25sdk.ndef", ptrTable, methods, fields, 7, 0x1, 15, 18, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkNdefWifiRecord;
}

+ (void)initialize {
  if (self == [ComStSt25sdkNdefWifiRecord class]) {
    ComStSt25sdkNdefWifiRecord_super$_getPayload = (id (*)(id, SEL))[ComStSt25sdkNdefNDEFRecord instanceMethodForSelector:@selector(getPayload)];
    J2OBJC_SET_INITIALIZED(ComStSt25sdkNdefWifiRecord)
  }
}

@end

void ComStSt25sdkNdefWifiRecord_init(ComStSt25sdkNdefWifiRecord *self) {
  ComStSt25sdkNdefNDEFRecord_init(self);
  [self setTnfWithShort:ComStSt25sdkNdefNDEFRecord_TNF_MEDIA];
  [self setTypeWithByteArray:JreLoadStatic(ComStSt25sdkNdefNDEFRecord, RTD_WIFI_APP)];
  self->mNetworkIndex_ = 1;
  self->mSSID_ = @"";
  self->mNetAuthType_ = 0;
  self->mNetEncrType_ = 0;
  self->mEncrKey_ = @"";
  self->mMacAddr_ = @"";
  self->mKeySharable_ = 0;
  [self setIdWithByteArray:[IOSByteArray newArrayWithLength:0]];
}

ComStSt25sdkNdefWifiRecord *new_ComStSt25sdkNdefWifiRecord_init() {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefWifiRecord, init)
}

ComStSt25sdkNdefWifiRecord *create_ComStSt25sdkNdefWifiRecord_init() {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefWifiRecord, init)
}

void ComStSt25sdkNdefWifiRecord_initWithNSString_withInt_withInt_withNSString_(ComStSt25sdkNdefWifiRecord *self, NSString *ssid, jint authType, jint encrType, NSString *password) {
  ComStSt25sdkNdefNDEFRecord_init(self);
  if ((ssid == nil) || (password == nil)) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  [self setTnfWithShort:ComStSt25sdkNdefNDEFRecord_TNF_MEDIA];
  [self setTypeWithByteArray:JreLoadStatic(ComStSt25sdkNdefNDEFRecord, RTD_WIFI_APP)];
  self->mNetworkIndex_ = 1;
  self->mSSID_ = ssid;
  self->mNetAuthType_ = authType;
  self->mNetEncrType_ = encrType;
  self->mEncrKey_ = password;
  self->mMacAddr_ = @"";
  self->mKeySharable_ = 0;
  [self setIdWithByteArray:[IOSByteArray newArrayWithLength:0]];
  [self setSR];
}

ComStSt25sdkNdefWifiRecord *new_ComStSt25sdkNdefWifiRecord_initWithNSString_withInt_withInt_withNSString_(NSString *ssid, jint authType, jint encrType, NSString *password) {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefWifiRecord, initWithNSString_withInt_withInt_withNSString_, ssid, authType, encrType, password)
}

ComStSt25sdkNdefWifiRecord *create_ComStSt25sdkNdefWifiRecord_initWithNSString_withInt_withInt_withNSString_(NSString *ssid, jint authType, jint encrType, NSString *password) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefWifiRecord, initWithNSString_withInt_withInt_withNSString_, ssid, authType, encrType, password)
}

void ComStSt25sdkNdefWifiRecord_initWithJavaIoByteArrayInputStream_(ComStSt25sdkNdefWifiRecord *self, JavaIoByteArrayInputStream *inputStream) {
  ComStSt25sdkNdefNDEFRecord_initWithJavaIoByteArrayInputStream_(self, inputStream);
  IOSByteArray *payload = ComStSt25sdkNdefWifiRecord_super$_getPayload(self, @selector(getPayload));
  if (payload == nil) {
    @throw new_JavaLangException_initWithNSString_(@"Invalid ndef data");
  }
  [self setTnfWithShort:ComStSt25sdkNdefNDEFRecord_TNF_MEDIA];
  [self setTypeWithByteArray:JreLoadStatic(ComStSt25sdkNdefNDEFRecord, RTD_WIFI_APP)];
  ComStSt25sdkNdefWifiRecord_parseWithJavaNioByteBuffer_(self, JavaNioByteBuffer_wrapWithByteArray_(payload));
  [self setIdWithByteArray:[IOSByteArray newArrayWithLength:0]];
  if (JreLoadStatic(ComStSt25sdkNdefNDEFRecord, DBG_NDEF_RECORD)) {
    [self dbgCheckNdefRecordContentWithByteArray:payload];
  }
}

ComStSt25sdkNdefWifiRecord *new_ComStSt25sdkNdefWifiRecord_initWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *inputStream) {
  J2OBJC_NEW_IMPL(ComStSt25sdkNdefWifiRecord, initWithJavaIoByteArrayInputStream_, inputStream)
}

ComStSt25sdkNdefWifiRecord *create_ComStSt25sdkNdefWifiRecord_initWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *inputStream) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkNdefWifiRecord, initWithJavaIoByteArrayInputStream_, inputStream)
}

void ComStSt25sdkNdefWifiRecord_parseWithJavaNioByteBuffer_(ComStSt25sdkNdefWifiRecord *self, JavaNioByteBuffer *payload) {
  IOSByteArray *version_;
  IOSByteArray *indexNet;
  IOSByteArray *SSID;
  IOSByteArray *authNet;
  IOSByteArray *encryptNet;
  IOSByteArray *networkKey;
  IOSByteArray *macAddr;
  IOSByteArray *vendorExtension;
  jint temp;
  (void) [((JavaNioByteBuffer *) nil_chk(payload)) positionWithInt:0];
  @try {
    while ([payload remaining] > 0) {
      if ([payload get] != (jbyte) (jint) 0x10) {
        ComStSt25sdkSTLog_eWithNSString_(@"Missing ID Attribute");
      }
      jbyte type = [payload get];
      jint len = (JreLShift32(([payload get] & (jint) 0xFF), 8)) + ([payload get] & (jint) 0xFF);
      switch (type) {
        case (jint) 0x4A:
        version_ = [IOSByteArray newArrayWithLength:len];
        (void) [payload getWithByteArray:version_];
        break;
        case (jint) 0x26:
        indexNet = [IOSByteArray newArrayWithLength:len];
        (void) [payload getWithByteArray:indexNet];
        temp = 0;
        for (jint i = 0; i < len; i++) {
          temp = JreLShift32(temp, 8);
          temp = temp + (IOSByteArray_Get(indexNet, i) & (jint) 0xFF);
        }
        self->mNetworkIndex_ = temp;
        break;
        case (jint) 0x45:
        SSID = [IOSByteArray newArrayWithLength:len];
        (void) [payload getWithByteArray:SSID];
        @try {
          self->mSSID_ = [NSString java_stringWithBytes:SSID charsetName:@"UTF-8"];
        }
        @catch (JavaIoUnsupportedEncodingException *e) {
          [e printStackTrace];
        }
        break;
        case (jint) 0x03:
        authNet = [IOSByteArray newArrayWithLength:len];
        (void) [payload getWithByteArray:authNet];
        temp = 0;
        for (jint i = 0; i < len; i++) {
          temp = JreLShift32(temp, 8);
          temp = temp + (IOSByteArray_Get(authNet, i) & (jint) 0xFF);
        }
        self->mNetAuthType_ = temp;
        break;
        case (jint) 0x0F:
        encryptNet = [IOSByteArray newArrayWithLength:len];
        (void) [payload getWithByteArray:encryptNet];
        temp = 0;
        for (jint i = 0; i < len; i++) {
          temp = JreLShift32(temp, 8);
          temp = temp + (IOSByteArray_Get(encryptNet, i) & (jint) 0xFF);
        }
        self->mNetEncrType_ = temp;
        break;
        case (jint) 0x27:
        networkKey = [IOSByteArray newArrayWithLength:len];
        (void) [payload getWithByteArray:networkKey];
        @try {
          self->mEncrKey_ = [NSString java_stringWithBytes:networkKey charsetName:@"UTF-8"];
        }
        @catch (JavaIoUnsupportedEncodingException *e) {
          [e printStackTrace];
        }
        break;
        case (jint) 0x20:
        macAddr = [IOSByteArray newArrayWithLength:len];
        (void) [payload getWithByteArray:macAddr];
        @try {
          self->mMacAddr_ = [NSString java_stringWithBytes:macAddr charsetName:@"UTF-8"];
        }
        @catch (JavaIoUnsupportedEncodingException *e) {
          [e printStackTrace];
        }
        break;
        case (jint) 0x49:
        vendorExtension = [IOSByteArray newArrayWithLength:len];
        (void) [payload getWithByteArray:vendorExtension];
        break;
        case (jint) 0x0E:
        break;
        default:
        (void) [payload positionWithInt:[payload position] + len - 1];
        break;
      }
    }
  }
  @catch (JavaLangIllegalArgumentException *e) {
    ComStSt25sdkSTLog_eWithNSString_(@"Wifi : invalid Wifi parameter");
  }
  @catch (JavaNioBufferUnderflowException *e) {
    ComStSt25sdkSTLog_eWithNSString_(@"Wifi: payload shorter than expected");
  }
}

void ComStSt25sdkNdefWifiRecord_export2Wifi(ComStSt25sdkNdefWifiRecord *self) {
  self->mBuffer_ = nil;
  IOSByteArray *credential = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x10, (jbyte) (jint) 0x0E, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00 } count:4];
  IOSByteArray *indexNet = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x10, (jbyte) (jint) 0x26, (jbyte) (jint) 0x00, (jbyte) (jint) 0x01, (jbyte) (jint) 0x01 } count:5];
  JavaNioByteBuffer *ssid;
  IOSByteArray *AttribIDSSID = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x10, (jbyte) (jint) 0x45 } count:2];
  IOSByteArray *authNet = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x10, (jbyte) (jint) 0x03, (jbyte) (jint) 0x00, (jbyte) (jint) 0x02, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00 } count:6];
  IOSByteArray *encryptNet = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x10, (jbyte) (jint) 0x0F, (jbyte) (jint) 0x00, (jbyte) (jint) 0x02, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00 } count:6];
  JavaNioByteBuffer *networkKey = nil;
  IOSByteArray *defaultNetworkKey = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x10, (jbyte) (jint) 0x27 } count:2];
  IOSByteArray *macAddr = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x10, (jbyte) (jint) 0x20, (jbyte) (jint) 0x00, (jbyte) (jint) 0x06, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00 } count:10];
  JavaNioByteBuffer *vendorExtension;
  IOSByteArray *defaultVendorExtension1 = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x10, (jbyte) (jint) 0x49, (jbyte) (jint) 0x00, (jbyte) (jint) 0x06, (jbyte) (jint) 0x00, (jbyte) (jint) 0x37, (jbyte) (jint) 0x2A, (jbyte) (jint) 0x02, (jbyte) (jint) 0x01, (jbyte) (jint) 0x01 } count:10];
  IOSByteArray *defaultVendorExtension2 = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x10, (jbyte) (jint) 0x49, (jbyte) (jint) 0x00, (jbyte) (jint) 0x06, (jbyte) (jint) 0x00, (jbyte) (jint) 0x37, (jbyte) (jint) 0x2A, (jbyte) (jint) 0x00, (jbyte) (jint) 0x01, (jbyte) (jint) 0x20 } count:10];
  jint idAttribLength = 2;
  jint sizeParameterLength = 2;
  jint credentialTokenLength = 0;
  credentialTokenLength += indexNet->size_;
  if ((self->mSSID_ == nil) || ([((NSString *) nil_chk(self->mSSID_)) java_getBytes] == nil)) {
    @throw new_JavaLangException_initWithNSString_(@"Invalid ndef data");
  }
  ssid = JavaNioByteBuffer_allocateWithInt_(idAttribLength + sizeParameterLength + ((IOSByteArray *) nil_chk([((NSString *) nil_chk(self->mSSID_)) java_getBytes]))->size_);
  (void) [((JavaNioByteBuffer *) nil_chk(ssid)) putWithByteArray:AttribIDSSID];
  (void) [ssid putWithByte:(jbyte) (JreRShift32((((IOSByteArray *) nil_chk([((NSString *) nil_chk(self->mSSID_)) java_getBytes]))->size_ & (jint) 0xFF00), 8))];
  (void) [ssid putWithByte:(jbyte) ((((IOSByteArray *) nil_chk([((NSString *) nil_chk(self->mSSID_)) java_getBytes]))->size_ & (jint) 0xFF))];
  (void) [ssid putWithByteArray:[((NSString *) nil_chk(self->mSSID_)) java_getBytes]];
  credentialTokenLength += [ssid position];
  jint authType = [self getAuthType];
  if (authType == ComStSt25sdkNdefWifiRecord_WIFI_AUTH_OPEN) authType = 0;
  *IOSByteArray_GetRef(authNet, 5) = (jbyte) (authType & (jint) 0xFF);
  credentialTokenLength += authNet->size_;
  jint encrType = [self getEncrType];
  if (encrType == ComStSt25sdkNdefWifiRecord_WIFI_ENCR_NONE) encrType = 0;
  *IOSByteArray_GetRef(encryptNet, 5) = (jbyte) (encrType & (jint) 0xFF);
  credentialTokenLength += encryptNet->size_;
  NSString *key = self->mEncrKey_;
  if ((key == nil) || ([((NSString *) nil_chk(key)) java_isEmpty])) {
    key = @"No password";
  }
  networkKey = JavaNioByteBuffer_allocateWithInt_(idAttribLength + sizeParameterLength + ((IOSByteArray *) nil_chk([((NSString *) nil_chk(key)) java_getBytes]))->size_);
  (void) [((JavaNioByteBuffer *) nil_chk(networkKey)) putWithByteArray:defaultNetworkKey];
  (void) [networkKey putWithByte:(jbyte) (JreRShift32((((IOSByteArray *) nil_chk([key java_getBytes]))->size_ & (jint) 0xFF00), 8))];
  (void) [networkKey putWithByte:(jbyte) (((IOSByteArray *) nil_chk([key java_getBytes]))->size_ & (jint) 0xFF)];
  (void) [networkKey putWithByteArray:[key java_getBytes]];
  credentialTokenLength += [networkKey position];
  credentialTokenLength += macAddr->size_;
  vendorExtension = JavaNioByteBuffer_allocateWithInt_(defaultVendorExtension1->size_ + defaultVendorExtension2->size_);
  (void) [((JavaNioByteBuffer *) nil_chk(vendorExtension)) putWithByteArray:defaultVendorExtension1];
  (void) [vendorExtension putWithByteArray:defaultVendorExtension2];
  credentialTokenLength += [vendorExtension position];
  *IOSByteArray_GetRef(credential, 2) = (jbyte) (JreRShift32((credentialTokenLength & (jint) 0xFF00), 8));
  *IOSByteArray_GetRef(credential, 3) = (jbyte) ((credentialTokenLength & (jint) 0xFF));
  jint payloadLength = credentialTokenLength + credential->size_;
  JavaNioByteBuffer *buffer = JavaNioByteBuffer_allocateWithInt_(payloadLength);
  (void) [((JavaNioByteBuffer *) nil_chk(buffer)) putWithByteArray:credential];
  (void) [buffer putWithByteArray:indexNet];
  (void) [buffer putWithByteArray:[ssid array]];
  (void) [buffer putWithByteArray:authNet];
  (void) [buffer putWithByteArray:encryptNet];
  if (networkKey != nil) {
    (void) [buffer putWithByteArray:[networkKey array]];
  }
  (void) [buffer putWithByteArray:macAddr];
  (void) [buffer putWithByteArray:[vendorExtension array]];
  self->mBuffer_ = [buffer array];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkNdefWifiRecord)
