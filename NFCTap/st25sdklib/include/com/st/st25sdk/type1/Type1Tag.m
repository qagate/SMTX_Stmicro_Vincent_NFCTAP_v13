//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: st25sdk_ios/type1/Type1Tag.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/st/st25sdk/NFCTag.h"
#include "com/st/st25sdk/RFReaderInterface.h"
#include "com/st/st25sdk/STException.h"
#include "com/st/st25sdk/command/Type1Command.h"
#include "com/st/st25sdk/ndef/NDEFMsg.h"
#include "com/st/st25sdk/type1/Type1Tag.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"

@implementation ComStSt25sdkType1Type1Tag

- (instancetype)initWithComStSt25sdkRFReaderInterface:(id<ComStSt25sdkRFReaderInterface>)readerInterface
                                        withByteArray:(IOSByteArray *)uid {
  ComStSt25sdkType1Type1Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(self, readerInterface, uid);
  return self;
}

- (IOSByteArray *)getLsbUID {
  return mTagUidLSB_;
}

- (jbyte)getHR0 {
  return mHR0_;
}

- (jbyte)getHR1 {
  return mHR1_;
}

- (jboolean)isStaticMemoryMap {
  return (mHR0_ & (jint) 0x0F) == (jint) 0x01;
}

- (jboolean)checkType1TagPresence {
  return mTagUidLSB_ == [((ComStSt25sdkCommandType1Command *) nil_chk(mType1Cmd_)) getUidLSB];
}

- (IOSByteArray *)readHR0HR1bytes {
  IOSByteArray *response = [((ComStSt25sdkCommandType1Command *) nil_chk(mType1Cmd_)) getHr0Hr1];
  if (((IOSByteArray *) nil_chk(response))->size_ == 2) {
    mHR0_ = IOSByteArray_Get(response, 0);
    mHR1_ = IOSByteArray_Get(response, 1);
  }
  return response;
}

- (IOSByteArray *)readAll {
  return [((ComStSt25sdkCommandType1Command *) nil_chk(mType1Cmd_)) rallWithByteArray:mTagUidLSB_];
}

- (IOSByteArray *)readByteWithByte:(jbyte)blockAddress {
  return [((ComStSt25sdkCommandType1Command *) nil_chk(mType1Cmd_)) readWithByte:blockAddress withByteArray:mTagUidLSB_];
}

- (void)writeEraseByteWithByte:(jbyte)blockAddress
                      withByte:(jbyte)data {
  [((ComStSt25sdkCommandType1Command *) nil_chk(mType1Cmd_)) writeEraseWithByte:blockAddress withByte:data withByteArray:mTagUidLSB_];
}

- (void)writeNoEraseByteWithByte:(jbyte)blockAddress
                        withByte:(jbyte)data {
  [((ComStSt25sdkCommandType1Command *) nil_chk(mType1Cmd_)) writeNoEraseWithByte:blockAddress withByte:data withByteArray:mTagUidLSB_];
}

- (IOSByteArray *)readSegmentWithByte:(jbyte)adds {
  return [((ComStSt25sdkCommandType1Command *) nil_chk(mType1Cmd_)) rsegWithByte:adds withByteArray:mTagUidLSB_];
}

- (IOSByteArray *)read8BytesWithByte:(jbyte)add8 {
  return [((ComStSt25sdkCommandType1Command *) nil_chk(mType1Cmd_)) read8WithByte:add8 withByteArray:mTagUidLSB_];
}

- (void)writeErase8BytesWithByte:(jbyte)add8
                   withByteArray:(IOSByteArray *)data {
  [((ComStSt25sdkCommandType1Command *) nil_chk(mType1Cmd_)) writeErase8WithByte:add8 withByteArray:data withByteArray:mTagUidLSB_];
}

- (void)writeNoErase8BytesWithByte:(jbyte)add8
                     withByteArray:(IOSByteArray *)data {
  [((ComStSt25sdkCommandType1Command *) nil_chk(mType1Cmd_)) writeNoErase8WithByte:add8 withByteArray:data withByteArray:mTagUidLSB_];
}

- (jint)getMemSizeInBytes {
  return mMemSize_;
}

- (jbyte)getICRef {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jint)getCCFileLength {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jbyte)getCCMagicNumber {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jbyte)getCCMappingVersion {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jbyte)getCCReadAccess {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jbyte)getCCWriteAccess {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jint)getCCMemorySize {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (void)writeNdefMessageWithComStSt25sdkNdefNDEFMsg:(ComStSt25sdkNdefNDEFMsg *)msg {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (ComStSt25sdkNdefNDEFMsg *)readNdefMessage {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (IOSByteArray *)readCCFile {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (void)writeCCFile {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (void)writeCCFileWithByteArray:(IOSByteArray *)buffer {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (void)initEmptyCCFile {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (jint)getSysFileLength {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (IOSByteArray *)readBytesWithInt:(jint)byteAddress
                           withInt:(jint)sizeInBytes {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (void)writeBytesWithInt:(jint)byteAddress
            withByteArray:(IOSByteArray *)data {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

- (IOSByteArray *)readSysFile {
  @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, NOT_IMPLEMENTED));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 7, 3, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 10, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 1, -1, -1, -1 },
    { NULL, "LComStSt25sdkNdefNDEFMsg;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 16, 17, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComStSt25sdkRFReaderInterface:withByteArray:);
  methods[1].selector = @selector(getLsbUID);
  methods[2].selector = @selector(getHR0);
  methods[3].selector = @selector(getHR1);
  methods[4].selector = @selector(isStaticMemoryMap);
  methods[5].selector = @selector(checkType1TagPresence);
  methods[6].selector = @selector(readHR0HR1bytes);
  methods[7].selector = @selector(readAll);
  methods[8].selector = @selector(readByteWithByte:);
  methods[9].selector = @selector(writeEraseByteWithByte:withByte:);
  methods[10].selector = @selector(writeNoEraseByteWithByte:withByte:);
  methods[11].selector = @selector(readSegmentWithByte:);
  methods[12].selector = @selector(read8BytesWithByte:);
  methods[13].selector = @selector(writeErase8BytesWithByte:withByteArray:);
  methods[14].selector = @selector(writeNoErase8BytesWithByte:withByteArray:);
  methods[15].selector = @selector(getMemSizeInBytes);
  methods[16].selector = @selector(getICRef);
  methods[17].selector = @selector(getCCFileLength);
  methods[18].selector = @selector(getCCMagicNumber);
  methods[19].selector = @selector(getCCMappingVersion);
  methods[20].selector = @selector(getCCReadAccess);
  methods[21].selector = @selector(getCCWriteAccess);
  methods[22].selector = @selector(getCCMemorySize);
  methods[23].selector = @selector(writeNdefMessageWithComStSt25sdkNdefNDEFMsg:);
  methods[24].selector = @selector(readNdefMessage);
  methods[25].selector = @selector(readCCFile);
  methods[26].selector = @selector(writeCCFile);
  methods[27].selector = @selector(writeCCFileWithByteArray:);
  methods[28].selector = @selector(initEmptyCCFile);
  methods[29].selector = @selector(getSysFileLength);
  methods[30].selector = @selector(readBytesWithInt:withInt:);
  methods[31].selector = @selector(writeBytesWithInt:withByteArray:);
  methods[32].selector = @selector(readSysFile);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mType1Cmd_", "LComStSt25sdkCommandType1Command;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mTagUidLSB_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mHR0_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mHR1_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComStSt25sdkRFReaderInterface;[B", "LComStSt25sdkSTException;", "readByte", "B", "writeEraseByte", "BB", "writeNoEraseByte", "readSegment", "read8Bytes", "writeErase8Bytes", "B[B", "writeNoErase8Bytes", "writeNdefMessage", "LComStSt25sdkNdefNDEFMsg;", "writeCCFile", "[B", "readBytes", "II", "writeBytes", "I[B" };
  static const J2ObjcClassInfo _ComStSt25sdkType1Type1Tag = { "Type1Tag", "com.st.st25sdk.type1", ptrTable, methods, fields, 7, 0x1, 33, 4, -1, -1, -1, -1, -1 };
  return &_ComStSt25sdkType1Type1Tag;
}

@end

void ComStSt25sdkType1Type1Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(ComStSt25sdkType1Type1Tag *self, id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  ComStSt25sdkNFCTag_initWithComStSt25sdkRFReaderInterface_(self, readerInterface);
  self->mTagUidLSB_ = [IOSByteArray newArrayWithLength:4];
  self->mHR0_ = (jint) 0x00;
  self->mHR1_ = (jint) 0x00;
  self->mName_ = @"Type1 tag";
  self->mDescription_ = @"Type1 on ISO/IEC 14443-A";
  if (uid == nil || uid->size_ < 4) {
    @throw new_ComStSt25sdkSTException_initWithComStSt25sdkSTException_STExceptionCode_(JreLoadEnum(ComStSt25sdkSTException_STExceptionCode, BAD_PARAMETER));
  }
  self->mUid_ = JavaUtilArrays_copyOfWithByteArray_withInt_(uid, uid->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(uid, 0, self->mTagUidLSB_, 0, 4);
  self->mType1Cmd_ = new_ComStSt25sdkCommandType1Command_initWithComStSt25sdkRFReaderInterface_(readerInterface);
  (void) [self readHR0HR1bytes];
}

ComStSt25sdkType1Type1Tag *new_ComStSt25sdkType1Type1Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  J2OBJC_NEW_IMPL(ComStSt25sdkType1Type1Tag, initWithComStSt25sdkRFReaderInterface_withByteArray_, readerInterface, uid)
}

ComStSt25sdkType1Type1Tag *create_ComStSt25sdkType1Type1Tag_initWithComStSt25sdkRFReaderInterface_withByteArray_(id<ComStSt25sdkRFReaderInterface> readerInterface, IOSByteArray *uid) {
  J2OBJC_CREATE_IMPL(ComStSt25sdkType1Type1Tag, initWithComStSt25sdkRFReaderInterface_withByteArray_, readerInterface, uid)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComStSt25sdkType1Type1Tag)
